module RogueC

class CWriter : BufferedPrintWriter
  PROPERTIES
    file      : File
    is_header : Logical
    line_count     = 0

  METHODS
    method init( file, &header, &file_index=1:Int )
      prior.init( file.writer )
      is_header = header

      if (is_header)
        localize underscore_filename
        println "#ifndef $\n#define $\n\n"(underscore_filename,underscore_filename)
        println "// $"(file.filename)
        println
        println @|#if defined(__cplusplus)
                 |  #define ROGUE_EXTERN_C extern "C"
                 |  #define BEGIN_ROGUE_EXTERN_C extern "C" {
                 |  #define END_ROGUE_EXTERN_C }
                 |#else
                 |  #define ROGUE_EXTERN_C
                 |  #define BEGIN_ROGUE_EXTERN_C
                 |  #define END_ROGUE_EXTERN_C
                 |#endif
                 |
                 |#if defined(__cplusplus) && defined(_WIN32)
                 |  #define ROGUE_COMPOUND(name) name
                 |#else
                 |  #define ROGUE_COMPOUND(name) (name)
                 |#endif
                 |

        if (Program.gc_auto)
          println "#define %NS%ROGUE_GC_AUTO"
          println
        endIf

        println ...
        @|// Set up C conditional compilation defines
         |#if defined(__EMSCRIPTEN__)
         |  #define %NS%ROGUE_PLATFORM_WEB 1
         |  #define %NS%ROGUE_PLATFORM_DETERMINED 1
         |#elif defined(%NS%ROGUE_PLATFORM_PLAYDATE)
         |  #define %NS%ROGUE_PLATFORM_DETERMINED 1
         |#endif
         |
         |#if !defined(%NS%ROGUE_PLATFORM_DETERMINED)
         |  // Handle Apple's wonky defines which used to ALWAYS be defined as 0 or 1 and
         |  // are now only defined if the platform is active.
         |
         |  #if defined(__APPLE__)
         |    #if defined(TARGET_IPHONE_SIMULATOR)
         |      #if TARGET_IPHONE_SIMULATOR
         |        #define %NS%ROGUE_PLATFORM_IOS 1
         |      #endif
         |    #endif
         |
         |    #if !defined(%NS%ROGUE_PLATFORM_IOS)
         |      #if defined(TARGET_OS_IPHONE)
         |        #if TARGET_OS_IPHONE
         |          #define %NS%ROGUE_PLATFORM_IOS 1
         |        #endif
         |      #endif
         |    #endif
         |
         |    #if !defined(%NS%ROGUE_PLATFORM_IOS)
         |      #define %NS%ROGUE_PLATFORM_MACOS 1
         |    #endif
         |
         |    #define %NS%ROGUE_PLATFORM_DETERMINED 1
         |  #endif
         |#endif
         |
         |#if !defined(%NS%ROGUE_PLATFORM_DETERMINED)
         |  #if defined(_WIN32)
         |  #  define %NS%ROGUE_PLATFORM_WINDOWS 1
         |  #elif defined(__ANDROID__)
         |  #  define %NS%ROGUE_PLATFORM_ANDROID 1
         |  #elif defined(__linux__)
         |  #  define %NS%ROGUE_PLATFORM_LINUX 1
         |  #elif defined(__CYGWIN__)
         |  #  define %NS%ROGUE_PLATFORM_LINUX  1
         |  #  define %NS%ROGUE_PLATFORM_CYGWIN 1
         |  #else
         |  #  define %NS%ROGUE_PLATFORM_GENERIC 1
         |  #endif
         |#endif
         |
         |#if defined(%NS%ROGUE_PLATFORM_WINDOWS)
         |  #pragma warning(disable: 4297) /* unexpected throw warnings */
         |  #if !defined(UNICODE)
         |    #define UNICODE
         |  #endif
         |  #include <windows.h>
         |  #include <signal.h>
         |#else
         |  #define %NS%ROGUE_PLATFORM_UNIX_COMPATIBLE 1
         |  #include <limits.h>
         |  #include <stdint.h>
         |#endif
         |
         |#include <math.h>
         |#include <stdlib.h>
         |#include <string.h>
         |
         |//------------------------------------------------------------------------------
         |// Logging
         |//------------------------------------------------------------------------------
         |#ifdef __ANDROID__
         |  #include <android/log.h>
         |  #define %NS%ROGUE_LOG(...)       __android_log_print( ANDROID_LOG_INFO,  "%Ns%Rogue", __VA_ARGS__ )
         |  #define %NS%ROGUE_LOG_ERROR(...) __android_log_print( ANDROID_LOG_ERROR, "%Ns%Rogue", __VA_ARGS__ )
         |#else
         |  #define %NS%ROGUE_LOG(...)       printf( __VA_ARGS__ )
         |  #define %NS%ROGUE_LOG_ERROR(...) printf( __VA_ARGS__ )
         |#endif
         |
         |//------------------------------------------------------------------------------
         |// Primitive Types
         |//------------------------------------------------------------------------------
         |#if defined(%NS%ROGUE_PLATFORM_WINDOWS)
         |  typedef double           %Ns%RogueReal64;
         |  typedef float            %Ns%RogueReal32;
         |  typedef __int64          %Ns%RogueInt64;
         |  typedef __int32          %Ns%RogueInt32;
         |  typedef __int32          %Ns%RogueCharacter;
         |  typedef unsigned __int16 %Ns%RogueWord;
         |  typedef unsigned char    %Ns%RogueByte;
         |  typedef int              %Ns%RogueLogical;
         |  typedef unsigned __int64 %Ns%RogueUInt64;
         |  typedef unsigned __int32 %Ns%RogueUInt32;
         |#else
         |  typedef double           %Ns%RogueReal64;
         |  typedef float            %Ns%RogueReal32;
         |  typedef int64_t          %Ns%RogueInt64;
         |  typedef int32_t          %Ns%RogueInt32;
         |  typedef int32_t          %Ns%RogueCharacter;
         |  typedef uint16_t         %Ns%RogueWord;
         |  typedef uint8_t          %Ns%RogueByte;
         |  typedef int              %Ns%RogueLogical;
         |  typedef uint64_t         %Ns%RogueUInt64;
         |  typedef uint32_t         %Ns%RogueUInt32;
         |#endif

       if (Program.int_bits == 32)  println "typedef %Ns%RogueInt32  %Ns%RogueInt;"
       else                         println "typedef %Ns%RogueInt64  %Ns%RogueInt;"
       if (Program.real_bits == 32) println "typedef %Ns%RogueReal32 %Ns%RogueReal;"
       else                         println "typedef %Ns%RogueReal64 %Ns%RogueReal;"

        println "#define %NS%ROGUE_TYPE_PRIMITIVE $" (Attribute.PRIMITIVE)
        println "#define %NS%ROGUE_TYPE_COMPOUND  $" (Attribute.COMPOUND)
        println "#define %NS%ROGUE_TYPE_ENUM      $" (Attribute.ENUM)
        println "#define %NS%ROGUE_TYPE_OBJECT    $" (Attribute.OBJECT)
        println "#define %NS%ROGUE_TYPE_ASPECT    $" (Attribute.ASPECT)
        println "#define %NS%ROGUE_TYPE_SINGLETON $" (Attribute.SINGLETON)

        println ...
          @|
           |#if !defined(%NS%ROGUE_MM_GC_THRESHOLD)
           |  #define %NS%ROGUE_MM_GC_THRESHOLD (32 * 1024 * 1024)
           |#endif
           |
           |//------------------------------------------------------------------------------
           |// Classes
           |//------------------------------------------------------------------------------
           |#if !defined(%NS%ROGUE_MALLOC)
           |  #define %NS%ROGUE_MALLOC malloc
           |#endif
           |
           |#if !defined(%NS%ROGUE_FREE)
           |  #define %NS%ROGUE_FREE free
           |#endif
           |
           |#if !defined(%NS%ROGUE_CREATE_OBJECT)
           |  #define %NS%ROGUE_CREATE_OBJECT( TypeName ) \
           |      ((TypeName*)%Ns%Rogue_create_object(&Type##TypeName,1))
           |#endif
           |
           |#if !defined(%NS%ROGUE_NEW_OBJECT)
           |  // Creates an untracked Rogue object
           |  #define %NS%ROGUE_NEW_OBJECT( TypeName ) \
           |      ((TypeName*)%Ns%Rogue_new_object(&Type##TypeName))
           |#endif
           |
           |#if !defined(%NS%ROGUE_SINGLETON)
           |  #define %NS%ROGUE_SINGLETON( TypeName ) \
           |      ((TypeName*)%Ns%Rogue_singleton(&Type##TypeName,&TypeName##_singleton))
           |#endif
           |
           |#if !defined(%NS%ROGUE_SET_SINGLETON)
           |  #define %NS%ROGUE_SET_SINGLETON( TypeName, new_singleton ) \
           |      %Ns%Rogue_set_singleton(&Type##TypeName,&TypeName##_singleton,new_singleton)
           |#endif
           |
           |#if !defined(%NS%ROGUE_RELEASE)
           |  // Allow 'obj' to be GC'd if there are no other references to it.
           |  #define %NS%ROGUE_RELEASE( obj )  %Ns%Rogue_release( obj )
           |#endif
           |
           |#if !defined(%NS%ROGUE_RETAIN)
           |  // Prevent 'obj' from being GC'd if there are no other references to it.
           |  #define %NS%ROGUE_RETAIN( obj )   %Ns%Rogue_retain( obj )
           |#endif
           |

        local source_type =  Program.source_type
        which (source_type)
          case "c", "m"
            println @|BEGIN_ROGUE_EXTERN_C
        endWhich

        println ...
          @|
           |typedef struct %Ns%RogueRuntimeType %Ns%RogueRuntimeType;
           |typedef void (*%Ns%RogueFn_Object)(void*);
           |typedef void (*%Ns%RogueFn_Object_Object)(void*,void*);
           |
           |typedef struct %Ns%RogueObject %Ns%RogueObject;
           |typedef struct %Ns%RogueString %Ns%RogueString;
           |
           |struct %Ns%RogueRuntimeType
           |{
           |  const char*        name;
           |  %Ns%RogueString*   name_object;
           |  %Ns%RogueInt       index;
           |  %Ns%RogueInt       module_name_index;
           |  %Ns%RogueInt       class_data_index;
           |  %Ns%RogueInt64     attributes;
           |  void**             vtable;
           |  void**             local_pointer_stack; // Objects + compounds with embedded refs
           |  %Ns%RogueInt       local_pointer_capacity;
           |  %Ns%RogueInt       local_pointer_count;
           |  %Ns%RogueInt       size;
           |  %Ns%RogueInt*      base_type_indices;
           |  %Ns%RogueInt       base_type_count;
           |  %Ns%RogueObject*   type_info;
           |  void*              singleton;
           |  %Ns%RogueFn_Object fn_init_object;
           |  %Ns%RogueFn_Object fn_init;
           |  %Ns%RogueFn_Object fn_gc_trace;
           |  %Ns%RogueFn_Object fn_on_cleanup;
           |  %Ns%RogueFn_Object_Object fn_on_singleton_change;
           |};
           |
           |typedef struct %Ns%RogueCallFrame
           |{
           |  const char* procedure;
           |  const char* filename;
           |  %Ns%RogueInt line;
           |} %Ns%RogueCallFrame;
           |
           |typedef struct %Ns%RogueObjectList
           |{
           |  %Ns%RogueObject** data;
           |  %Ns%RogueInt    count;
           |  %Ns%RogueInt    capacity;
           |} %Ns%RogueObjectList;
           |
           |//------------------------------------------------------------------------------
           |// Runtime
           |//------------------------------------------------------------------------------
           |void  %Ns%Rogue_configure( int argc, char** argv );  // Call this first
           |int   %Ns%Rogue_launch(void);                        // Call this second
           |void  %Ns%Rogue_check_gc(void);        // Call this every frame or whenever (unless --gc=auto) to maybe GC
           |void  %Ns%Rogue_collect_garbage(void); // Call this to force a GC
           |void  %Ns%Rogue_exit( int exit_code ); // Internal use - call exit() directly instead
           |void  %Ns%Rogue_request_gc(void);      // Ensures next call to Rogue_check_gc() will result in a GC
           |int   %Ns%Rogue_quit(void);            // Call to shut down; prints any pending exception & calls Rogue on_exit functions
           |void  %Ns%Rogue_clean_up(void);        // Calls clean_up() on every living object w/on_cleanup() then deletes all objects
           |
           |void* %Ns%Rogue_release( void* obj );  // Increase the refcount of the given Rogue object, preventing it from being GC'd
           |void* %Ns%Rogue_retain( void* obj );   // Decrease the refcount of the given object
           |
           |void* %Ns%Rogue_create_object( void* type, int initialize );
           |void  %Ns%Rogue_init_object( %Ns%RogueRuntimeType* type, %Ns%RogueObject* obj );
           |void  %Ns%Rogue_destroy_object( void* obj );
           |void* %Ns%Rogue_new_object( void* type );
           |void* %Ns%Rogue_singleton( void* type, void* singleton_ref );
           |void  %Ns%Rogue_set_singleton( void* type, void* singleton_ref, void* new_singleton );
           |
           |void  %Ns%Rogue_print_exception(void);
           |
           |void  %Ns%Rogue_call_stack_push( const char* procedure, const char* filename, %Ns%RogueInt line );
           |void  %Ns%Rogue_call_stack_pop(void);
           |void  %Ns%RogueRuntimeType_local_pointer_stack_add( %Ns%RogueRuntimeType* type, void* local_pointer );
           |void  %Ns%RogueObjectList_add( %Ns%RogueObjectList* list, void* obj );
           |
           |struct %Ns%RogueObject;
           |
           |extern struct %Ns%RogueObject* %Ns%Rogue_exception;  // if non-null then an exception is being thrown
           |extern %Ns%RogueCallFrame*     %Ns%Rogue_call_stack;
           |extern %Ns%RogueInt                 %Ns%Rogue_call_stack_count;
           |extern %Ns%RogueInt                 %Ns%Rogue_call_stack_capacity;
           |extern %Ns%RogueInt                 %Ns%Rogue_call_stack_line;
           |
           |extern %Ns%RogueInt %Ns%RogueMM_bytes_allocated_since_gc;
           |extern %Ns%RogueInt %Ns%RogueMM_gc_request;  // 0:none, !0:requested
           |extern %Ns%RogueObjectList %Ns%RogueMM_objects;
           |extern %Ns%RogueObjectList %Ns%RogueMM_objects_requiring_cleanup;
           |
           |struct %Ns%RogueWeakReference;
           |extern struct %Ns%RogueWeakReference* %Ns%RogueMM_weak_references;
           |
           |void*  %Ns%Rogue_as( void* obj, %Ns%RogueInt recast_type_id );
           |%Ns%RogueLogical %Ns%Rogue_instance_of( void* obj, %Ns%RogueInt ancestor_id );
        println

      else
        # Writing .c/.m file
        println  "// $"(file.filename)
        println
        println ''#include "$.h"''(File(Program.output_filepath).filename)
        println  "#include <stdio.h>"
        println
        if (file_index == 1)
          println ...
            @|//------------------------------------------------------------------------------
             |// Runtime
             |//------------------------------------------------------------------------------
             |void  %Ns%Rogue_configure( int argc, char** argv )
             |{
             |  %Ns%Rogue_argc = argc;
             |  %Ns%Rogue_argv = argv;
             |}
             |
             |void* %Ns%Rogue_create_object( void* _type, int initialize )
             |{
             |  #if defined(%NS%ROGUE_GC_AUTO)
             |    if (%Ns%RogueMM_bytes_allocated_since_gc >= %NS%ROGUE_MM_GC_THRESHOLD) %Ns%Rogue_collect_garbage();
             |  #endif
             |  %Ns%RogueRuntimeType*  type = (%Ns%RogueRuntimeType*) _type;
             |  %Ns%RogueObject* obj = (%Ns%RogueObject*) %NS%ROGUE_MALLOC( type->size );
             |  memset( obj, 0, type->size );
             |  obj->__type = type;
             |
             |  if (type->fn_on_cleanup) %Ns%RogueObjectList_add( &%Ns%RogueMM_objects_requiring_cleanup, obj );
             |  else                     %Ns%RogueObjectList_add( &%Ns%RogueMM_objects, obj );
             |  %Ns%RogueMM_bytes_allocated_since_gc += type->size;
             |
             |  if (initialize) %Ns%Rogue_init_object( type, obj );
             |
             |  return obj;
             |}
             |
             |void %Ns%Rogue_init_object( %Ns%RogueRuntimeType* type, %Ns%RogueObject* obj )
             |{
             |  if (type->fn_init_object)
             |  {
             |    #ifdef %NS%ROGUE_GC_AUTO
             |      obj->__refcount = 1; // keeps this object alive if init() triggers a GC
             |      type->fn_init_object( obj );
             |      --obj->__refcount;   // other code maybe retained this obj so don't just set back to 0.
             |    #else
             |      type->fn_init_object( obj );
             |    #endif
             |  }
             |}
             |
             |void %Ns%Rogue_destroy_object( void* obj )
             |{
             |  //printf( "Destroy object %s\n", ((%Ns%RogueObject*)obj)->__type->name );
             |  %NS%ROGUE_FREE( obj );
             |}
             |
             |void* %Ns%Rogue_new_object( void* _type )
             |{
             |  // Create a Rogue object that is not tracked by the GC.
             |  %Ns%RogueRuntimeType*  type = (%Ns%RogueRuntimeType*) _type;
             |  %Ns%RogueObject* obj = (%Ns%RogueObject*) %NS%ROGUE_MALLOC( type->size );
             |  memset( obj, 0, type->size );
             |  obj->__type = type;
             |
             |  if (type->fn_init_object)
             |  {
             |    type->fn_init_object( obj );
             |  }
             |
             |  return obj;
             |}
             |
             |void* %Ns%Rogue_singleton( void* _type, void* singleton_ref )
             |{
             |  if (*((%Ns%RogueObject**)singleton_ref)) return *((%Ns%RogueObject**)singleton_ref);
             |  %Ns%RogueRuntimeType* type = (%Ns%RogueRuntimeType*) _type;
             |  %Ns%RogueObject* obj = (%Ns%RogueObject*)%Ns%Rogue_create_object( type, 0 );
             |  (*((%Ns%RogueObject**)singleton_ref)) = obj;
             |
             |  %Ns%Rogue_init_object( type, obj );
             |  if (type->fn_init) type->fn_init(obj);  // call init() if it exists
             |  if (type->fn_on_singleton_change) type->fn_on_singleton_change( 0, obj );
             |  return obj;
             |}
             |
             |void %Ns%Rogue_set_singleton( void* _type, void* singleton_ref, void* new_singleton )
             |{
             |  %Ns%RogueObject** ref = (%Ns%RogueObject**)singleton_ref;
             |  %Ns%RogueRuntimeType* type = (%Ns%RogueRuntimeType*) _type;
             |  if (type->fn_on_singleton_change) type->fn_on_singleton_change( *ref, new_singleton );
             |  *ref = (%Ns%RogueObject*)new_singleton;
             |}
             |
             |void* %Ns%Rogue_release( void* obj )
             |{
             |  if (obj) --(((%Ns%RogueObject*)obj)->__refcount);
             |  return 0;
             |}
             |
             |void* %Ns%Rogue_retain( void* obj )
             |{
             |  if (obj) ++(((%Ns%RogueObject*)obj)->__refcount);
             |  return obj;
             |}
             |
             |void %Ns%Rogue_check_gc(void)
             |{
             |  if (%Ns%RogueMM_gc_request || %Ns%RogueMM_bytes_allocated_since_gc >= %NS%ROGUE_MM_GC_THRESHOLD)
             |  {
             |    %Ns%Rogue_collect_garbage();
             |  }
             |}
             |
             |void %Ns%Rogue_request_gc(void)
             |{
                if (Program.gc_auto) println @|  %Ns%Rogue_collect_garbage();
                else                 println @|  %Ns%RogueMM_gc_request = 1;
          println ...
            @|}
             |
             |int %Ns%Rogue_quit(void)
             |{
             |  int status = !!%Ns%Rogue_exception;
             |  %Ns%Rogue_print_exception();  // Only has an effect if there is a pending exception
             |
             |  %Ns%RogueGlobal__call_exit_functions();
             |
             |  return status;
             |}
             |
             |void %Ns%Rogue_exit( int exit_code )
             |{
             |  // Just calls exit(), but if we call exit() directly from Rogue code then the C compiler
             |  // may give an unreachable code warning for the call stack cleanup that follows.
             |  exit( exit_code );
             |}
             |
             |void %Ns%Rogue_print_exception(void)
             |{
             |  %Ns%RogueException__display__%Ns%RogueException( (%Ns%RogueException*)%Ns%Rogue_exception );
             |}
             |
             |void %Ns%Rogue_call_stack_push( const char* procedure, const char* filename, %Ns%RogueInt line )
             |{
             |  if (%Ns%Rogue_call_stack_count) %Ns%Rogue_call_stack[ %Ns%Rogue_call_stack_count-1 ].line = %Ns%Rogue_call_stack_line;
             |  %Ns%Rogue_call_stack_line = line;
             |
             |  if (%Ns%Rogue_call_stack_count == %Ns%Rogue_call_stack_capacity)
             |  {
             |    %Ns%RogueInt required_capacity = %Ns%Rogue_call_stack_capacity << 1;
             |    if (required_capacity < 32) required_capacity = 32;
             |
             |    %Ns%RogueCallFrame* new_data = (%Ns%RogueCallFrame*) %NS%ROGUE_MALLOC( sizeof(%Ns%RogueCallFrame) * required_capacity );
             |    if (%Ns%Rogue_call_stack)
             |    {
             |      memcpy( new_data, %Ns%Rogue_call_stack, sizeof(%Ns%RogueCallFrame)*%Ns%Rogue_call_stack_count );
             |      %NS%ROGUE_FREE( %Ns%Rogue_call_stack );
             |    }
             |    %Ns%Rogue_call_stack = new_data;
             |    %Ns%Rogue_call_stack_capacity = required_capacity;
             |  }
             |
             |  %Ns%Rogue_call_stack[ %Ns%Rogue_call_stack_count++ ] = ROGUE_COMPOUND(%Ns%RogueCallFrame){ procedure, filename, line };
             |}
             |
             |void %Ns%Rogue_call_stack_pop(void)
             |{
             |  if (--%Ns%Rogue_call_stack_count)
             |  {
             |    %Ns%Rogue_call_stack_line = %Ns%Rogue_call_stack[ %Ns%Rogue_call_stack_count-1 ].line;
             |  }
             |}
             |
             |void %Ns%RogueRuntimeType_local_pointer_stack_add( %Ns%RogueRuntimeType* type, void* local_pointer )
             |{
             |  if (type->local_pointer_count == type->local_pointer_capacity)
             |  {
             |    %Ns%RogueInt required_capacity = type->local_pointer_capacity << 1;
             |    if (required_capacity < 32) required_capacity = 32;
             |
             |    void** new_data = (void**) %NS%ROGUE_MALLOC( sizeof(void*) * required_capacity );
             |    if (type->local_pointer_stack)
             |    {
             |      memcpy( new_data, type->local_pointer_stack, sizeof(void*)*type->local_pointer_count );
             |      %NS%ROGUE_FREE( type->local_pointer_stack );
             |    }
             |    type->local_pointer_stack = new_data;
             |    type->local_pointer_capacity = required_capacity;
             |  }
             |  type->local_pointer_stack[ type->local_pointer_count++ ] = local_pointer;
             |}
             |
             |void %Ns%RogueObjectList_add( %Ns%RogueObjectList* list, void* obj )
             |{
             |  if (list->count == list->capacity)
             |  {
             |    %Ns%RogueInt required_capacity = list->capacity << 1;
             |    if (required_capacity < 1024) required_capacity = 1024;
             |
             |    %Ns%RogueObject** new_data = (%Ns%RogueObject**) %NS%ROGUE_MALLOC( sizeof(%Ns%RogueObject*) * required_capacity );
             |    if (list->data)
             |    {
             |      memcpy( new_data, list->data, sizeof(%Ns%RogueObject*)*list->count );
             |      %NS%ROGUE_FREE( list->data );
             |    }
             |    list->data = new_data;
             |    list->capacity = required_capacity;
             |  }
             |
             |  list->data[ list->count++ ] = (%Ns%RogueObject*)obj;
             |}
             |
             |%Ns%RogueObject*     %Ns%Rogue_exception  = 0;
             |%Ns%RogueCallFrame*  %Ns%Rogue_call_stack = 0;
             |%Ns%RogueInt            %Ns%Rogue_call_stack_count    = 0;
             |%Ns%RogueInt            %Ns%Rogue_call_stack_capacity = 0;
             |%Ns%RogueInt            %Ns%Rogue_call_stack_line     = 0;
             |
             |%Ns%RogueInt            %Ns%RogueMM_bytes_allocated_since_gc  = 0;
             |%Ns%RogueInt            %Ns%RogueMM_gc_request                = 0;
             |%Ns%RogueObjectList     %Ns%RogueMM_objects                   = {0};
             |%Ns%RogueObjectList     %Ns%RogueMM_objects_requiring_cleanup = {0};
             |%Ns%RogueWeakReference* %Ns%RogueMM_weak_references = 0;
             |
             |void* %Ns%Rogue_as( void* obj, %Ns%RogueInt recast_type_id )
             |{
             |  if ( !obj ) return 0;
             |  %Ns%RogueRuntimeType* type = ((%Ns%RogueObject*)obj)->__type;
             |  if (type->index == recast_type_id) return obj;
             |
             |  %Ns%RogueInt* base_indices = type->base_type_indices - 1;
             |  %Ns%RogueInt  count = type->base_type_count;
             |  while (--count >= 0)
             |  {
             |    if (*(++base_indices) == recast_type_id) return obj;
             |  }
             |  return 0;
             |}
             |
             |%Ns%RogueLogical %Ns%Rogue_instance_of( void* obj, %Ns%RogueInt ancestor_id )
             |{
             |  if ( !obj ) return 0;
             |  %Ns%RogueRuntimeType* type = ((%Ns%RogueObject*)obj)->__type;
             |  if (type->index == ancestor_id) return 1;
             |
             |  %Ns%RogueInt* base_indices = type->base_type_indices - 1;
             |  %Ns%RogueInt  count = type->base_type_count;
             |  while (--count >= 0)
             |  {
             |    if (*(++base_indices) == ancestor_id) return 1;
             |  }
             |  return 0;
             |}
             |
             |%Ns%RogueLogical %Ns%Rogue_is_type( void* obj, %Ns%RogueRuntimeType* type )
             |{
             |  if ( !obj ) return 0;
             |  return ((%Ns%RogueObject*)obj)->__type == type;
             |}
             |
          println
        endIf

      endIf

    method close
      if (is_header)
        println "#endif // $"(underscore_filename)
      endIf
      prior.close

    method print( value:Character ) [override]
      prior.print( value )
      if (value == '\n')
        ++line_count
      endIf

    method println [override]
      prior.println
      ++line_count

    method print( obj:Object ) [override]
      if (obj) print( obj->String )
      else     print( "null" )

    method print( text:String ) [override]
      text .= replacing( "%ns%", Program.namespace_lc )
      text .= replacing( "%Ns%", Program.namespace_capitalized )
      text .= replacing( "%NS%", Program.namespace_uc )
      line_count += text.count('\n')
      prior.print( text )

    method println( obj:Object ) [override]
      print( obj )
      println

    method println( text:String ) [override]
      print( text )
      println

    method print_gc_checks( path:String[], type:Type )
      forEach (p2 in type.properties)
        if (p2.type.is_reference)
          print( forEach in path )
          print   '.'
          print   p2.c_name
          println ")) && ref->__refcount >= 0) ref->__type->fn_gc_trace(ref);"
        elseIf (p2.type.contains_reference)
          path.add( '.' )
          path.add( p2.c_name )
          print_gc_checks( path, p2.type )
          path.remove_last
          path.remove_last
        endIf
      endForEach

    method print_hex_pair( value:Int32 )
      print "\\x"
      print ((value :>>>: 4).to_digit)
      print ((value & 15).to_digit)

    method println_indent( ch:Character, add_indent:Int32 )
      if (add_indent >= 0)
        println ch
        indent += add_indent
      else
        indent += add_indent
        println ch
      endIf

    method print_literal_c_character( ch:Character, in_string:Logical )
      if (ch >= 32 and ch <= 126)
        which (ch)
          case '"'
            if (in_string) print( "\\\"" )
            else           print( "\"" )
          case '\''
            if (in_string) print( "'" )
            else           print( "\\'" )
          case '\\'
            print( "\\\\" )
          others
            print( ch )
        endWhich
      else
        which (ch)
          case 10
            print "\\n"
          others
            # Must print as separate string to avoid C \x ambiguity.  For instance,
            # "This is \x9CCool" is interpreeted as "This is \x9CC" followed by "ool",
            # so we have to generate "This is ""\x9C""Cool".
            print( "\"\"" )  # end of string so far and beginning of hex escape string
            if (ch <= 0x7F)
              print_hex_pair( ch )
            elseIf (ch <= 0x7FF)
              print_hex_pair(0xC0 | ((ch :>>>: 6) & 0x1F))
              print_hex_pair(0x80 | (ch & 0x3F))
            elseIf (ch <= 0xFFFF)
              print_hex_pair( 0xE0 | ((ch :>>>: 12) & 0xF) )
              print_hex_pair( 0x80 | ((ch :>>>: 6) & 0x3F) )
              print_hex_pair( 0x80 | (ch & 0x3F) )
            else
              print_hex_pair( 0xF0 | ((ch :>>>: 18) & 0x7) )
              print_hex_pair( 0x80 | ((ch :>>>: 12) & 0x3F) )
              print_hex_pair( 0x80 | ((ch :>>>: 6) & 0x3F) )
              print_hex_pair( 0x80 | (ch & 0x3F) )
            endIf
            print( "\"\"" )  # end of hex escape string and continuation of original string
        endWhich
      endIf

    method print_literal_c_string( st:String, &omit_quotes )
      if (st is null)
        print( "0" )
        return
      endIf

      temporarily indent = 0
        if (not omit_quotes) print '"'

        local stage = 0
        # 0: \    -> 1 ignore next
        #    ?    -> 2 first question mark
        # 1:      -> 0
        # 2: ?    -> print \ -> 0
        #    else -> 0

        local next_split = output.position + buffer.count + 16000
        forEach (ch at i in st)
          which (stage)
            case 0
              if (output.position + buffer.count >= next_split)
                if (not omit_quotes) println( "\"" ); print( "\"" )
                next_split = output.position + buffer.count + 16000
              endIf

              if (ch == '\\')    stage = 1
              elseIf (ch == '?') stage = 2
            case 1
              stage = 0
            case 2
              if (ch == '?') print( '\\' )  # Escape the second question mark in a row to avoid accidental trigraphs
              stage = 0
          endWhich
          print_literal_c_character( ch, true )
        endForEach

        if (not omit_quotes) print '"'
      endTemporarily

    method write_default_value( type:Type, &omit_cast )
      if (type.is_compound)
        if (not omit_cast)
          if (Program.targets_cpp and Program.targets_windows)
            print type.c_name
          else
            print '('
            print type.c_name
            print ')'
          endIf
        endIf
        print '{'
        if (type.properties.count and type.properties.first.type.is_compound)
          write_default_value( type.properties.first.type, &omit_cast )
        elseIf (not Program.targets_cpp)
          print '0'
        endIf
        print '}'
      else
        print "0"
      endIf

    method underscore_filename->String
      local result = String()
      result.print Program.namespace_uc
      forEach (ch in file.filename)
        ch .= to_uppercase
        if (ch.is_letter) result.print ch
        else              result.print '_'
      endForEach
      return result

endClass

