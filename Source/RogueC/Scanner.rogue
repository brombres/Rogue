library RogueC

# Generated by Froley. Will not be overwritten; customize as desired.
$include "ScannerCore.rogue"

class Scanner : ScannerCore, Poolable
  GLOBAL PROPERTIES
    uses_autoinclude   : Logical
    uses_DateTime      : Logical
    uses_File          : Logical
    uses_Introspection : Logical
    uses_Process       : Logical
    uses_Promise       : Logical
    uses_Scanner       : Logical
    uses_Set           : Logical
    uses_Table         : Logical
    uses_Variant       : Logical

  PROPERTIES
    beginning_of_line : ScannerLocation

  METHODS
    method init

    method init( file:File )
      prior.init( file )
      beginning_of_line = _scanner.location

    method init( filepath:String, content:String, line=1, column=1 )
      prior.init( filepath, content, line, column )

    method init( _filepath, _scanner )
      prior.init( _filepath, _scanner )
      beginning_of_line = _scanner.location
      tokens.reserve( _scanner.count / 3 )

    method on_return_to_pool
      @_filepath = null
      @_scanner  = null

      @line   = 1
      @column = 1

      @tokens = Token[]
      @buffer.clear
      @output.clear

      @start_ip = 0
      @halt     = false

      @_position_stack.clear
      @_line_stack.clear
      @_column_stack.clear
      @_token_pos_stack.clear

      # GENERATED PROPERTIES
      @count        = 0
      @ch           = 0
      @saved_buffer = null
      @base         = 0
      @hex2         = 0
      @hex4         = 0
      @hex_digit    = 0
      @value        = 0
      @digits       = 0

    method mark_beginning_of_line->Int
      beginning_of_line = _scanner.location
      return 0

    method process_comment->Int
      local comment = buffer.cloned
      if (comment.contains("FIXME"))
        local cur_loc = _scanner.location
        _scanner.location = beginning_of_line

        buffer.clear
        while (_scanner.position < cur_loc.position)
          buffer.print( _scanner.read )
        endWhile
        comment = buffer.cloned

        local matches = comment.split('\n').[ discard( not $.contains("FIXME") ) ]
        forEach (match in matches)
          println "[FIXME][$:$] $"(File(_filepath).filename,beginning_of_line.line,match)
        endForEach
      endIf
      return 0

    method use_DateTime->Int
      uses_DateTime = true
      uses_autoinclude = true
      return 0

    method use_File->Int
      uses_File = true
      uses_autoinclude = true
      return 0

    method use_Introspection->Int
      uses_Introspection = true
      uses_autoinclude = true
      return 0

    method use_Process->Int
      uses_Process = true
      uses_autoinclude = true
      return 0

    method use_Promise->Int
      uses_Promise = true
      uses_autoinclude = true
      return 0

    method use_Set->Int
      uses_Set = true
      uses_autoinclude = true
      return 0

    method use_Scanner->Int
      uses_Scanner = true
      uses_autoinclude = true
      return 0

    method use_Table->Int
      uses_Table = true
      uses_autoinclude = true
      return 0

    method use_Value->Int
      use_Variant
      if (not _filepath.contains("StandardMacros.rogue"))
        Program.print_warning(
          Token(TokenType.IDENTIFIER,_filepath,0,0),
          "Type name 'Value' is deprecated and will be removed in the future. Use 'Variant' instead."
        )
      endIf
      return 0

    method use_Variant->Int
      uses_Variant = true
      uses_autoinclude = true
      return 0

endClass
