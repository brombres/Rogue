module RogueC

augment Cmd
  GLOBAL METHODS
    method common_type( t:Token, a:Type, b:Type )->Type
      if (a is b) return a
      if (not a or not b) return null
      if (a.is_primitive and b.is_primitive)
        local type = Program.type_String
        if (a is type or b is type) return type
        type = Program.type_Real64
        if (a is type or b is type) return type
        type = Program.type_Real
        if (a is type or b is type) return type
        type = Program.type_Real32
        if (a is type or b is type) return type
        type = Program.type_Int64
        if (a is type or b is type) return type
        type = Program.type_Int
        if (a is type or b is type) return type
        type = Program.type_Int32
        if (a is type and b is type) return type
        return Program.type_Int   # any mismatched pair Logical/Byte/Character/Int32/Int -> Int
      elseIf (a is Program.type_String or b is Program.type_String)
        return Program.type_String
      elseIf (a.is_reference)
        if (not b.is_reference) return a
        if (a.instance_of(b)) return b
        if (b.instance_of(a)) return a
      elseIf (b.is_reference)
        return b
      elseIf (a.is_compound)
        if (not b.is_compound) return a
      elseIf (b.is_compound)
        if (not a.is_compound) return b
      endIf
      throw t.error( "Incompatible types $ and $."(a,b) )

    method common_op_type( t:Token, a:Type, b:Type )->Type
      local type = common_type( t, a, b )
      #if (not type.is_primitive) return type
      return type

      #if (type is Program.type_Real64 or type is Program.type_Real32)
      #  return Program.type_Real
      #elseIf (type is Program.type_Int64)
      #  return Program.type_Int64
      #else
      #  return Program.type_Int32
      #endIf

  METHODS
    method require_type->Type
      local result = type
      if (result) return result
      throw t.error( "Value expected." )

    method require_value->Cmd
      require_type
      return this

endAugment

# resolve_conversion_to
augment
  METHODS
    method Cmd.resolve_conversion_to( target_type:Type, resolver:Resolver, &suppress_error, &limit_conversions, &coerce )->Cmd
      local this_type = require_type
      this_type.organize
      target_type.organize

      if (this_type is target_type) return this

      if (this_type.is_primitive and target_type.is_primitive)
        if (target_type is Program.type_Byte)      return resolver.validate( ConvertToByte( t, this ) )
        if (target_type is Program.type_Character) return resolver.validate( ConvertToCharacter( t, this ) )
        if (target_type is Program.type_Int32)
          if (not coerce and (this_type is Program.type_Int or this_type is Program.type_Int64))
            Program.print_warning( t, "Assigning an Int or Int64 to an Int32 variable should use an explicit conversion." )
          endIf
          return resolver.validate( ConvertToInt32( t, this ) )
        endIf
        if (target_type is Program.type_Int)       return resolver.validate( ConvertToInt( t, this ) )
        if (target_type is Program.type_Int64)     return resolver.validate( ConvertToInt64( t, this ) )
        if (target_type is Program.type_Logical)   return resolver.validate( ConvertToLogical( t, this ) )
        if (target_type is Program.type_Real32)    return resolver.validate( ConvertToReal32( t, this ) )
        if (target_type is Program.type_Real)      return resolver.validate( ConvertToReal( t, this ) )
        if (target_type is Program.type_Real64)    return resolver.validate( ConvertToReal64( t, this ) )
        throw t.error( "[INTERNAL] Unhandled primitive conversion." )
      endIf

      if (this_type.instance_of(target_type)) return WideningCast( t, this, target_type )

      if (this_type.is_primitive and target_type.is_optional)
        if (target_type.core_type.is_primitive and target_type.core_type is not this_type)
          local converted_primitive = resolve_conversion_to( target_type.core_type, resolver, &=suppress_error, &=limit_conversions, &=coerce )
          if (converted_primitive)
            return converted_primitive.resolve_conversion_to( target_type, resolver, &=suppress_error, &=limit_conversions, &=coerce )
          endIf
        endIf
      endIf

      if (this_type.attributes.is_tuple and target_type.attributes.is_tuple)
        if (this_type.is_compatible_tuple(target_type))
          local template_args = TemplateArgs( t )
          template_args.add( TokenList(t,this_type.name_tokens) )
          template_args.add( TokenList(t,target_type.name_tokens) )
          local type_Routine = Program.default_module.must_find_type( t, "Routine" )
          return resolver.visit(
            TemplatedAccess( t, type_Routine, "recast_tuple", template_args, Args(t,this) )
          )
        elseIf (this instanceOf CreateCompound and this_type.properties.count == target_type.properties.count)
          local cmd = this->(as CreateCompound)
          return resolver.visit( TypeAccess(cmd.t, target_type, cmd.args) )

        elseIf (suppress_error)
          return null
        else
          throw t.error( "Cannot convert $ -> $; these tuple types are incompatible."(this_type,target_type) )
        endIf
      endIf

      return resolve_via_conversion_methods( this, this_type, target_type, resolver, &=suppress_error, &=limit_conversions )

    method Cmd.resolve_via_conversion_methods( cmd:Cmd, this_type:Type, target_type:Type, resolver:Resolver, &suppress_error, &limit_conversions )->Cmd
      if (TypeConversionStack.count > 20)
        if (suppress_error) return null

        local message = String()
        message.print "Detected infinite recursive cycle for $->$ conversion.\n"(TypeConversionStack[0]._1,target_type)
        if (TypeConversionStack.count > 1)
          message.print " ("
          forEach (conv at i in TypeConversionStack)
            message.print conv._1
            message.print " -> "
          endForEach
          message.print "...)"
        endIf
        TypeConversionStack.clear

        throw cmd.t.error( message )
      endIf

      use TypeConversionStack
        TypeConversionStack.push( (this_type,target_type) )

        this_type.organize
        target_type.organize

        if (this_type is Program.@type_Variant)
          if (target_type is Program.@type_Variant) return cmd
          if (target_type.attributes.is_optional)
            if (target_type.core_type is not Program.@type_Variant)
              return resolver.visit( TemplatedMethodContextAccess(t,cmd,"to_optional",target_type.core_type,null) )
            endIf
          else
            return resolver.visit( TemplatedMethodContextAccess(t,cmd,"to",target_type,null) )
          endIf
        endIf

        # See if this_type has a to->TargetType method ( to<<Type>>->Type )
        local type_arg = TemplateArgs( cmd.t, target_type )
        local result = resolver.resolve_call( t, this_type, cmd, type_arg->String("to"), null, &suppress_error )
        if (result) return result

        if (not limit_conversions)
          # Look for a TargetType(cmd) constructor.
          local exact_arg_types = not (this_type.is_reference and (target_type.is_reference or target_type is Program.@type_Variant))
          result = resolver.resolve_type_access( t, target_type, Args(t,cmd), &suppress_error, &=exact_arg_types, &limit_conversions )
          if (result) return result
        endIf

        # 'ref -> Logical' becomes 'ref?'
        if (this_type.is_reference and target_type is Program.type_Logical)
          return cmd.logicalized( resolver )
        endIf

        if (this_type.instance_of(target_type))
          return resolver.validate( WideningCast(t,cmd,target_type) )
        endIf
      endUse

      if (suppress_error) return null

      throw t.error( "No $.to->$ conversion or $($) constructor exists."(this_type,target_type,target_type,this_type) )

    method GenericFunctionDefinition.resolve_conversion_to( target_type:Type, resolver:Resolver, &suppress_error, &limit_conversions, &coerce )->Cmd [override]
      local fn_type = target_type->(as FunctionType)

      if (not fn_type)
        if (suppress_error) return null
        throw t.error( "Generic function is incompatible with type $."(target_type) )
      endIf

      fn_type.organize

      local params = Parameters(t)
      forEach (param_name at i in parameters)
        params.add( Local(t,param_name,fn_type.param_types[i]) )
      endForEach

      if (fn_type.return_type)
        if (statements.count)
          local statement = statements.remove_last
          if (statement.type)
            # Turn the last value into a return
            statements.add( Return(statement.t,statement) )
          else
            # After the last statement is resolved it may have a type. Have to wait and see.
            statements.add( FunctionReturnValue(statement.t,statement) )
          endIf
        else
          statements.add( fn_type.return_type.cmd_default_value(t) )
        endIf
      endIf

      local fn_def = resolver.visit(
        FunctionDefinition(t,params,fn_type.return_type,with_values,statements,resolver.this_module)
      )
      return fn_def.resolve_conversion_to( target_type, resolver, &=suppress_error, &=coerce )

    method LiteralNull.resolve_conversion_to( target_type:Type, resolver:Resolver, &suppress_error, &limit_conversions, &coerce )->Cmd [override]
      target_type.organize
      if (target_type.attributes.is_optional)
        return resolver.validate( LiteralNullOptional(t,target_type) )
      elseIf (target_type is Program.@type_Variant)
        return NativeExpression( t, "(RogueVariant) { ROGUE_VARIANT_TYPE_NULL }", Program.type_Variant )
      elseIf (target_type.is_reference)
        of_type = target_type
        return this
      else
        return resolve_via_conversion_methods( this, Program.type_null, target_type, resolver, &=suppress_error )
      endIf
endAugment

# can_trigger_gc
# Valid only for resolved node types
augment
  METHODS
    method Cmd.can_trigger_gc->Logical
      return Program.gc_auto  # default is true for auto gc; false for manual gc

    method Binary.can_trigger_gc->Logical
      return false

    method CreateCompound.can_trigger_gc->Logical
      return of_type.contains_reference

    method GetLocal.can_trigger_gc->Logical
      return false

    method GetGlobalProperty.can_trigger_gc->Logical
      return false

    method GetThisProperty.can_trigger_gc->Logical
      return false

    method Literal.can_trigger_gc->Logical
      return false

    method Unary.can_trigger_gc->Logical
      return false

endAugment


# cmd_default_value()
augment
  METHODS
    method Type.cmd_default_value( cmd_t:Token )->Cmd
      if (is_compound) return EmptyCompound( cmd_t, this )
      return LiteralNull( cmd_t.cloned(TokenType.KEYWORD_NULL,null), this )

    method TypeByte.cmd_default_value( cmd_t:Token )->Cmd
      return ConvertToByte( cmd_t, LiteralInt(cmd_t.cloned(TokenType.INTEGER,"0"), 0) )

    method TypeCharacter.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralCharacter( cmd_t.cloned(TokenType.CHARACTER,"0"), 0 )

    method TypeInt32.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralInt( cmd_t.cloned(TokenType.INTEGER,"0"), 0 )

    method TypeInt.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralInt( cmd_t.cloned(TokenType.INTEGER,"0"), 0 )

    method TypeInt64.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralInt64( cmd_t.cloned(TokenType.INTEGER,"0"), 0 )

    method TypeLogical.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralLogical( cmd_t.cloned(TokenType.KEYWORD_FALSE,null), false )

    method TypeReal32.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralReal32( cmd_t.cloned(TokenType.REAL_NUMBER,"0.0"), 0 )

    method TypeReal.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralReal( cmd_t.cloned(TokenType.REAL_NUMBER,"0.0"), 0 )

    method TypeReal64.cmd_default_value( cmd_t:Token )->Cmd
      return LiteralReal64( cmd_t.cloned(TokenType.REAL_NUMBER,"0.0"), 0 )

endAugment

# discarding_result
augment
  METHODS
    method Cmd.discarding_result->Cmd
      return this  # no change

    method CallProcedure.discarding_result->Cmd
      result_discarded = true
      return this

      #{
    method GetLocal.discarding_result->Cmd
      return null

    method Literal.discarding_result->Cmd
      return null
      }#
endAugment

# is_anchored
augment
  METHODS
    method Cmd.is_anchored->Logical
      return false

    method GetLocal.is_anchored->Logical
      return info.is_anchored

    method InlineAssignment.is_anchored->Logical
      return true

    method LiteralString.is_anchored->Logical
      return true

    method Local.is_anchored->Logical
      return attributes.is_anchored

    method GetSingleton.is_anchored->Logical
      return @type.attributes.is_anchored

    method This.is_anchored->Logical
      return true

    method WideningCast.is_anchored->Logical
      return operand.is_anchored
endAugment

# is_literal
augment
  METHODS
    method Cmd.is_literal->Logical
      return false

    method Literal.is_literal->Logical
      return true

endAugment

# is_literal_primitive
augment
  METHODS
    method Cmd.is_literal_primitive->Logical
      return false

    method LiteralPrimitive.is_literal_primitive->Logical
      return true

    method NativeLiteralInt32.is_literal_primitive->Logical
      return true

    method Convert.is_literal_primitive->Logical
      return operand.is_literal_primitive

endAugment

# is_simple
augment
  METHODS
    method Cmd.is_simple->Logical
      return false

    method ConditionalContext.is_simple->Logical
      return context.is_simple

    method ContextDirectAccess.is_simple->Logical
      return context.is_simple

    method DirectAccess.is_simple->Logical
      return true

    method GetLocal.is_simple->Logical
      return true

    method GetGlobalProperty.is_simple->Logical
      return true

    method GetSingleton.is_simple->Logical
      return true

    method GetThisProperty.is_simple->Logical
      return true

    method Literal.is_simple->Logical
      return true

endAugment

# is_getter
augment
  METHODS
    method Cmd.is_getter->Logical
      return false

    method GetLocal.is_getter->Logical
      return true

    method GetGlobalProperty.is_getter->Logical
      return true

    method GetProperty.is_getter->Logical
      return true

    method GetSingleton.is_getter->Logical
      return true

    method GetThisProperty.is_getter->Logical
      return true

endAugment

# is_truthy
augment
  METHODS
    method Cmd.is_truthy->Logical
      return true

    method LiteralCharacter.is_truthy->Logical
      return value?

    method LiteralInt32.is_truthy->Logical
      return value?

    method LiteralInt.is_truthy->Logical
      return value?

    method LiteralInt64.is_truthy->Logical
      return value?

    method LiteralLogical.is_truthy->Logical
      return value

    method LiteralNull.is_truthy->Logical
      return false

    method LiteralReal32.is_truthy->Logical
      return value? and not value.is_NaN

    method LiteralReal.is_truthy->Logical
      return value? and not value.is_NaN

    method LiteralReal64.is_truthy->Logical
      return value? and not value.is_NaN

endAugment

# is_operator
augment
  METHODS
    method Cmd.is_operator->Logical
      return false

    method Binary.is_operator->Logical
      return true

    method Unary.is_operator->Logical
      return true
endAugment

# is_type_context
augment
  METHODS
    method Cmd.is_type_context->Logical
      return false

    method TypeContext.is_type_context->Logical
      return true
endAugment

# logicalized()
augment
  METHODS
    method Cmd.logicalized( resolver:Resolver )->Cmd
      local cmd = resolver.visit( this )
      local type = cmd.require_type

      if (cmd instanceOf TypeContext)
        # Not a logicalization but an optional type
        return TypeContext( t, Type(t, type, &optional) )
      endIf

      if (cmd instanceOf LiteralLogical or type is Program.type_Logical) return cmd

      if (cmd instanceOf LiteralPrimitive)
        if (type is Program.type_Real64)    return LiteralLogical( cmd.t, cmd->(as LiteralReal64).value? )
        if (type is Program.type_Real)      return LiteralLogical( cmd.t, cmd->(as LiteralReal).value? )
        if (type is Program.type_Real32)    return LiteralLogical( cmd.t, cmd->(as LiteralReal32).value? )
        if (type is Program.type_Int64)     return LiteralLogical( cmd.t, cmd->(as LiteralInt64).value? )
        if (type is Program.type_Int)       return LiteralLogical( cmd.t, cmd->(as LiteralInt).value? )
        if (type is Program.type_Int32)     return LiteralLogical( cmd.t, cmd->(as LiteralInt32).value? )
        if (type is Program.type_Character) return LiteralLogical( cmd.t, cmd->(as LiteralCharacter).value? )
      endIf

      type.organize

      if (type.is_primitive) return Logicalized(cmd.t,cmd)
      if (type.attributes.is_optional) return resolver.visit( ContextAccess(cmd.t,cmd,"exists",null) )

      local suppress_error = type.is_reference

      local logicalized = Logicalized( cmd.t, cmd )
      local result = type.resolve_unary_op( logicalized, resolver, &=suppress_error )
      if (result) return result

      if (not type.is_reference)
        result = cmd.resolve_conversion_to( Program.type_Logical, resolver, &=suppress_error )
        if (result) return result
      endIf

      return logicalized

endAugment

# requires_operator_method
augment
  METHODS
    method Cmd.requires_operator_method->Logical
      return false

    method BitShiftRight.requires_operator_method->Logical
      return true

    method Mod.requires_operator_method->Logical
      return true
endAugment

# symbol()
augment
  METHODS
    method Binary.symbol->String:                return null
    method Stepper.symbol->String:               return null
    method Unary.symbol->String:                 return null
    method Add.symbol->String:                   return "+"
    method Subtract.symbol->String:              return "-"
    method Multiply.symbol->String:              return "*"
    method Divide.symbol->String:                return "/"
    method Logicalize.symbol->String:            return "?"
    method Logicalized.symbol->String:           return "?"
    method Mod.symbol->String:                   return "%"
    method Negate.symbol->String:                return "-"
    method Power.symbol->String:                 return "^"
    method Increment.symbol->String:             return "++"
    method Decrement.symbol->String:             return "--"
    method BitwiseAnd.symbol->String:            return "&"
    method BitwiseOr.symbol->String:             return "|"
    method BitwiseXor.symbol->String:            return "~"
    method BitwiseNot.symbol->String:            return "!"
    method BitShiftLeft.symbol->String:          return ":<<:"
    method BitShiftRight.symbol->String:         return ":>>:"
    method BitShiftRightX.symbol->String:        return ":>>>:"
    method OperandAnd.symbol->String:             return "||"
    method OperandOr.symbol->String:             return "||"
    method OpAndAssign.symbol->String:           return null
    method AddAndAssign.symbol->String:          return "+="
    method SubtractAndAssign.symbol->String:     return "-="
    method MultiplyAndAssign.symbol->String:     return "*="
    method DivideAndAssign.symbol->String:       return "/="
    method ModAndAssign.symbol->String:          return "%="
    method PowerAndAssign.symbol->String:        return "^="
    method BitwiseAndAndAssign.symbol->String:   return "&="
    method BitwiseOrAndAssign.symbol->String:    return "|="
    method BitwiseXorAndAssign.symbol->String:   return "~="
    method ShiftLeftAndAssign.symbol->String:    return ":<<:="
    method ShiftRightAndAssign.symbol->String:   return ":>>:="
    method ShiftRightXAndAssign.symbol->String:  return ":>>>:="
endAugment

# type()
augment
  METHODS
    method Cmd.type->Type
      return null

    method Access.type->Type
      local type = Program.current_module.find_type( t, name, &extended_search )
      if (type and (args or type.attributes.is_singleton)) return type
      return null

    method AddAndAssign.type->Type
      return target.type

    method AddAndAssignLocal.type->Type
      return info.type

    method As.type->Type
      return as_type

    method Binary.type->Type
      return common_type( t, left.type, right.type )

    method CallProcedure.type->Type
      if (result_discarded) return null
      return info.return_type

    method ConditionalAccess.type->Type
      return access.type

    method ConditionalContext.type->Type
      return original.type

    method ContextBlock.type->Type
      return context.type

    method ConvertToByte.type->Type
      return Program.type_Byte

    method ConvertToCharacter.type->Type
      return Program.type_Character

    method ConvertToInt32.type->Type
      return Program.type_Int32

    method ConvertToInt.type->Type
      return Program.type_Int

    method ConvertToInt64.type->Type
      return Program.type_Int64

    method ConvertToLogical.type->Type
      return Program.type_Logical

    method ConvertToReal32.type->Type
      return Program.type_Real32

    method ConvertToReal.type->Type
      return Program.type_Real

    method ConvertToReal64.type->Type
      return Program.type_Real64

    method Compare.type->Type
      return Program.type_Logical

    method CompareOp.type->Type
      return Program.type_Int32

    method ContextBlock.type->Type
      return context.type

    method ContextAccess.type->Type
      local context_type = context.type
      if (not context_type) return null
      local def = context_type.definitions[ name ]
      if (not def) return null
      return def.type

    method ConvertToType.type->Type
      return to_type

    method CreateCompound.type->Type
      return of_type

    method CreateObject.type->Type
      return of_type

    method CreateObjectAndSetLocal.type->Type
      return of_type

    method EmptyCompound.type->Type
      return of_type

    method EmptyVariantList.type->Type
      return Program.type_Variant

    method EmptyVariantTable.type->Type
      return Program.type_Variant

    method ExplicitCast.type->Type
      return to_type

    method FunctionDefinition.type->Type
      return resolve_type

    method GenericFunctionDefinition.type->Type
      return Program.type_GenericFn

    method GetGlobalProperty.type->Type
      return info.@type

    method GetLocal.type->Type
      return info.@type

    method GetProperty.type->Type
      return info.@type

    method GetSingleton.type->Type
      return @type

    method GetThisProperty.type->Type
      return info.@type

    method GlobalPropertyDeclarations.type->Type
      return @type

    method InlineAssignment.type->Type
      return info.type

    method Is.type->Type
      return Program.type_Logical

    method IsNot.type->Type
      return Program.type_Logical

    method InstanceOf.type->Type
      return Program.type_Logical

    method InvokeContext.type->Type
      local context_type = context.type
      if (not context_type) return null
      if (context instanceOf TypeContext) return context_type
      return null

    method IsCompound.type->Type
      return Program.type_Logical

    method IsPrimitive.type->Type
      return Program.type_Logical

    method IsReference.type->Type
      return Program.type_Logical

    method IsType.type->Type
      return Program.type_Logical

    method LiteralCharacter.type->Type
      return Program.type_Character

    method LiteralInt32.type->Type
      return Program.type_Int32

    method LiteralInt.type->Type
      return Program.type_Int

    method LiteralInt64.type->Type
      return Program.type_Int64

    method LiteralList.type->Type
      contingent
        necessary count
        local common_type = this[0].type
        necessary common_type
        necessary common_type == (forEach in this).type
        return Type( common_type.t, common_type )  # list of common_type
      unsatisfied
        return null
      endContingent

    method LiteralLogical.type->Type
      return Program.type_Logical

    method LiteralPi.type->Type
      return Program.type_Real

    method LiteralReal32.type->Type
      return Program.type_Real32

    method LiteralReal.type->Type
      return Program.type_Real

    method LiteralReal64.type->Type
      return Program.type_Real64

    method LiteralString.type->Type
      return Program.type_String

    method Local.type->Type
      return @type

    method LocalDeclarations.type->Type
      return @type

    method LogicalAnd.type->Type
      return Program.type_Logical

    method LogicalNot.type->Type
      return Program.type_Logical

    method LogicalOr.type->Type
      return Program.type_Logical

    method LogicalXor.type->Type
      return Program.type_Logical

    method Logicalize.type->Type
      return Program.type_Logical

    method Logicalized.type->Type
      return Program.type_Logical

    method NamedArg.type->Type
      if (not value) return Program.type_Logical
      return value.type

    method NativeExpression.type->Type
      return result_type->(as Type)

    method Negate.type->Type
      return operand.type

    method ListIndexedAccess.type->Type
      local context_type = context.type
      if (context_type and context_type.is_enum) return context_type
      return null

    method LiteralNull.type->Type
      if (of_type) return of_type
      return Program.type_null

    method LiteralNullOptional.type->Type
      return optional_type

    method LiteralUndefined.type->Type
      return Program.type_Variant

    method OperandAnd.type->Type
      local left_type = left.type
      local right_type = right.type
      if (left_type is right_type) return left_type
      return null

    method OperandOr.type->Type
      local left_type = left.type
      local right_type = right.type
      if (left_type is right_type) return left_type
      return null

    method PreDecrementLocal.type->Type
      return info.type

    method PrintValue.type->Type
      return null

    method Property.type->Type
      return @type

    method PropertyDeclarations.type->Type
      return @type

    method TemplatedAccess.type->Type
      local type_template_name = "$<<$>>"(name,type_args.count)
      local type_template = module_context.find_template( t, type_template_name, name, &extended_search )
      if (type_template)
        local type = Type( t, type_template, module_context, type_args )
        if (type and (args or type.attributes.is_singleton)) return type
      endIf

      if (name == "Dim" and type_args.count == 1)
        local element_type = type_args.type(0)
        if (element_type) return Type( t, element_type )  # Appropriate list type
      endIf

      return null

    method This.type->Type
      return this_type

    method Type.type->this
      return this

    method TypeAccess.type->Type
      return of_type

    method TypeContext.type->Type
      return @type

    method TypedLiteralList.type->Type
      return of_type

    method TypedLiteralTable.type->Type
      return of_type

    method Unary.type->Type
      return operand.type

    method VariantList.type->Type
      return Program.type_Variant

    method VariantTable.type->Type
      return Program.type_Variant

    method WideningCast.type->Type
      return to_type

endAugment

class TypeConversionStack [singleton]
  PROPERTIES
    stack = (Type,Type)[]

  METHODS
    method clear
      stack.clear

    method count->Int32
      return stack.count

    method contains( conversion:(Type,Type) )->Logical
      return stack.contains(conversion)

    method get( index:Int32 )->(Type,Type)
      return stack[index]

    method on_use->this
      return this

    method on_end_use( THISOBJ:TypeConversionStack )
      if (stack.count) stack.remove_last

    method push( conversion:(Type,Type) )
      stack.add( conversion )
endClass

# is_dynamic_call
augment
  METHODS
    method Cmd.is_dynamic_call->Logical
      return false

    method CallDynamicMethod.is_dynamic_call->Logical
      return true

    method CallThisDynamicMethod.is_dynamic_call->Logical
      return true
endAugment

augment
  METHODS
    method Cmd.coerce_to_LiteralInt->LiteralInt
      return null

    method LiteralInt.coerce_to_LiteralInt->LiteralInt
      return this

    method LiteralInt32.coerce_to_LiteralInt->LiteralInt
      return LiteralInt( t, value )

    method LiteralInt64.coerce_to_LiteralInt->LiteralInt
      return LiteralInt( t, value )
endAugment

