================================================================================
# Rogue.froley
================================================================================

--------------------------------------------------------------------------------
tokens
--------------------------------------------------------------------------------
EOL(end of line)             [content]
CHARACTER      character     [content]
BINARY_INTEGER integer       [content]
OCTAL_INTEGER  integer       [content]
HEX_INTEGER    integer       [content]
INTEGER        integer       [content]
REAL_NUMBER    real          [content]
STRING         string        [content]
IDENTIFIER     identifier    [content]
SYMBOL_DOLLAR  $
PLACEHOLDER($directive or $placeholder)  [content]
GENERIC_FN_ARG $arg          [content]

----------------------------------------------------------------------
tokens Keywords
----------------------------------------------------------------------
KEYWORD_AND               and
KEYWORD_ASSERT            assert
KEYWORD_AUGMENT           augment        [structural]
KEYWORD_BLOCK             block
KEYWORD_CASE              case           [structural]
KEYWORD_CATCH             catch          [structural]
KEYWORD_CATEGORIES        CATEGORIES     [structural]
KEYWORD_CLASS             class          [structural]
KEYWORD_CONTINGENT        contingent
KEYWORD_DEFINITIONS       DEFINITIONS    [structural]
KEYWORD_DOWN_TO           downTo
KEYWORD_ELSE              else           [structural]
KEYWORD_ELSE_IF           elseIf         [structural]
KEYWORD_END_AUGMENT       endAugment     [structural]
KEYWORD_END_BLOCK         endBlock       [structural]
KEYWORD_END_CLASS         endClass       [structural]
KEYWORD_END_CONTINGENT    endContingent  [structural]
KEYWORD_END_ENUM          endEnum        [structural]
KEYWORD_END_FOR_EACH      endForEach     [structural]
KEYWORD_END_FUNCTION      endFunction    [structural]
KEYWORD_END_IF            endIf          [structural]
KEYWORD_END_LOOP          endLoop        [structural]
KEYWORD_END_ROUTINE       endRoutine     [structural]
KEYWORD_END_SUBCLASS      endSubclass    [structural]
KEYWORD_END_TEMPORARILY   endTemporarily [structural]
KEYWORD_END_TRY           endTry         [structural]
KEYWORD_END_USE           endUse         [structural]
KEYWORD_END_WHICH         endWhich       [structural]
KEYWORD_END_WHILE         endWhile       [structural]
KEYWORD_ENUM              enum           [structural]
KEYWORD_ENSURE            ensure
KEYWORD_ESCAPE_BLOCK      escapeBlock
KEYWORD_ESCAPE_CONTINGENT escapeContingent
KEYWORD_ESCAPE_FOR_EACH   escapeForEach
KEYWORD_ESCAPE_IF         escapeIf
KEYWORD_ESCAPE_LOOP       escapeLoop
KEYWORD_ESCAPE_TRY        escapeTry
KEYWORD_ESCAPE_WHICH      escapeWhich
KEYWORD_ESCAPE_WHILE      escapeWhile
KEYWORD_EXPORT            export
KEYWORD_FALSE             false
KEYWORD_FOR_EACH          forEach
KEYWORD_FUNCTION          function
KEYWORD_FUNCTION_TYPE     Function
KEYWORD_GLOBAL_PROPERTIES(GLOBAL PROPERTIES) [structural]
KEYWORD_GLOBAL_METHODS(GLOBAL METHODS)       [structural]
KEYWORD_IF                if
KEYWORD_IMPORT            import
KEYWORD_INSTANCE_OF       instanceOf
KEYWORD_IS                is
KEYWORD_IS_TYPE           isType
KEYWORD_LOCAL             local
KEYWORD_LOCALIZE          localize
KEYWORD_LOOP              loop
KEYWORD_METHOD            method      [structural]
KEYWORD_METHODS           METHODS     [structural]
KEYWORD_MODULE            module      [structural]
KEYWORD_NATIVE_SECTION    NATIVE      [structural]
KEYWORD_NATIVE            native
KEYWORD_NATIVE_HEADER     nativeHeader
KEYWORD_NATIVE_CODE       nativeCode
KEYWORD_NATIVE_TYPE       nativeType  [structural]
KEYWORD_NECESSARY         necessary
KEYWORD_NEW               new
KEYWORD_NEXT_ITERATION    nextIteration
KEYWORD_NO_ACTION         noAction
KEYWORD_NOT               not
KEYWORD_NULL              null
KEYWORD_OR                or
KEYWORD_OTHERS            others      [structural]
KEYWORD_PI                pi
KEYWORD_PRIOR             prior
KEYWORD_PROPERTIES        PROPERTIES  [structural]
KEYWORD_RETURN            return
KEYWORD_ROUTINE           routine     [structural]
KEYWORD_SATISFIED         satisfied   [structural]
KEYWORD_STATES            STATES      [structural]
KEYWORD_SUBCLASS          subclass
KEYWORD_SUFFICIENT        sufficient
KEYWORD_SWAP_VALUES       swapValues
KEYWORD_TEMPORARILY       temporarily
KEYWORD_THIS              this
KEYWORD_THIS_TYPE         ThisType
KEYWORD_THROW             throw
KEYWORD_TRACE             trace
KEYWORD_TRUE              true
KEYWORD_TRY               try
KEYWORD_UNDEFINED         undefined
KEYWORD_UNSATISFIED       unsatisfied [structural]
KEYWORD_USE               use
KEYWORD_USES              uses        [structural]
KEYWORD_WHICH             which
KEYWORD_WHILE             while
KEYWORD_WITH              with
KEYWORD_XOR               xor

----------------------------------------------------------------------
tokens Symbols
----------------------------------------------------------------------
META_API              $api            [meta]
META_DEFAULT_VALUE    $defaultValue   [meta]
META_DEFINE           $define         [meta]
META_ELSE_IF          $elseIf         [meta structural]
META_END_IF           $endIf          [meta structural]
META_END_LOCAL_MACRO  $endLocalMacro  [meta structural]
META_END_MACRO        $endMacro       [meta structural]
META_EXISTS           $exists         [meta]
META_FILE_BYTES       $fileBytes      [meta]
META_FILE_STRING      $fileString     [meta]
META_IF               $if             [meta]
META_INCLUDE          $include        [meta]
META_INCLUDE_FOLDER   $includeFolder  [meta]
META_IS_COMPOUND      $isCompound     [meta]
META_IS_DEFINED       $isDefined      [meta]
META_IS_ENUM          $isEnum         [meta]
META_IS_PRIMITIVE     $isPrimitive    [meta]
META_IS_REFERENCE     $isReference    [meta]
META_JOIN_IDS         $id             [meta]
META_JOIN_STRINGS     $string         [meta]
META_LOCAL_DEFINE     $localDefine    [meta]
META_LOCAL_MACRO      $localMacro     [meta]
META_LOWERCASE        $lowercase      [meta]
META_MACRO            $macro          [meta]
META_REQUIRE_ROGUE    $requireRogue   [meta]
META_ROGUE_VERSION    $rogueVersion   [meta]
META_SOURCE_FILEPATH  $sourceFilepath [meta]
META_SOURCE_LINE      $sourceLine     [meta]
META_TARGET           $target         [meta]
META_THIS_MODULE      $thisModule     [meta]
META_UPPERCASE        $uppercase      [meta]

SYMBOL_AMPERSAND             &
SYMBOL_ARROW                 ->
SYMBOL_ASTERISK              *
SYMBOL_AT                    @
SYMBOL_BACKSLASH             \
SYMBOL_BANG                  !
SYMBOL_CARET                 ^
SYMBOL_CLOSE_CURLY           }   [structural]
SYMBOL_CLOSE_SQUARE          ]   [structural]
SYMBOL_CLOSE_PAREN           )   [structural]
SYMBOL_COLON                 :   [structural]
SYMBOL_COLON_COLON           ::
SYMBOL_COMMA                 ,   [structural]
SYMBOL_COMPARE               <>
SYMBOL_DOTDOT                ..
SYMBOL_DOTDOTLT              ..<
SYMBOL_DOTDOTGT              ..>
SYMBOL_DOT_OPEN_SQUARE       .[
SYMBOL_DOUBLE_VERTICAL_BAR   ||  [structural]
SYMBOL_EMPTY_SQUARE_BRACKETS []
SYMBOL_VARIANT_LIST            @[
SYMBOL_VARIANT_TABLE           @{
SYMBOL_EQ                    ==
SYMBOL_EQUALS                =
SYMBOL_FAT_ARROW             =>
SYMBOL_GE                    >=
SYMBOL_GT                    >
SYMBOL_GTGT                  >>  [structural]
SYMBOL_LE                    <=
SYMBOL_LEFT_SHIFT            :<<:
SYMBOL_LEFT_SHIFT_EQUALS     :<<:=
SYMBOL_LT                    <
SYMBOL_LTLT                  <<
SYMBOL_MINUS                 -
SYMBOL_MINUS_MINUS           --
SYMBOL_NE                    !=
SYMBOL_OPERATOR_QUESTION     operator?
SYMBOL_OPEN_CURLY            {
SYMBOL_OPEN_SQUARE           [
SYMBOL_OPEN_SQUARE_GT        [>
SYMBOL_OPEN_PAREN            (
SYMBOL_PERCENT               %
SYMBOL_PERIOD                .
SYMBOL_PLUS                  +
SYMBOL_PLUS_PLUS             ++
SYMBOL_QUESTION              ?
SYMBOL_QUESTION_COLON        ?:
SYMBOL_QUESTION_2SLASH       ?//
SYMBOL_QUESTION_ARROW        ?->
SYMBOL_QUESTION_DOT          ?.
SYMBOL_QUESTION_DOT_SQUARE   ?.[
SYMBOL_QUESTION_SQUARE       ?[
SYMBOL_RIGHT_SHIFT           :>>:
SYMBOL_RIGHT_SHIFT_EQUALS    :>>:=
SYMBOL_RIGHT_SHIFT_X         :>>>:
SYMBOL_RIGHT_SHIFT_X_EQUALS  :>>>:=
SYMBOL_SEMICOLON             ;  [structural]
SYMBOL_SLASH                 /
SYMBOL_SLASH_SLASH           //
SYMBOL_BRIEF_TRACE           @trace
SYMBOL_TILDE                 ~
SYMBOL_VERTICAL_BAR          |

SYMBOL_PLUS_EQUALS           +=
SYMBOL_MINUS_EQUALS          -=
SYMBOL_TIMES_EQUALS          *=
SYMBOL_DIVIDE_EQUALS         /=
SYMBOL_MOD_EQUALS            %=
SYMBOL_POWER_EQUALS          ^=
SYMBOL_BITWISE_AND_EQUALS    &=
SYMBOL_BITWISE_OR_EQUALS     |=
SYMBOL_BITWISE_XOR_EQUALS    ~=
SYMBOL_SHIFT_LEFT_EQUALS     :<<:=
SYMBOL_SHIFT_RIGHT_EQUALS    :>>:=
SYMBOL_SHIFT_RIGHT_X_EQUALS  :>>>:=
SYMBOL_ACCESS_EQUALS         .=

----------------------------------------------------------------------
scanner
----------------------------------------------------------------------
- tokenize_another
  ch = peek
  if (ch == ' ' or ch == '\r' or ch == '\t') consume [ \r\t]* # whitespace

  markPosition
  ch = peek
  if (ch == '#' or (ch == '-' and nextIs("----")) or (ch == '=' and nextIs("====")))
    scan_comment
  endIf

  if (not hasAnother)
    create EOL
    halt
  endIf

  if (ch == '.' and consume("..."))
    while (hasAnother and not consume('\n'))
      if (not (consume(' ') or consume('\t')))
        if (nextIs('#')) scan_comment; restart
        syntaxError "End of line expected."
      endIf
    endWhile
    restart
  endIf

  if ((ch >= 'a' and ch <= 'z') or (ch >= 'A' and ch <= 'Z') or ch == '_')
    scan_id_or_keyword
  endIf

  match input
    produceAny Symbols
    case '\n': call mark_beginning_of_line; produce EOL
    case '"':  tokenize_string
    case "'":  tokenize_character_or_string
    case "''": tokenize_two_quote_string
    case "@|": tokenize_verbatim_string
  endMatch

  if (ch == '$')
    scan('$')
    if (scan([_a-zA-Z][_a-zA-Z0-9]*)) produce PLACEHOLDER
    if (scan([0-9]*)) produce GENERIC_FN_ARG
    produce SYMBOL_DOLLAR
  endIf

  scan_number

  syntaxError

- scan_comment
  if (scan('#'))
    if (scan('{'))
      count = 1
      while (hasAnother)
        ch = read
        collect ch
        if (ch == '\n')
          saved_buffer = buffer
          create EOL
          buffer = saved_buffer
        elseIf (ch == '#')
          if (scan('{')) ++count
        elseIf (ch == '}')
          if (scan('#'))
            --count
            if (count == 0) call process_comment; restart
          endIf
        endIf
      endWhile
      syntaxError "Unterminated multi-line comment."
    else
      # Single line comment
      if scan [^\n]*
        call process_comment
        consume '\n'
        call mark_beginning_of_line
        produce EOL
      endIf
    endIf

  elseIf (consume({"----"[-]*}) or consume({"===="[=]*}))
    # HR comments
    scan [^\n]*
    call process_comment
    consume '\n'
    call mark_beginning_of_line
    produce EOL

  else
    return

  endIf

- scan_id_or_keyword
  if (not scan([_a-zA-Z][_a-zA-Z0-9]*)) return

  match buffer
    case "Date": call use_DateTime; produce IDENTIFIER
    case "File": call use_File; produce IDENTIFIER
    case "JSON": call use_Variant; produce IDENTIFIER
    case "Process": call use_Process; produce IDENTIFIER
    case "Promise": call use_Promise; produce IDENTIFIER
    case "Scanner": call use_Scanner; produce IDENTIFIER
    case "Set": call use_Set; produce IDENTIFIER
    case "Time": call use_DateTime; produce IDENTIFIER
    case "TimeInterval": call use_DateTime; produce IDENTIFIER
    case "Timestamp": call use_DateTime; produce IDENTIFIER
    case "Value": call use_Value; produce IDENTIFIER
    case "Variant": call use_Variant; produce IDENTIFIER
    produceAny Keywords
    case "GLOBAL"
      # "GLOBAL PROPERTIES" / "GLOBAL METHODS"
      if (consume [ ]+)
        collect ' '
        if (scan([_a-zA-Z][_a-zA-Z0-9]*))
          match buffer
            case "GLOBAL PROPERTIES" -> KEYWORD_GLOBAL_PROPERTIES
            case "GLOBAL METHODS"    -> KEYWORD_GLOBAL_METHODS
            others
              syntaxError "Expected 'GLOBAL PROPERTIES' or 'GLOBAL METHODS'."
          endMatch
        endIf
      endIf
    case "operator"
      if (consume '?') produce SYMBOL_OPERATOR_QUESTION
      else             produce IDENTIFIER
    others
      produce IDENTIFIER
  endMatch

- scan_number
  if (not nextIs([0-9]) or nextIs([.][0-9])) return

  match input
    case "0b"
      base = 2
      scan_binary_integer
      scan({[iIlL]})
      produce BINARY_INTEGER
    case "0c"
      base = 8
      scan_octal_integer
      scan({[iIlL]})
      produce OCTAL_INTEGER
    case "0x"
      base = 16
      scan_hex_integer
      scan({[iIlL]})
      produce HEX_INTEGER
    others
      scan_integer
      if (nextIs('.'))
        ch = peek(1)
        if (ch >= 'a' and ch <= 'z' or ch >= 'A' and ch <= 'Z' or ch == '_' or ch == '.') produce INTEGER
      endIf
      if (scan({[iIlL]})) produce INTEGER
      if (scan({[fFrR]})) produce REAL_NUMBER
      if (not scan('.')) produce INTEGER
      scan_integer
      if (scan({[eE]}))
        scan [+-]
        if (not scan([0-9]+)) syntaxError "Integer exponent expected."
      endIf
      scan( {[fFrR]} )
      produce REAL_NUMBER
  endMatch

- scan_integer
  while (scan([0-9]+))
    if (not consume([_]+)) return
  endWhile
  return

- scan_binary_integer
  while (scan([01]+))
    if (not consume([_]+)) return
  endWhile
  return

- scan_octal_integer
  while (scan([0-7]+))
    if (not consume([_]+)) return
  endWhile
  return

- scan_hex_integer
  while (scan([0-9A-Fa-f]+))
    if (not consume([_]+)) return
  endWhile
  return

- tokenize_string
  scan_string
  produce STRING

- scan_string
  while (hasAnother and not nextIs('"'))
    scan_character
  endWhile
  mustConsume '"'
  return

- tokenize_character_or_string
  if (consume('\'')) produce STRING
  scan_character
  if (consume('\'')) produce CHARACTER
  while (hasAnother and not nextIs('\''))
    scan_character
  endWhile
  mustConsume('\'')
  produce STRING

- scan_single_quote_string
  while (hasAnother and not nextIs('\''))
    scan_character
  endWhile
  mustConsume '\''
  return

- tokenize_two_quote_string
  scan_two_quote_string
  produce STRING

- scan_two_quote_string
  while (hasAnother and not nextIs("''"))
    scan_character
  endWhile
  mustConsume "''"
  return

- scan_character
  if (not hasAnother) syntaxError "Unterminated string - unexpected end of file."
  ch = read
  if (ch == '\n')
    syntaxError "Unterminated string - unexpected end of line."
  endIf
  if (ch != '\\')
    collect ch
    return
  endIf

  if (consume('b')) collect Character(8); return
  if (consume('e')) collect Character(27); return
  if (consume('f')) collect Character(12); return
  if (consume('n')) collect '\n'; return
  if (consume('r')) collect '\r'; return
  if (consume('t')) collect '\t'; return
  if (consume('v')) collect Character(11); return
  if (consume('0')) collect Character(0); return
  if (consume('/')) collect '/'; return
  if (consume('?')) collect '?'; return
  if (consume('\''))collect '\''; return
  if (consume('\\'))collect '\\'; return
  if (consume('"')) collect '"'; return
  if (consume('x'))
    hex2 = 0
    read_hex2
    collect Character(hex2)
    return
  endIf
  if (consume('u'))
    read_hex4
    collect Character(hex4)
    return
  endIf
  if (consume('['))
    hex_digit = 0
    read_hex_digit
    value = hex_digit
    digits = 1
    while (digits < 6 and nextIs([0-9a-fA-F]))
      read_hex_digit
      value = value * 16 + hex_digit
      ++digits
    endWhile
    mustConsume ']'
    collect Character(value)
    return
  endIf
  buffer = ""
  collect "Invalid escape sequence '\\" ch
  collect "'. Supported: \\b \\e \\f \\n \\r \\t \\v \\0 \\? \\/ \\' \\\\ \\\" \\xHH \\uHHHH \\[H*]."
  syntaxError buffer

- read_hex4
  read_hex2
  hex4 = hex2 * 256
  read_hex2
  hex4 = hex4 + hex2
  return

- read_hex2
  read_hex_digit
  hex2 = hex_digit * 16
  read_hex_digit
  hex2 = hex2 + hex_digit
  return

- read_hex_digit
  if (not nextIs([0-9a-fA-F])) syntaxError "Hex digit expected (0-9, a-f, or A-F)."
  ch = read
  if (ch >= 'a' and ch <= 'f')
    hex_digit = (ch - Integer('a')) + 10
  elseIf (ch >= 'A' and ch <= 'F')
    hex_digit = (ch - Integer('A')) + 10
  else
    hex_digit = ch - Integer('0')
  endIf
  return

- tokenize_verbatim_string
  scan_verbatim_string
  produce STRING

- scan_verbatim_string
  while (hasAnother)
    scan [^\n]*
    savePosition
      consume '\n'
      consume [ \t]*
      if (not consume('|'))
        restorePosition
        return
      else
        discardPosition
        collect '\n'
      endIf
  endWhile


----------------------------------------------------------------------
parser
----------------------------------------------------------------------
- program_elements
  beginList
    while (hasAnother) program_element
  produceList

- consume_eols
  while (consume(EOL)) noAction

- must_consume_eols
  if (not consume(EOL)) syntaxError "End of line expected."
  while (consume(EOL)) noAction

- consume_eols_and_semicolons
  while (consume(EOL) or consume(';')) noAction

- program_element
  consume_eols
  if (not hasAnother) return

  if (nextIs("class"))
    savePosition     # Pass 1: save position to scan template tokens from (node output already disabled)
    ++disable_output # Pass 2: also disable output; just parse to get past

    consume("class")
    identifier
    template_parameters
    class
    call on_parsed_class  # Pass 1: stores class template tokens. Pass 2: does nothing.

    --disable_output
    discardPosition

    return
  endIf

  if (nextIs("enum"))
    savePosition     # Pass 1: save position to scan template tokens from (node output already disabled)
    ++disable_output # Pass 2: also disable output; just parse to get past

    consume("enum")
    identifier
    template_parameters
    enum
    call on_parsed_enum  # Pass 1: stores enum template tokens. Pass 2: does nothing.

    --disable_output
    discardPosition

    return
  endIf

  on "augment"
    if (consume(EOL))
      # Batch Augment
      ++disable_output
      is_batch_augment = true
      class_sections
      is_batch_augment = false
      mustConsume "endAugment"
      --disable_output
    else
      # Standard Type Augment
      ++disable_output

      savePosition  # collect tokens
      type
      call set_augment_context_name
      discardPosition

      savePosition  # collect tokens
      if (nextIs(':')) base_types
      must_consume_eols
      class_sections
      mustConsume "endAugment"
      call on_parsed_augment
      discardPosition

      --disable_output
    endIf
    return
  endOn


  on "module"
    call parse_module_id
    module_attributes
    produce DefineModule(name:String,attributes:Attributes)
  endOn

  on "nativeType"
    # EXAMPLE: nativeType<<"char*">> RogueCString
    call define_native_type
    return
  endOn

  if (nextIs("class"))
    savePosition     # Pass 1: position to scan template tokens from (node output already disabled)
    ++disable_output # Pass 2: also disable output; just parse to get past

    consume("class")
    identifier
    template_parameters
    class
    call on_parsed_class  # Pass 1: stores class template tokens. Pass 2: does nothing.

    --disable_output
    discardPosition

    return
  endIf

  if (nextIs("routine"))
    savePosition     # Pass 1: position to scan template tokens from (node output already disabled)
    ++disable_output # Pass 2: also disable output; just parse to get past

    consume "routine"
    procedure_definition_name
    if (nextIs("<<")) template_parameters
    procedure_parameters
    procedure_return_type
    procedure_attributes
    if (consume(':'))
      single_line_statements
      store_routine
    else
      multi_line_statements
      store_routine
      mustConsume "endRoutine"
    endIf

    return

  endIf

  on "uses"
    saved_setting = 0
    saved_setting = disable_output
    disable_output = 0

    string
    uses_attributes

    disable_output = saved_setting
    call on_uses_module
    return
  endOn

  if (nextHasAttribute(structural))
    syntaxError
  endIf

  procedure_body

- subclass
  if (nextIs("subclass"))
    savePosition     # Pass 1: position to scan template tokens from (node output already disabled)
    ++disable_output # Pass 2: also disable output; just parse to get past

    consume "subclass"
    class_sections
    mustConsume "endSubclass"
    --disable_output
    call on_parsed_subclass  # Pass 1: stores class template tokens & replaces access with generated type name.
                             # Pass 2: does nothing.
    discardPosition
  endIf

- store_routine
  call on_parsed_routine  # Pass 1: stores routine as class template tokens. Pass 2: does nothing.
  --disable_output
  discardPosition

- procedure_attributes
  beginList
    if (procedure_returns_this)
      create AttributeReturnsThis
      procedure_returns_this = false
    endIf

    on '['
      while (hasAnother and not nextIs(']'))
        procedure_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- procedure_attribute
  on @"abstract"   -> AttributeAbstract
  on @"api"        -> AttributeEssential  # [api] is the same as [essential] for methods
  on @"append"     -> AttributeAppend
  on @"essential"  -> AttributeEssential
  on @"fallback"   -> AttributeFallback
  on @"insert"     -> AttributeInsert
  on @"mutating"   -> AttributeMutating
  on @"override"   -> AttributeOverride
  on @"preferred"  -> AttributePreferred
  on @"propagated" -> AttributePropagated
  on @"replace"    -> AttributeReplace
  syntaxError "Illegal procedure attribute. Expected one or more of [abstract api append essential fallback insert mutating override preferred propagated replace]."

- procedure_body
  multi_line_statements

- procedure_definition_name
  on '.'
    create Identifier( name=".":String )
    identifier
    call join_identifiers
  elseOnOthers
    procedure_name
  endOn

- procedure_name
  on 'operator?'
    # 'operator?' is a special case because otherwise 'operator?->Logical'
    # would be parsed as 'operator' '?->' 'Logical'
    produce Identifier(name="operator?":String)
  endOn

  on @"operator"
    on "?"      -> Identifier(name="operator?":String)
    on "+"      -> Identifier(name="operator+":String)
    on "-"      -> Identifier(name="operator-":String)
    on "*"      -> Identifier(name="operator*":String)
    on "/"      -> Identifier(name="operator/":String)
    on "%"      -> Identifier(name="operator%":String)
    on "^"      -> Identifier(name="operator^":String)
    on "++"     -> Identifier(name="operator++":String)
    on "--"     -> Identifier(name="operator--":String)
    on "&"      -> Identifier(name="operator&":String)
    on "|"      -> Identifier(name="operator|":String)
    on "~"      -> Identifier(name="operator~":String)
    on "!"      -> Identifier(name="operator!":String)
    on ":<<:"   -> Identifier(name="operator:<<:":String)
    on ":>>:"   -> Identifier(name="operator:>>:":String)
    on ":>>>:"  -> Identifier(name="operator:>>>:":String)
    on "=="     -> Identifier(name="operator==":String)
    on "<>"     -> Identifier(name="operator<>":String)
    on "+="     -> Identifier(name="operator+=":String)
    on "-="     -> Identifier(name="operator-=":String)
    on "*="     -> Identifier(name="operator*=":String)
    on "/="     -> Identifier(name="operator/=":String)
    on "%="     -> Identifier(name="operator%=":String)
    on "^="     -> Identifier(name="operator^=":String)
    on "&="     -> Identifier(name="operator&=":String)
    on "|="     -> Identifier(name="operator|=":String)
    on "~="     -> Identifier(name="operator~=":String)
    on ":<<:="  -> Identifier(name="operator:<<:=":String)
    on ":>>:="  -> Identifier(name="operator:>>:=":String)
    on ":>>>:=" -> Identifier(name="operator:>>>:=":String)

  elseOnOthers
    identifier
  endOn

- procedure_parameters
  beginList
    if (not consume('(')) produceList
    consume_eols
    if (consume(')')) produceList
    consume_eols
    procedure_parameter
    consume_eols
    while (consume(',')) procedure_parameter; consume_eols
    mustConsume ')'
  produceList Parameters

- procedure_parameter
  consume_eols
  on '&' identifier optional_parameter_initial_value optional_type -> Local(name:String,initial_value,initial_value_tokens:TokenList,type:Type,attribute="default":String)
  on '@'
    internal_id
    optional_parameter_initial_value
    if (nextIs(':')) syntaxError "Direct @property-set parameter cannot specify a type."
    createNull # type
    produce Local(name:String,initial_value,initial_value_tokens:TokenList,type:Type,attribute="direct-auto-store":String)
  endOn
  onPeek IDENTIFIER
    identifier
    optional_parameter_initial_value
    optional_type
    produce Local(name:String,initial_value,initial_value_tokens:TokenList,type:Type)
  endOn
  identifier  # error

- optional_initial_value
  if (consume('=')) consume_eols; expression
  else              createNull

- optional_parameter_initial_value
  if (consume('='))
    consume_eols
    savePosition
    expression
    createTokenListPreservingStack
  else
    createNull  # Cmd
    createNull  # TokenList
  endIf

- procedure_return_type
  if (not consume('->')) produceNull
  if (consume("this") or consume("ThisType"))
    procedure_returns_this = true
    produceNull
  endIf
  type

- function_definition
  on "function"
    procedure_parameters
    procedure_return_type
    onPeek "with"
      with_values
    elseOnOthers
      createNull
    endOn
    consume ':'
    if (consume(EOL))
      multi_line_statements
      mustConsume "endFunction"
    else
      single_line_statements
    endIf
    produce FunctionDefinition(parameters:Parameters,return_type:Type,with_values:WithValues,statements)
  endOn

- with_values
  on "with"
    beginList
      if (consume('('))
        with_value
        while (consume(',')) consume_eols; with_value
        mustConsume(')')
      else
        with_value
        while (consume(',')) consume_eols; with_value
      endIf
    produceList WithValues
  endOn

- with_value
  identifier
  on '='
    expression
  elseOnOthers
    createNull
  endOn
  produce WithValue(name:String,value)

- id_or_type
  pathed_name
  if (nextIs("<<") or nextIs("[]") or nextIs('?')) remaining_type

- type
  on '('
    on "Function"
      function_param_types
      function_return_type
      mustConsume ')'
      create FunctionType(param_types:TypeList,return_type:Type):Type
      list_or_optional_type
      return
    elseOnOthers
      # Must be a tuple.
      savePosition
      ++disable_output
      type  # just want to parse through this
      --disable_output
      if (nextIs(':'))
        restorePosition
        beginList
          named_tuple_type_element
          while (consume(','))
            named_tuple_type_element
          endWhile
          mustConsume ')'
        createList NamedTupleTypeElements
        create Type(named_elements:NamedTupleTypeElements)
        list_or_optional_type
        return
      else
        restorePosition
        beginList
          consume_eols
          type
          consume_eols
          while (consume(','))
            consume_eols
            type
            consume_eols
          endWhile
          mustConsume ')'
        createList AnonymousTupleTypeElements
        create Type(anonymous_elements:AnonymousTupleTypeElements)
        list_or_optional_type
        return
      endIf
    endOn

  elseOn '['
    # [Key:Variant] -> Table<<Key,Variant>>
    type
    mustConsume ':'
    type
    mustConsume ']'
    create Type(key_type:Type,value_type:Type)
    call use_Table
    list_or_optional_type
    return

  elseOn "Function"
    function_param_types
    function_return_type
    create FunctionType(param_types:TypeList,return_type:Type):Type
    list_or_optional_type
    return

  elseOnOthers
    call set_cur_token
    pathed_name
    remaining_type

  endOn

- named_tuple_type_element
  consume_eols
  identifier
  consume_eols
  mustConsume ':'
  type
  consume_eols
  produce NamedTupleTypeElement(name:String,of_type:Type)

- remaining_type
  if (nextIs("<<")) template_args
  else              createNull
  create Type(name:String,type_args:TemplateArgs)
  list_or_optional_type

- list_or_optional_type
  while (nextIs("[]") or nextIs('?'))
    on "[]"
      create Type(element_type:Type)
    elseOn '?'
      create Type(core_type:Type,optional="true":Logical)
    endOn
  endWhile

- function_param_types
  beginList
    if (consume('(') and not consume(')'))
      function_type_parameter
      while (consume(','))
        function_type_parameter
      endWhile
      mustConsume ')'
    endIf
  produceList TypeList

- function_type_parameter
  if (nextIs(IDENTIFIER))
    savePosition
    identifier
    if (consume(':'))
      # name:Type parameter - name is discarded
      discardPosition
      call discard_last  # discard identifier
      type
      return
    endIf
    restorePosition
  endIf

  # Type only
  type

- function_return_type
  on "->" type: return
  produceNull

- remaining_template_access
  template_args

  if (nextIs("[]") or nextIs('?'))
    # We now know we're parsing a templated type, not a templated method.
    create Type(name:String,type_args:TemplateArgs)
    while (nextIs("[]") or nextIs('?'))
      on "[]"
        create Type(element_type:Type)
      elseOn '?'
        create Type(core_type:Type,optional="true":Logical)
      endOn
    endWhile
    type_access_or_typed_literal_list
    return
  endIf

  access_args
  create TemplatedAccess( name:String, type_args:TemplateArgs, args )
  subclass

- template_args
  consume("<<")
  beginList
    consume_eols
    if (not consume(">>"))
      template_arg_tokens
      consume_eols
      while (consume(','))
        consume_eols
        template_arg_tokens
        consume_eols
      endWhile
      mustConsume(">>")
    endIf
  createList TemplateArgs

- template_arg_tokens
  savePosition
  while (hasAnother and not nextIs(',') and not nextIs(">>"))
    if (nextIs('<<'))    nested_specializer_tokens
    elseIf (nextIs('(')) nested_parens_tokens
    else                 read
  endWhile
  produceTokenList

- nested_specializer_tokens
  read  # <<
  while (hasAnother and not nextIs(">>"))
    if (nextIs('<<'))    nested_specializer_tokens
    elseIf (nextIs('(')) nested_parens_tokens
    else                 read
  endWhile
  mustConsume ">>"

- nested_parens_tokens
  read  # (
  while (hasAnother and not nextIs(')'))
    if (nextIs('<<'))    nested_specializer_tokens
    elseIf (nextIs('(')) nested_parens_tokens
    else                 read
  endWhile
  mustConsume ')'

- pathed_name
  savePosition
  on "::"
    create Identifier(name="Rogue":String)
    identifier
    create ModuleQualifiedID(context,name:String)
    discardPosition
  elseOn '.'
    restorePosition
    internal_id
    return
  elseOnOthers
    restorePosition
    identifier
  endOn

  while nextIs("::")
    on "::"
      if (nextIs('.'))
        internal_id
        create ModuleQualifiedID(context,name:String)
        return
      else
        identifier
        create ModuleQualifiedID(context,name:String)
      endIf
    endOn
  endWhile

- optional_type
  if (consume(':')) type
  else              createNull

- identifier
  on IDENTIFIER  -> Identifier(name=content)
  if (nextIs(PLACEHOLDER))
    if (not disable_output)
      syntaxError "Unrecognized $directive or $placeholder."
    endIf
    on PLACEHOLDER -> Identifier(name=content)
  endIf
  on "ThisType"
    produce Identifier(name="ThisType":String)
  endOn
  syntaxError "Identifier expected."

- string
  on STRING
    create LiteralString(value=content):Literal
    while (nextIs(STRING))
      on STRING
        create LiteralString(value=content):Literal
        call join_strings
      endOn
    endWhile
    return
  endOn
  syntaxError "Literal string expected."

- module_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        module_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- module_attribute
  on @"api"       -> AttributeAPI
  on @"essential" -> AttributeEssential
  syntaxError "Illegal module attribute. Expected one or more of [api essential]."

- class_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        class_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- class_attribute
  on @"abstract"  -> AttributeAbstract
  on @"api"       -> AttributeAPI
  on @"aspect"    -> AttributeAspect
  on @"compound"  -> AttributeCompound
  on @"primitive" -> AttributePrimitive
  on @"singleton" -> AttributeSingleton
  if (consume @"essential")
    call class_attribute_essential
    produce AttributeEssential
  endIf
  syntaxError "Illegal class attribute. Expected one or more of [abstract api aspect compound essential primitive singleton]."

- class
  constructor_properties
  base_types
  class_attributes
  call parse_doc_comment
  if (consume(';'))
    createNull
  else
    class_sections
    mustConsume "endClass"
  endIf
  produce Class( constructor_properties:Parameters, base_types:TypeList, attributes:Attributes, doc:String, sections )

- enum_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        enum_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- enum_attribute
  on @"bitflags"  -> AttributeBitflags
  syntaxError "Illegal enum attribute. Expected [bitflags]."

- enum
  constructor_properties
  base_types
  enum_attributes
  call parse_doc_comment
  if (consume(';'))
    createNull
  else
    enum_sections
    mustConsume "endEnum"
  endIf
  produce Class( constructor_properties:Parameters, base_types:TypeList, attributes:Attributes, doc:String, sections )

- placeholder
  on PLACEHOLDER -> Placeholder(name=content)
  syntaxError "'$Placeholder' name expected."

- template_parameters
  on "<<"
    beginList
      if (not consume(">>"))
        placeholder
        while (consume(','))
          placeholder
        endWhile
        mustConsume ">>"
      endIf
    produceList
  endOn
  produceNull

- constructor_properties
  if (not nextIs('(')) produceNull
  procedure_parameters

- base_types
  beginList
    if (not consume(':')) produceList TypeList
    type
    while (hasAnother and (nextIs(',') or nextIs(IDENTIFIER)))
      if (consume(',')) consume_eols
      type
    endWhile
  produceList TypeList

- class_sections
  beginList
  if (not consume(';'))
    consume_eols
    while (not nextIs("endClass") and not nextIs("endAugment") and not nextIs("endSubclass"))
      class_section
      consume_eols
    endWhile
  endIf
  produceList

- class_section
  consume_eols
  on "GLOBAL METHODS"
    consume_eols
    while (nextIs("method"))
      global_method
      consume_eols
    endWhile
    return
  elseOn "METHODS"
    consume_eols
    while (nextIs("method"))
      method
      consume_eols
    endWhile
    return
  elseOn "GLOBAL PROPERTIES"
    consume_eols
    while (not nextHasAttribute(structural))
      global_properties
      consume_eols
    endWhile
    return
  elseOn "PROPERTIES"
    consume_eols
    while (not nextHasAttribute(structural))
      properties
      consume_eols
    endWhile
    return
  elseOn "NATIVE"
    consume_eols
    while (not nextHasAttribute(structural))
      native_code_blocks
      consume_eols
    endWhile
    return
  elseOn "DEFINITIONS"
    consume_eols
    while (not nextHasAttribute(structural))
      definition
      consume_eols
    endWhile
    return
  elseOn "STATES"
    consume_eols
    while (nextIs('>'))
      state
      consume_eols
    endWhile
    return
  endOn
  syntaxError

- state
  on '>'
    identifier  # state name
    consume_eols
    beginList
      while (nextIs("method"))
        method
        consume_eols
      endWhile
    createList Methods
    produce StateDef(name:String,methods:Methods)
  endOn

- enum_sections
  beginList
  if (not consume(';'))
    categories  # default section is CATEGORIES

    consume_eols
    while (not nextIs("endEnum"))
      enum_section
      consume_eols
    endWhile
  endIf
  produceList

- enum_section
  on "CATEGORIES"
    categories
    return
  endOn
  class_section

- categories
  consume_eols
  while (nextIs(IDENTIFIER))
    category
    while (consume(','))
      consume_eols
      category
    endWhile
    consume_eols
  endWhile

- category
  onPeek IDENTIFIER
    identifier
    if (nextIs('(')) args
    else             createNull
    on "="
      expression
    elseOnOthers
      createNull
    endOn
    call parse_doc_comment
    produce Category(name:String,args,value,doc:String)
  endOn
  identifier  # syntax error

- native_code_blocks
  consume_eols
  while (not nextHasAttribute(structural))
    native_code_block
    consume_eols
  endWhile

- native_code_block
  on "nativeHeader"
    if (consume('('))
      on INTEGER
        create LiteralInteger(content=content:String,base="10":Integer):LiteralPrimitive
      elseOnOthers
        syntaxError "Integer ordinal expected."
      endOn
      mustConsume ')'
    else
      createNull
    endIf
    consume_eols
    on @"File"
      mustConsume '('
      string
      call load_filepath_as_string
      mustConsume ')'
    elseOnOthers
      string
    endOn
    produce NativeHeader( ordinal:Integer, content:String )

  elseOn "nativeCode"
    if (consume('('))
      on INTEGER
        create LiteralInteger(content=content:String,base="10":Integer):LiteralPrimitive
      elseOnOthers
        syntaxError "Integer ordinal expected."
      endOn
      mustConsume ')'
    else
      createNull
    endIf
    consume_eols
    on @"File"
      mustConsume '('
      string
      call load_filepath_as_string
      mustConsume ')'
    elseOnOthers
      string
    endOn
    produce NativeCode( ordinal:Integer, content:String )

  endOn
  syntaxError "Expected 'nativeHeader', or 'nativeCode'."

- definition
  on IDENTIFIER
    mustConsume '='
    expression
    produce Definition(name=content,value)
  endOn
  mustConsume IDENTIFIER  # generate error


- forEach_loop
  on "forEach"
    if consume('(')
      consume_eols
      forEach_control
      consume_eols
      mustConsume(')')
    else
      forEach_control
    endIf
    if (consume(EOL))
      multi_line_statements
      mustConsume "endForEach"
    else
      single_line_statements
    endIf
    produce ForEach(control:ForEachControl,statements)
  endOn

- forEach_control
  savePosition
  onPeek IDENTIFIER
    identifier
    forEach_optional_at
    if (consume(@"in"))
      forEach_collection
      discardPosition
      produce ForEachInControl(name:String,optional_at:ForEachAt,collection:ForEachCollection):ForEachControl
    elseIf (consume(@"of"))
      forEach_collection
      discardPosition
      produce ForEachOfControl(name:String,optional_at:ForEachAt,collection:ForEachCollection):ForEachControl
    endIf
  endOn

  # Anonymous forEach
  restorePosition

  createNull  # identifier
  createNull  # optional_at
  forEach_collection
  produce ForEachInControl(name:String,optional_at:ForEachAt,collection:ForEachCollection):ForEachControl

- inline_forEach
  on "forEach"
    createNull  # name
    createNull  # optional_at
    if (consume(@"in"))
      forEach_collection
      create ForEachInControl(name:String,optional_at:ForEachAt,collection:ForEachCollection):ForEachControl
    elseIf (consume(@"of"))
      forEach_collection
      create ForEachOfControl(name:String,optional_at:ForEachAt,collection:ForEachCollection):ForEachControl
    else
      syntaxError "Expected 'in' or 'of'."
    endIf
    produce InlineForEach(control:ForEachControl)
  endOn


- forEach_optional_at
  if (not consume(@"at")) produceNull
  identifier
  produce ForEachAt(name:String)

- forEach_collection
  savePosition
  createNull  # collection_name
  expression  # collection
  if (nextIs('='))
    restorePosition  # whoops
    identifier       # collection_name
    mustConsume('=')
    expression       # collection
  else
    discardPosition
  endIf

  if (consume(@"from")) expression
  else                  createNull

  if (consume(@"step")) expression
  else                  createNull

  produce ForEachCollection(name:String,data,starting_index,step_size)

- if_statement
  on "if"
    if (consume("local"))
      # if local v = expression
      identifier
      mustConsume "="
      expression
      must_consume_eols
      multi_line_statements
      if_local_elseifs_or_else
      mustConsume "endIf"
      produce IfLocal( name:String, expression, statements, else_if:IfLocal )
    endIf

    control_expression
    consume @"then"  # optional aesthetic syntax

    if (consume(EOL))
      # Multi-line 'if'
      scoped_multi_line_statements
      if_statement_multi_line_elseIf_else
      mustConsume "endIf"
    else
      # Single-line 'if'
      scoped_single_line_statements
      if_statement_single_line_elseIf_else
    endIf
    produce If(condition,statements,cmd_else):Conditional
  endOn

- print_peek_8
  savePosition
  println ""
  call print_peek
  read
  call print_peek
  read
  call print_peek
  read
  call print_peek
  read
  call print_peek
  read
  call print_peek
  read
  call print_peek
  read
  call print_peek
  restorePosition

- if_local_elseifs_or_else
  on "elseIf"
    mustConsume "local"
    identifier
    mustConsume "="
    expression
    must_consume_eols
    scoped_multi_line_statements
    if_local_elseifs_or_else
    produce IfLocal( name:String, expression, statements, else_if:IfLocal )

  elseOn "else"
    must_consume_eols
    createNull  # name
    createNull  # expression
    scoped_multi_line_statements
    createNull  # else_if
    produce IfLocal( name:String, expression, statements, else_if:IfLocal )

  elseOnOthers
    produceNull
  endOn

- if_statement_multi_line_elseIf_else
  savePosition
  on "elseIf"
    control_expression
    consume @"then"  # optional aesthetic syntax
    if (consume(EOL))
      # This elseIf is multi-line; good to keep going
      discardPosition
      scoped_multi_line_statements
      if_statement_multi_line_elseIf_else
      create If(condition,statements,cmd_else):Conditional
      produce Statements(element)
    else
      # This single-line elseIf is outside the scope of the 'if' we're currently parsing.
      restorePosition
      produceNull
    endIf
  elseOn "else"
    if (consume(EOL))
      # This else is multi-line; good to keep going
      discardPosition
      createNull
      scoped_multi_line_statements
      createNull
      create If(condition,statements,cmd_else):Conditional
      produce Statements(element)
    else
      # This single-line else is outside the scope of the 'if' we're currently parsing.
      restorePosition
      produceNull
    endIf
  elseOnOthers
    discardPosition
    produceNull
  endOn

- if_statement_single_line_elseIf_else
  savePosition
  on "elseIf"
    control_expression
    consume @"then"  # optional aesthetic syntax
    if (consume(EOL))
      # This elseIf is multi-line and outside our scope
      restorePosition
      produceNull
    else
      # This elseIf is single line; keep going
      discardPosition
      scoped_single_line_statements
      if_statement_single_line_elseIf_else
      create If(condition,statements,cmd_else):Conditional
      produce Statements(element)
    endIf
  elseOn "else"
    if (consume(EOL))
      # This else is multi-line and outside our scope
      restorePosition
      produceNull
    else
      # This else is single line; keep going
      discardPosition
      createNull
      scoped_single_line_statements
      createNull
      create If(condition,statements,cmd_else):Conditional
      produce Statements(element)
    endIf
  elseOnOthers
    discardPosition
    produceNull
  endOn

- inline_which
  on "which"
    consume_eols
    mustConsume '{'
    consume_eols
    beginList
      inline_which_case
      consume_eols
      while (consume("||"))
        consume_eols
        inline_which_case
        consume_eols
      endWhile
    createList InlineWhichCases
    mustConsume '}'
    produce InlineWhich(cases:InlineWhichCases)
  endOn

- inline_which_case
  inline_which_expression
  consume_eols
  if (consume(':')) inline_which_expression; consume_eols
  else              createNull
  produce InlineWhichCase(condition,value)

- method
  on "method"
    if (is_batch_augment)
      savePosition
      type
      call set_augment_context_name
      discardPosition
      mustConsume '.'
      savePosition
    endIf

    next_is_to_type = false
    if (nextIs(@"to"))
      savePosition
      consume @"to"
      next_is_to_type = not nextIs("<<")
      restorePosition
    endIf

    if next_is_to_type
      on @"to"
        create Identifier(name=content)
        procedure_return_type
        procedure_parameters
        call swap
      endOn

    else
      procedure_definition_name
      is_def = false
      if (nextIs("<<"))
        # Method template
        savePosition
        consume "<<"
        is_def = nextIs(PLACEHOLDER)
        restorePosition

        if (is_def)
          # Method template definition, e.g. method name<<$Type>>(...)
          is_method_template = true
          template_parameters
          savePosition
          ++disable_output
        else
          # Method template instance, e.g. method name<<Rogue::Int32>>(...)
          template_args
          call join_template_args  # name + <<type-args>>
        endIf
      endIf
      procedure_parameters
      procedure_return_type
    endIf

    procedure_attributes
    consume(':')
    call parse_doc_comment

    if (is_batch_augment)
      multi_line_statements
      if (is_method_template)
        is_method_template = false
        --disable_output
        discardPosition
      endIf
      call batch_augment_create_method
      discardPosition
    elseIf (is_method_template)
      multi_line_statements
      is_method_template = false
      --disable_output
      createTokenList  # effective discardPosition
      produce MethodTemplate(name:String,placeholders,token_list:TokenList)
    else
      savePosition

      ++disable_output
      multi_line_statements
      --disable_output
      createTokenList

      createNull
      create LocalScope(statements):ControlStructure
      create Method(name:String,parameters:Parameters,return_type:Type,attributes:Attributes,doc:String,source_tokens:TokenList,body:LocalScope):Procedure
      return
    endIf
  endOn

- scoped_single_line_statements
  single_line_statements
  produce LocalScope(statements):ControlStructure

- scoped_multi_line_statements
  multi_line_statements
  produce LocalScope(statements):ControlStructure

- global_method_template_instance
  procedure_parameters
  procedure_return_type
  procedure_attributes
  consume(':')
  call parse_doc_comment

  savePosition

  scoped_multi_line_statements

  create GlobalMethod(name:String,parameters:Parameters,return_type:Type,attributes:Attributes,doc:String,body:LocalScope):Procedure
  return

- method_template_instance
  procedure_parameters
  procedure_return_type
  procedure_attributes
  consume(':')
  call parse_doc_comment

  savePosition

  ++disable_output
  multi_line_statements
  --disable_output
  createTokenList

  createNull
  create LocalScope(statements):ControlStructure
  create Method(name:String,parameters:Parameters,return_type:Type,attributes:Attributes,doc:String,source_tokens:TokenList,body:LocalScope):Procedure
  return

- global_method
  on "method"
    procedure_definition_name

    if (nextIs("<<"))
      is_def = false
      savePosition
      consume "<<"
      is_def = nextIs(PLACEHOLDER)
      restorePosition

      if (is_def)
        # Global method template definition, e.g. method name<<$Type>>(...)
        template_parameters
        savePosition
        ++disable_output
          procedure_parameters
          procedure_return_type
          procedure_attributes
          consume(':')
          multi_line_statements
        --disable_output
        createTokenList  # effective discardPosition
        produce GlobalMethodTemplate(name:String,placeholders,_tokens:TokenList)
      else
        # Global method template instance, e.g. method name<<Int32>>(...)
        template_args
        call join_identifiers  # name + <<type-args>>
      endIf
    endIf

    procedure_parameters
    procedure_return_type
    procedure_attributes
    consume(':')
    call parse_doc_comment
    scoped_multi_line_statements
    produce GlobalMethod(name:String,parameters:Parameters,return_type:Type,attributes:Attributes,doc:String,body:LocalScope):Procedure
  endOn

- global_properties
  beginList
    consume_eols
    property_declaration
    while (consume(','))
      consume_eols
      property_declaration
    endWhile
  createList
  optional_type
  global_property_attributes
  call parse_doc_comment
  produce GlobalPropertyDeclarations( declarations, type:Type, attributes:Attributes, doc:String )

- properties
  beginList
    consume_eols
    property_declaration
    while (consume(','))
      consume_eols
      property_declaration
    endWhile
  createList
  optional_type
  property_attributes
  call parse_doc_comment
  produce PropertyDeclarations( declarations, type:Type, attributes:Attributes, doc:String )

- internal_id
  on '.'
    create Identifier( name="." )
    identifier
    call join_identifiers
  elseOnOthers
    identifier
  endOn

- property_declaration
  on IDENTIFIER
    optional_initial_value
    createNull
    produce Property( name=content, initial_value, type:Type )
  elseOn '.'
    create Identifier( name="." )
    identifier
    call join_identifiers
    optional_initial_value
    createNull
    produce Property( name, initial_value, type:Type )
  elseOn PLACEHOLDER
    if (not disable_output) syntaxError
    optional_initial_value
    createNull
    produce Property( name=content, initial_value, type:Type )
  elseOn "native"
    on "<<"
      identifier
      mustConsume ">>"
      consume_eols
      string
      produce NativeProperty( target:String, expression:String )
    elseOnOthers
      consume_eols
      string
      produce NativeProperty( target="C":String, expression:String )
    endOn
  endOn
  mustConsume IDENTIFIER  # throws error

- global_property_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        global_property_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- global_property_attribute
  syntaxError "Illegal global property attribute."

- property_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        property_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- property_attribute
  on @"faux" -> AttributeFaux
  syntaxError "Illegal property attribute. Expected [faux]."

- multi_line_statements
  consume_eols_and_semicolons
  beginList
  while (hasAnother and not nextHasAttribute(structural))
    control_structure
    consume_eols_and_semicolons
  endWhile
  produceList Statements

- single_line_statements
  on EOL
    consume_eols
    if (not nextIs('{'))
      beginList
      produceList Statements
    endIf
  endOn

  on '{'
    multi_line_statements
    mustConsume '}'
    return
  endOn

  beginList

  if (consume(EOL) or (nextHasAttribute(structural) and not nextIs(';'))) produceList Statements
  statement
  while (consume(';'))
    if (not nextIs(EOL)) statement
  endWhile
  consume_eols

  produceList Statements

- control_structure
  on     "local"       local_declarations: return
  onPeek "localize"    localize:           return
  onPeek "block"       block:              return
  onPeek "contingent"  contingent:         return
  onPeek "forEach"     forEach_loop:       return
  onPeek "if"          if_statement:       return
  onPeek "loop"        loop:               return
  onPeek "which"       which_conditional:  return
  onPeek "while"       while_loop:         return
  onPeek "temporarily" temporarily:        return
  onPeek "try"         try_catch:          return
  onPeek "use"         use:                return
  statement

- optional_args
  if (nextIs('(')) args
  else             createNull

- args
  beginList

  if consume '('
    consume_eols
    if (consume(')')) produceList Args
    consume_eols
    while (hasAnother and not nextHasAttribute(structural))
      arg
      consume_eols
      consume ','
      consume_eols
    endWhile
    mustConsume ')'
  else
    while (hasAnother and not nextHasAttribute(structural) and not nextIs(EOL))
      arg
      if (consume ',') consume_eols
    endWhile
  endIf
  produceList Args

- macro_args
  # Produces a list of TokenLists
  beginList

  mustConsume '<<'
  consume_eols
  if (consume('>>')) produceList Args
  consume_eols

  while (hasAnother and not nextHasAttribute(structural))
    savePosition
    ++disable_output
    macro_arg
    --disable_output
    createTokenList  # consumes saved position
    consume_eols
    consume ','
    consume_eols
  endWhile
  mustConsume '>>'

  produceList

- macro_arg
  while (hasAnother and not nextIs(',') and not nextIs('>>'))
    if (consume('<<'))
      nested_macro_arg_template
      mustConsume('<<')
    elseIf (consume('{'))
      nested_macro_arg_curly_braces
      mustConsume('}')
    elseIf (consume('('))
      nested_macro_arg_parens
      mustConsume(')')
    elseIf (consume('['))
      nested_macro_arg_square_brackets
      mustConsume(']')
    else
      read
    endIf
  endWhile

- nested_macro_arg_template
  while (hasAnother and not nextIs('>>'))
    if (consume('<<'))
      nested_macro_arg_template
      mustConsume('<<')
    elseIf (consume('{'))
      nested_macro_arg_curly_braces
      mustConsume('}')
    elseIf (consume('('))
      nested_macro_arg_parens
      mustConsume(')')
    elseIf (consume('['))
      nested_macro_arg_square_brackets
      mustConsume(']')
    else
      read
    endIf
  endWhile

- nested_macro_arg_curly_braces
  while (hasAnother and not nextIs('}'))
    if (consume('<<'))
      nested_macro_arg_template
      mustConsume('<<')
    elseIf (consume('{'))
      nested_macro_arg_curly_braces
      mustConsume('}')
    elseIf (consume('('))
      nested_macro_arg_parens
      mustConsume(')')
    elseIf (consume('['))
      nested_macro_arg_square_brackets
      mustConsume(']')
    else
      read
    endIf
  endWhile

- nested_macro_arg_parens
  while (hasAnother and not nextIs(')'))
    if (consume('<<'))
      nested_macro_arg_template
      mustConsume('<<')
    elseIf (consume('{'))
      nested_macro_arg_curly_braces
      mustConsume('}')
    elseIf (consume('('))
      nested_macro_arg_parens
      mustConsume(')')
    elseIf (consume('['))
      nested_macro_arg_square_brackets
      mustConsume(']')
    else
      read
    endIf
  endWhile

- nested_macro_arg_square_brackets
  while (hasAnother and not nextIs(']'))
    if (consume('<<'))
      nested_macro_arg_template
      mustConsume('<<')
    elseIf (consume('{'))
      nested_macro_arg_curly_braces
      mustConsume('}')
    elseIf (consume('('))
      nested_macro_arg_parens
      mustConsume(')')
    elseIf (consume('['))
      nested_macro_arg_square_brackets
      mustConsume(']')
    else
      read
    endIf
  endWhile

- arg
  call on_begin_arg # detect use of '$' and '$1' etc. generic fn args
  arg_inner
  call on_end_arg

- arg_inner
  on '&'
    on '!'
      identifier
      if (consume('=')) expression
      else              createNull
      produce NamedArg(name:String,value,zero="true":Logical)
    elseOnOthers
      identifier
      if (consume('=')) expression
      else              createNull
      produce NamedArg(name:String,value)
    endOn
  elseOn "&="
    identifier
    if (consume('=')) expression
    else              createNull
    produce NamedArg(name:String,value,zero="false":Logical,forward="true":Logical)
  endOn
  expression

- statement
  on "assert"
    savePosition
    expression
    createTokenListPreservingStack
    produce Assert(expression,token_list:TokenList)
  endOn
  on "ensure" "<<" expression ">>" args -> Ensure(expression,args:Args)
  on "escapeBlock"                   -> EscapeBlock:Escape
  on "escapeContingent"              -> EscapeContingent:Escape
  on "escapeForEach"                 -> EscapeForEach:Escape
  on "escapeIf"                      -> EscapeIf:Escape
  on "escapeLoop"                    -> EscapeLoop:Escape
  on "escapeTry"                     -> EscapeTry:Escape
  on "escapeWhich"                   -> EscapeWhich:Escape
  on "escapeWhile"                   -> EscapeWhile:Escape
  on "necessary" control_expression  -> Necessary(condition)
  on "nextIteration"                 -> NextIteration
  on "noAction":                        return
  on @"print"   args                 -> Access(name=content,args)
  on @"println" args                 -> Access(name=content,args)
  on "return" optional_expression    -> Return(result)
  on "sufficient" control_expression -> Sufficient(condition)
  on "swapValues" '(' expression ',' expression ')' -> SwapValues(a,b)
  onPeek "trace"
    verbose_trace
    return
  elseOnPeek "@trace"
    brief_trace
    return
  endOn
  on "throw" expression           -> Throw(exception)

  onPeek "nativeHeader"
    native_code_block
    return
  elseOnPeek "nativeCode"
    native_code_block
    return
  endOn

  on "++" expression -> Increment(operand):Stepper
  on "--" expression -> Decrement(operand):Stepper

  expression

  on "++" -> Increment(operand):Stepper
  on "--" -> Decrement(operand):Stepper

  on "=" consume_eols expression -> Assign(target,new_value)

  on "+="     consume_eols expression -> AddAndAssign(target,operand):OpAndAssign
  on "-="     consume_eols expression -> SubtractAndAssign(target,operand):OpAndAssign
  on "*="     consume_eols expression -> MultiplyAndAssign(target,operand):OpAndAssign
  on "/="     consume_eols expression -> DivideAndAssign(target,operand):OpAndAssign
  on "%="     consume_eols expression -> ModAndAssign(target,operand):OpAndAssign
  on "^="     consume_eols expression -> PowerAndAssign(target,operand):OpAndAssign
  on "&="     consume_eols expression -> BitwiseAndAndAssign(target,operand):OpAndAssign
  on "|="     consume_eols expression -> BitwiseOrAndAssign(target,operand):OpAndAssign
  on "~="     consume_eols expression -> BitwiseXorAndAssign(target,operand):OpAndAssign
  on ":<<:="  consume_eols expression -> BitShiftLeftAndAssign(target,operand):OpAndAssign
  on ":>>:="  consume_eols expression -> BitShiftRightAndAssign(target,operand):OpAndAssign
  on ":>>>:=" consume_eols expression -> BitShiftRightXAndAssign(target,operand):OpAndAssign

  on ".="
    consume_eols
    create AccessAndAssignContext(context)
    on '@'
      internal_id
      create ContextDirectAccess(context,name:String)
    elseOnOthers
      procedure_name
      access_args
      create ContextAccess(context,name:String,args)
    endOn
    access_inner  # parse any further accesses
    produce AccessAndAssign(operand)
  endOn

  if (hasAnother and not nextHasAttribute(structural) and not nextIs(EOL))
    args
    call store_statement_args
  endIf

- verbose_trace
  on "trace"
    beginList
    while (not nextIs(EOL))
      savePosition
      expression
      createTokenListPreservingStack
      create TracedExpression(expression,token_list:TokenList)
      consume ','
    endWhile
    createList TracedExpressions
    create VerboseTrace(expressions:TracedExpressions)
  endOn

- brief_trace
  on "@trace"
    beginList
    while (not nextIs(EOL))
      savePosition
      expression
      createTokenListPreservingStack
      create TracedExpression(expression,token_list:TokenList)
      consume ','
    endWhile
    createList TracedExpressions
    create BriefTrace(expressions:TracedExpressions)
  endOn

- local_declarations
  onPeek '(' destructuring_local_declarations: return
  beginList
    consume_eols
    local_declaration
    while (consume(','))
      consume_eols
      local_declaration
    endWhile
  createList
  optional_type

  produce LocalDeclarations( declarations, type:Type )

- local_declaration
  on IDENTIFIER
    optional_parameter_initial_value
    createNull
    produce Local( name=content, initial_value, initial_value_tokens:TokenList, type:Type )
  endOn
  mustConsume IDENTIFIER  # throws error

- localize
  on "localize"
    beginList
      localize_declaration
      while (consume(','))
        localize_declaration
      endWhile
    createList

    createNull
    produce LocalDeclarations( declarations, type:Type )
  endOn

- localize_declaration
  savePosition
  identifier
  createTokenListPreservingStack
  pop initial_value_tokens

  call clone
  createNull
  create Access(name:String,args)
  subclass

  push initial_value_tokens

  createNull
  create Local(name:String,initial_value,initial_value_tokens:TokenList,type:Type)

- destructuring_local_declarations
  on '('
    beginList

    consume_eols
    identifier
    consume_eols
    on ':'
      type
      consume_eols
      create TypedDestructuringLocal(name:String,type:Type)
      while (consume(','))
        consume_eols
        identifier
        consume_eols
        mustConsume ':'
        consume_eols
        type
        consume_eols
        create TypedDestructuringLocal(name:String,type:Type)
      endWhile
      createList TypedDestructuringLocals
      mustConsume ')'
      mustConsume '='
      expression
      produce    TypedDestructuringLocalDeclarations(locals:TypedDestructuringLocals,tuple)
    elseOnOthers
      while (consume(','))
        consume_eols
        identifier
        consume_eols
      endWhile
      createList  Identifiers
      mustConsume ')'
      mustConsume '='
      expression
      produce     UntypedDestructuringLocalDeclarations(locals:Identifiers,tuple)
    endOn
  endOn

- block
  on "block"
    if (consume(EOL))
      createNull  # assignments
    else
      beginList
        block_assignment
        while (consume(','))
          block_assignment
        endWhile
      createList
      must_consume_eols
    endIf
    multi_line_statements
    mustConsume "endBlock"
  endOn
  produce Block(assignments,statements):ControlStructure

- block_assignment
  identifier
  on "="
    expression
    create Assign(target,new_value)
  endOn

- contingent
  on "contingent"
    multi_line_statements
    on "satisfied"
      multi_line_statements
    elseOnOthers
      createNull
    endOn
    on "unsatisfied"
      multi_line_statements
    elseOnOthers
      createNull
    endOn
    mustConsume "endContingent"
    produce Contingent(statements,satisfied_statements,unsatisfied_statements):ControlStructure
  endOn

- loop
  on "loop"
    on EOL
      createNull # loop_count
      multi_line_statements
      mustConsume "endLoop"
    elseOnOthers
      control_expression
      if (consume(EOL)) multi_line_statements; mustConsume "endLoop"
      else              single_line_statements
    endOn
    produce Loop(loop_count,statements)
  endOn

- which_conditional
  on "which"
    control_expression
    must_consume_eols
    beginList
      while (nextIs("case"))
        on "case"
          consume_eols
          beginList
            expression
            while (consume(','))
              consume_eols
              expression
            endWhile
            if (not consume(':')) mustConsume EOL
          createList Args
          scoped_multi_line_statements
          create WhichCase(args,statements)
        endOn
      endWhile
    createList WhichCases
    on "others"
      if (not consume(':')) mustConsume EOL
      scoped_multi_line_statements
    elseOnOthers
      createNull
    endOn
    mustConsume "endWhich"
    produce Which(condition,cases:WhichCases,statements):Conditional
  endOn

- while_loop
  on "while"
    control_expression
    if (consume(EOL)) multi_line_statements; mustConsume "endWhile"
    else              single_line_statements
    produce While(condition,statements)
  endOn

- try_catch
  on "try"
    multi_line_statements
    catches
    mustConsume "endTry"
    produce Try(statements,catches:Catches):ControlStructure
  endOn

- catches
  beginList
    while (nextIs("catch"))
      on "catch"
        if (consume('('))
          catch_clause
          mustConsume ')'
        else
          catch_clause
        endIf
        multi_line_statements
        create Catch(var_name:String,exception_type:Type,statements):ControlStructure
      endOn
    endWhile
  produceList Catches

- catch_clause
  savePosition
  identifier
  if (consume(':'))
    discardPosition
    type
  else
    restorePosition
    createNull
    type
  endIf

- temporarily
  on "temporarily"
    beginList
      temporary_assignment
      while (consume(','))
        consume_eols
        temporary_assignment
      endWhile
    createList TemporaryAssignments
    must_consume_eols
    multi_line_statements
    mustConsume "endTemporarily"
    produce Temporarily(assignments:TemporaryAssignments,statements):ControlStructure
  endOn

- temporary_assignment
  expression
  consume_eols
  on '='
    consume_eols
    expression
    produce TemporaryAssignment(target,new_value)
  endOn
  mustConsume '=' # error

- use
  on "use"
    beginList
      used_resource
      while (consume(','))
        consume_eols
        used_resource
      endWhile
    createList UsedResources
    must_consume_eols
    multi_line_statements
    mustConsume "endUse"
    produce Use(resources:UsedResources,statements):ControlStructure
  endOn

- used_resource
  savePosition
  on IDENTIFIER
    create Identifier(name=content)
    on '='
      expression
      create UsedResource(name:String,resource)
      discardPosition
      return
    endOn
  endOn

  restorePosition
  createNull
  expression
  produce UsedResource(name:String,resource)

  expression

- module_path
  beginList
    identifier
    while (consume('/'))
      identifier
    endWhile
  produceList

- uses_attributes
  beginList
    on '['
      while (hasAnother and not nextIs(']'))
        uses_attribute
        consume ','
      endWhile
      mustConsume(']')
    endOn
  produceList Attributes

- uses_attribute
  on "export"    -> AttributeExport
  if (consume @"noInclude")
    call uses_attribute_no_include
    return
  endIf
  syntaxError "Illegal 'uses' attribute. Expected any of [export noInclude]."

#- import_module_by_path_or_filepath
#  on STRING
#    produce ImportModuleByFilepath(filepath=content)
#  endOn
#
#  beginList
#    identifier
#    while (consume('/'))
#      identifier
#    endWhile
#  createList
#
#  produce ImportModuleByPath(segments)

- access_args
  if (not nextIs('(')) produceNull
  args

- optional_expression
  if (nextIs(EOL) or nextIs(';')) produceNull
  expression

- control_expression
  # Parens are optional but not considered part of the expression. Otherwise
  # 'if (z) .internal_call' would be ambiguous with 'if ((z).internal_call)`.
  if (consume('('))
    consume_eols
    expression
    consume_eols
    mustConsume ')'
  else
    expression
  endIf

- expression
  operand_or

- operand_or [binary]
  on "||" -> OperandOr

- inline_which_expression
  logical_xor

- logical_xor [binary]
  on "xor" -> LogicalXor

- logical_or [binary]
  on "or" -> LogicalOr

- logical_and [binary]
  on "and" -> LogicalAnd

- comparison [binary]
  on "==" -> CompareEQ
  on "!=" -> CompareNE
  on "<"  -> CompareLT
  on ">"  -> CompareGT
  on "<=" -> CompareLE
  on ">=" -> CompareGE
  on "<>" -> CompareOp

- reference_comparison
  range
  on "is"
    if (consume("not"))
      reference_comparison
      produce IsNot(left,right):Binary
    else
      reference_comparison
      produce Is(left,right):Binary
    endIf
  endOn
  on "instanceOf"
    type
    produce InstanceOf(operand,compare_type:Type)
  elseOn "isType"
    type
    produce IsType(operand,compare_type:Type)
  elseOn "not"
    if (consume("instanceOf"))
      type
      produce NotInstanceOf(operand,compare_type:Type)
    elseIf (consume("isType"))
      type
      produce NotIsType(operand,compare_type:Type)
    else
      syntaxError "'instanceOf' or 'isType' expected."
    endIf
  endOn

- range
  bitwise_xor
  on ".."
    expression
    if (consume(@"step")) expression
    else                  createNull
    create CreateRangeUpTo(start,limit,step_size):CreateRange
  elseOn "..<"
    expression
    if (consume(@"step")) expression
    else                  createNull
    create CreateRangeUpToLessThan(start,limit,step_size):CreateRange
  elseOn "..>"
    expression
    if (consume(@"step")) expression
    else                  createNull
    create CreateRangeDownToGreaterThan(start,limit,step_size):CreateRange
  elseOn "downTo"
    expression
    if (consume(@"step")) expression
    else                  createNull
    create CreateRangeDownTo(start,limit,step_size):CreateRange
  endOn

- bitwise_xor [binary]
  on '~' -> BitwiseXor

- bitwise_or  [binary]
  on '|' -> BitwiseOr

- bitwise_and [binary]
  on '&' -> BitwiseAnd

- add_subtract [binary]
  on "+" -> Add
  on "-" -> Subtract

- bitwise_shift [binary]
  on ":<<:"  -> BitShiftLeft
  on ":>>:"  -> BitShiftRight
  on ":>>>:" -> BitShiftRightX

- multiply_divide_mod [binary]
  on "*" -> Multiply
  on "/" -> Divide
  on "%" -> Mod

- power [binary]
  on "^" -> Power

- pre_unary [preUnary]
  on "!"   -> BitwiseNot
  on "not" -> LogicalNot
  on "-"   -> Negate
  on "%"   -> Describe

- post_unary [postUnary]
  on '?'   -> Logicalize
  if (nextIs('('))
    args
    create_InvokeContext
    access_inner
    return
  endIf

- access
  term
  access_inner

- access_inner
  on '.'
    consume_eols
    if (consume('['))
      context_block
      access_inner
    else
      member_access
      access_inner
    endIf
  elseOn "?."
    consume_eols
    create ConditionalContext(context)
    duplicate
    member_access
    create ConditionalAccess(context:ConditionalContext,access)
    access_inner
  elseOn "->"
    if (nextIs('('))
      savePosition
      consume '('
      on @"as"
        discardPosition
        type
        mustConsume ')'
        create As(operand,as_type:Type)
        access_inner
        return
      elseOnOthers
        restorePosition
      endOn
    else
      consume_eols
    endIf

    type
    if (nextIs('('))
      args
      create ConvertToTypeWithArgs( operand, to_type:Type, args )
    else
      create ConvertToType(operand,to_type:Type)
    endIf
    access_inner
  elseOn "?->"
    create ConditionalContext(context)
    duplicate
    if (nextIs('('))
      savePosition
      consume '('
      on @"as"
        syntaxError "'as' allows null context; no conditional access is required (write 'context->(as Type)' instead of 'context?->(as Type)')."
      elseOnOthers
        restorePosition
      endOn
    else
      consume_eols
    endIf

    type
    if (nextIs('('))
      args
      create ConvertToTypeWithArgs( operand, to_type:Type, args )
    else
      create ConvertToType(operand,to_type:Type)
    endIf
    create ConditionalAccess(context:ConditionalContext,access)
    access_inner
  elseOn '['
    consume_eols
    savePosition
    expression
    consume_eols
    if (consume(']'))
      discardPosition
      create IndexedAccess(context,index)
    else
      restorePosition
      beginList
      expression
      consume_eols
      while (not consume(']'))
        consume(',')
        consume_eols
        expression
        consume_eols
      endWhile
      createList
      create ListIndexedAccess(context,args)
    endIf
    access_inner
  elseOn '?['
    consume_eols
    create ConditionalContext(context)
    duplicate
    savePosition
    expression
    consume_eols
    if (consume(']'))
      discardPosition
      create IndexedAccess(context,index)
    else
      restorePosition
      beginList
      expression
      consume_eols
      while (not consume(']'))
        consume(',')
        consume_eols
        expression
        consume_eols
      endWhile
      createList
      create ListIndexedAccess(context,args)
    endIf
    create ConditionalAccess(context:ConditionalContext,access)
    access_inner
  elseOn "//"
    consume_eols
    on IDENTIFIER
      create LiteralString(value=content):Literal
    elseOnOthers
      identifier # throws an error
    endOn
    create IndexedAccess(context,index)
    access_inner
  elseOn "?//"
    create ConditionalContext(context)
    duplicate
    consume_eols
    on IDENTIFIER
      create LiteralString(value=content):Literal
    elseOnOthers
      identifier # throws an error
    endOn
    create IndexedAccess(context,index)
    create ConditionalAccess(context:ConditionalContext,access)
    access_inner
  elseOn ".["
    context_block
  elseOn "?.["
    conditional_context_block
  elseOn "=>"
    consume_eols
    identifier
    if (nextIs('(')) function_param_types
    else             createNull
    produce CallbackFunction(context,name:String,param_types:TypeList)
  elseOn "[>"
    consume_eols
    beginList
      expression
    createList Args
    consume_eols
    mustConsume ']'
    produce ContextAccess(context,name="set_state":String,args)
  endOn

- context_block
    consume_eols
    if (consume(']'))
      access_inner
      return
    endIf
    beginList
      context_block_command
      consume_eols
      while (consume(',') or (hasAnother and not nextIs(']')))
        context_block_command
        consume_eols
      endWhile
      mustConsume ']'
    createList
    create ContextBlock(context,commands)
    access_inner

- conditional_context_block
  consume_eols
  if (consume(']'))
    access_inner
    return
  endIf
  create ConditionalContext(context)
  duplicate
  beginList
    context_block_command
    consume_eols
    while (consume(',') or (hasAnother and not nextIs(']')))
      context_block_command
      consume_eols
    endWhile
    mustConsume ']'
  createList
  create ContextBlock(context,commands)
  create ConditionalAccess(context:ConditionalContext,access)
  access_inner

- member_access
  on '@'
    internal_id
    create ContextDirectAccess(context,name:String)
  elseOnOthers
    procedure_name
    if (nextIs("<<"))
      template_args
      access_args
      create TemplatedMethodContextAccess(context,name:String,type_args:TemplateArgs,args)
    else
      access_args
      create ContextAccess(context,name:String,args)
    endIf
  endOn

- context_block_command
  create ContextBlockContext
  procedure_name
  access_args
  create ContextAccess(context,name:String,args)
  access_inner
  on "=" expression -> Assign(target,new_value)

- term
  on STRING
    create LiteralString(value=content):Literal
    while (nextIs(STRING))
      on STRING
        create LiteralString(value=content):Literal
        call join_strings
      endOn
    endWhile
    if (nextIs('('))
      args
      produce FormattedString(format:String,args)
    endIf
    return
  endOn
  on INTEGER        -> LiteralInteger(content=content:String,base="10":Integer):LiteralPrimitive
  on HEX_INTEGER    -> LiteralInteger(content=content:String,base="16":Integer):LiteralPrimitive
  on BINARY_INTEGER -> LiteralInteger(content=content:String,base="2":Integer):LiteralPrimitive
  on OCTAL_INTEGER  -> LiteralInteger(content=content:String,base="8":Integer):LiteralPrimitive
  on REAL_NUMBER    -> LiteralRealNumber(value=content:String):LiteralPrimitive
  on CHARACTER      -> LiteralCharacter(value=content:Character):LiteralPrimitive
  on '@'
    pathed_name
    produce DirectAccess( name:String )
  endOn

  onPeek @"operator"
    procedure_name
    access_args
    produce Access( name:String, args )

  elseOnOthers
    next_is_internal_id = false
    if (nextIs('.'))
      savePosition
      consume('.')
      next_is_internal_id = nextIs(IDENTIFIER)
      restorePosition
    endIf

    if (nextIs(IDENTIFIER) or next_is_internal_id)
      if (next_is_internal_id)
        consume '.'
        create Identifier( name="." )
        identifier
        call join_identifiers
      else
        pathed_name
      endIf

      if (nextIs("<<"))
        remaining_template_access
        return
      elseIf (nextIs("[]"))
        remaining_type
        type_access_or_typed_literal_list
        return
      elseIf (nextIs('?'))
        on '?'
          if (nextIs('(') or nextIs('?') or nextIs("[]"))
            # Optional type constructor / optional type / optional list type
            createNull
            create Type(name:String,type_args:TemplateArgs)
            create Type(core_type:Type,optional="true":Logical)
            list_or_optional_type
            type_access_or_typed_literal_list
            return
          else
            # Logicalize
            createNull
            create Access( name:String, args )
            produce Logicalize(operand):Unary
          endIf
        endOn
      else
        access_args
        create Access( name:String, args )
        subclass
        return
      endIf
    endIf
  endOn
  onPeek PLACEHOLDER
    id_or_type
    access_args
    create Access( name:String, args )
    subclass
    return
  endOn
  on "true"               -> LiteralLogical(value="true":Logical):LiteralPrimitive
  on "false"              -> LiteralLogical(value="false":Logical):LiteralPrimitive
  on "null"               -> LiteralNull:Literal
  on "pi"                 -> LiteralPi:Literal

  on "prior"
    if (consume("<<")) type; mustConsume '>>'
    else               createNull

    mustConsume '.'
    identifier
    if (nextIs("<<"))
      template_args
      if (nextIs('(')) access_args
      else             createNull
      create CallPriorTemplatedMethod( type_context:Type, name:String, template_args:TemplateArgs, args:Args )
      access_inner
    else
      if (nextIs('(')) access_args
      else             createNull
      create CallPriorMethod( type_context:Type, name:String, args:Args )
      access_inner
    endIf
    return
  endOn

  on "this"
    create This
    if (nextIs('('))
      create Identifier(name="call")
      args
      produce ContextAccess(context,name:String,args)
    endIf
    return
  endOn
  onPeek "which" inline_which: return

  # '(Function...)' type
  onPeek '('
    savePosition
    on '('
      on "Function"
        restorePosition  # back to '(Function...'
        type             # parse '(Function(...)->...)'
        list_or_optional_type
        access_args
        produce TypeAccess(of_type:Type,args)
      endOn
    endOn
    restorePosition
  endOn

  # Parenthesized expression, tuple, or generic function definition
  onPeek '('
    savePosition
    on '('
      consume_eols
      on ')'
        # No-params generic function
        discardPosition
        beginList   # empty args
        createList IDList
        remaining_generic_function_definition
        return
      elseOnOthers
        expression
        consume_eols
        if (nextIs(':'))
          restorePosition
          named_tuple_or_tuple_type
          return
        endIf
        if (consume(')'))
          if (not (nextIs("with") or nextIs("=>")))
            # good to go as expression grouping
            discardPosition
            return
          endIf
        endIf
        restorePosition

        savePosition
        anonymous_tuple_or_tuple_type
        if (not (nextIs("=>") or nextIs("with")))
          discardPosition  # confirmed anonymous_tuple
          return
        endIf
        restorePosition

        # Generic function
        consume '('
        consume_eols
        beginList
          identifier
          consume_eols
          while (consume(","))
            identifier
            consume_eols
          endWhile
          mustConsume ')'
        createList IDList
        remaining_generic_function_definition
        return
      endOn
    endOn
  endOn

  onPeek '['
    savePosition
    consume '['
    consume_eols
    expression
    if (nextIs(':'))
      restorePosition
      type  # [Key:Variant] table
      call use_Table
      if (nextIs('{'))
        literal_table
        create TypedLiteralTable( of_type:Type, table:KeyValuePairList )
      else
        access_args
        create TypeAccess( of_type:Type, args )
      endIf
      return
    else
      restorePosition
      literal_list
      return
    endIf
  endOn

  onPeek '{'
    literal_table
    return
  endOn

  on "[]"
    beginList
    produceList LiteralList
  endOn

  onPeek "forEach"
    inline_forEach
    return
  endOn

  on "undefined"
    call use_Variant
    produce LiteralUndefined
  endOn

  onPeek "function" function_definition: return

  on "[>"
    beginList
      expression
    createList Args
    mustConsume ']'
    produce Access(name="set_state":String,args)
  endOn

  on "native"
    native_code
    return
  endOn

  on "@["
    variant_list
    return
  endOn

  on "@{"
    variant_table
    return
  endOn

  on '$'
    call on_generic_fn_arg
    produce GenericFnArg  # token will contain necessary info
  elseOn GENERIC_FN_ARG
    call on_generic_fn_arg
    produce GenericFnArg
  endOn

  on "$defaultValue" "<<" type ">>"               -> DefaultValue(of_type:Type)

  on "ThisType"
    create Type(name="ThisType":String)
    produce TypeContext(type:Type)
  endOn

  onPeek "Function"
    type
    optional_args
    produce TypeAccess(of_type:Type,args)
  endOn

  on "<<"
    type
    mustConsume ">>"
    produce GetTypeInfo(of_type:Type)
  endOn

  on "new" "<<" expression ">>" args -> New(type_expression,args:Args)

  on "$isCompound"  "<<" type ">>" -> IsCompound(operand)
  on "$isEnum"      "<<" type ">>" -> IsEnum(operand)
  on "$isPrimitive" "<<" type ">>" -> IsPrimitive(operand)
  on "$isReference" "<<" type ">>" -> IsReference(operand)

  on "$fileBytes"
    mustConsume '('
    string
    mustConsume ')'
    call filename_to_file_bytes
    return

  elseOn "$fileString"
    mustConsume '('
    string
    mustConsume ')'
    call filename_to_file_string
    return

  elseOn "$exists"
    mustConsume '<<'
    expression
    create CommandExists( command )
    mustConsume '>>'
    return
  endOn

  syntaxError

- create_InvokeContext
  produce InvokeContext( context, args )

- variant_expression
  on '{' variant_table: return
  on '[' variant_list:  return
  on "[]" -> EmptyVariantList
  expression

- variant_list
  call use_Variant
  consume_eols
  if (consume(']')) produce EmptyVariantList

  beginList
    variant_expression
    consume_eols
    while (consume(',') or not nextIs(']'))
      consume_eols
      variant_expression
      consume_eols
    endWhile
    mustConsume ']'
  createList Args

  produce VariantList(args)

- variant_table
  call use_Variant
  consume_eols
  if (consume('}')) produce EmptyVariantTable

  beginList
    variant_key_value_pair
    consume_eols
    while (consume(',') or not nextIs('}'))
      variant_key_value_pair
    endWhile
    mustConsume '}'
  createList KeyValuePairList

  produce VariantTable(args:KeyValuePairList)

- variant_key_value_pair
  consume_eols

  if (consume(':'))
    # { :id } -> { "id":id }
    on IDENTIFIER
      create LiteralString(name=content)
      createNull
      create Access(name=content,args)
    elseOn STRING
      create LiteralString(name=content)
      call clone
    elseOnOthers
      syntaxError "Identifier or literal string expected."
    endOn
  else
    on IDENTIFIER
      # { id:value } -> { "id":value }
      create LiteralString(name=content)
    elseOnOthers
      variant_expression
    endOn
    consume_eols

    mustConsume ':'
    consume_eols

    variant_expression
  endIf

  create KeyValuePair(key,value)
  consume_eols

- type_access_or_typed_literal_list
  if (nextIs('['))
    remaining_typed_literal_list
  else
    access_args
    create TypeAccess( of_type:Type, args )
    subclass
  endIf

- anonymous_tuple_or_tuple_type
  savePosition
  anonymous_tuple
  if (nextIs("[]") or nextIs('?'))
    # Tuple list type or optional tuple type
    restorePosition
    type
    type_access_or_typed_literal_list
  else
    # Name tuple instance
    discardPosition
  endIf

- anonymous_tuple
  # (x,y,...)
  consume '('
  beginList
    consume_eols
    expression
    consume_eols
    while (consume(','))
      consume_eols
      expression
      consume_eols
    endWhile
    mustConsume ')'
  createList AnonymousTuple

- named_tuple_or_tuple_type
  savePosition
  named_tuple
  if (nextIs("[]") or nextIs('?'))
    # Tuple list type or optional tuple type
    restorePosition
    type
    type_access_or_typed_literal_list
  else
    # Name tuple instance
    discardPosition
  endIf

- named_tuple
  # (a:x,b:y,...)
  consume '('
  beginList
    named_tuple_element
    while (consume(','))
      named_tuple_element
    endWhile
    mustConsume ')'
  createList NamedTuple

- named_tuple_element
  consume_eols
  identifier
  consume_eols
  mustConsume ':'
  consume_eols
  expression
  consume_eols
  produce NamedTupleElement(name:String,value)

- remaining_generic_function_definition
  onPeek "with"
    with_values
  elseOnOthers
    createNull
  endOn
  mustConsume "=>"
  single_line_statements
  produce GenericFunctionDefinition(parameters:IDList,with_values:WithValues,statements)

- native_code
  if consume("(")
    string
    mustConsume ")"
  else
    consume_eols
    string
  endIf
  if consume("->")
    if consume @"LiteralInt32"
      produce NativeLiteralInt32(content:String):NativeExpression
    else
      type
      produce NativeExpression(content:String,result_type:Type)
    endIf
  else
    produce NativeStatement(content:String)
  endIf


- literal_list
  on '['
    beginList
    consume_eols
    if (consume(']')) produceList LiteralList
    expression
    consume_eols
    while (not nextIs(']'))
      if (consume(',')) consume_eols
      expression
      consume_eols
    endWhile
    mustConsume( ']' )
    produceList LiteralList
  endOn

- remaining_typed_literal_list
  # a Type is on the stack
  literal_list
  produce TypedLiteralList(of_type:Type,list)

- literal_table
  on '{'
    beginList
    consume_eols
    if (consume('}')) produceList KeyValuePairList
    literal_table_entry
    consume_eols
    while (not nextIs('}'))
      if (consume(',')) consume_eols
      literal_table_entry
      consume_eols
    endWhile
    mustConsume( '}' )
    produceList KeyValuePairList
  endOn

- literal_table_entry
  on IDENTIFIER
    create LiteralString(value=content):Literal
  elseOnOthers
    expression
  endOn

  mustConsume ':'

  expression
  produce KeyValuePair(key,value)

- preprocess
  while (hasAnother)
    process_another
  endWhile
  produceNull

- process_another
  on "$api"
    savePosition
    while (hasAnother and not nextIs(EOL)) read
    call store_api_pattern
    must_consume_eols
    return

  elseOn "$define"
    call mark_token
    on IDENTIFIER
      buffer = ""
      call collect_token_string
      while (hasAnother and not nextIs(EOL))
        call collect_next_token
      endWhile
      call create_definition
    elseOnOthers
      syntaxError "Identifier expected."
    endOn

  elseOn "$id"
    call begin_join_ids
      mustConsume '('
      process_another
      while (consume(',') or not nextIs(')'))
        process_another
      endWhile
      mustConsume ')'
    call end_join_ids
    return

#{
  elseOn "$if"
    meta_if
    return
}#

  elseOn "$include"
    collect_meta_filepath
    include_attribute_api      = false
    include_attribute_folder   = false
    include_attribute_optional = false
    include_attributes
    call include_filepath
    return

  elseOn "$includeFolder"
    collect_meta_filepath
    include_attribute_api      = false
    include_attribute_folder   = true
    include_attribute_optional = false
    include_attributes
    call include_filepath
    return

  elseOn "$isDefined"
    mustConsume '('
    on IDENTIFIER
      call on_is_defined
    elseOnOthers
      syntaxError "Identifier expected."
    endOn
    mustConsume ')'
    return

  elseOn "$localDefine"
    call mark_token
    on IDENTIFIER
      buffer = ""
      call collect_token_string
      while (hasAnother and not nextIs(EOL))
        call collect_next_token
      endWhile
      call create_local_definition
    elseOnOthers
      syntaxError "Identifier expected."
    endOn

  elseOn "$localMacro"
    identifier   # macro name

    # placeholders
    mustConsume '<<'
    beginList
      placeholder
      while (consume(','))
        placeholder
      endWhile
    createList Placeholders
    mustConsume '>>'

    if (nextIs(EOL))
      consume_eols
      savePosition
      while (hasAnother and not nextIs("$endLocalMacro"))
        read
      endWhile
      createTokenList # consumes saved position
      mustConsume "$endLocalMacro"
    else
      savePosition
      while (hasAnother and not nextIs(EOL))
        read
      endWhile
      createTokenList # consumes saved position
      consume_eols
    endIf

    call define_macro
    return

  elseOn "$lowercase"
    call begin_join_lowercase
      mustConsume '('
      process_another
      while (consume(',') or not nextIs(')'))
        process_another
      endWhile
      mustConsume ')'
    call end_join_lowercase
    return

  elseOn "$macro"
    identifier   # macro name

    # placeholders
    mustConsume '<<'
    beginList
      placeholder
      while (consume(','))
        placeholder
      endWhile
    createList Placeholders
    mustConsume '>>'

    if (nextIs(EOL))
      consume_eols
      savePosition
      while (hasAnother and not nextIs("$endMacro"))
        read
      endWhile
      createTokenList # consumes saved position
      mustConsume "$endMacro"
    else
      savePosition
      while (hasAnother and not nextIs(EOL))
        read
      endWhile
      createTokenList # consumes saved position
      consume_eols
    endIf

    call define_macro
    return

  elseOn "module"
    savePosition
    call parse_module_id # adjusts Program.current_module
    restorePosition
    call rewrite_cur_token
    return

  elseOn "$requireRogue"
    on STRING
      call require_rogue_version
      return
    elseOnOthers
      syntaxError "Expected a literal string containing a version number."
    endOn

  elseOn "$rogueVersion"
    call create_rogue_version_string
    return

  elseOn "$sourceFilepath"
    call create_source_filepath
    return

  elseOn "$sourceLine"
    call create_source_line
    return

  elseOn "$target"
    on '('
      call check_target
      mustConsume ')'
    elseOnOthers
      call check_target
    endOn
    return

  elseOn "$thisModule"
    call write_this_module_id
    return

  elseOn "$string"
    call begin_join_strings
      mustConsume '('
      process_another
      while (consume(',') or not nextIs(')'))
        process_another
      endWhile
      mustConsume ')'
    call end_join_strings
    return

  elseOn "$uppercase"
    call begin_join_uppercase
      mustConsume '('
      process_another
      while (consume(',') or not nextIs(')'))
        process_another
      endWhile
      mustConsume ')'
    call end_join_uppercase
    return

  elseOn "uses"
    call rewrite_cur_token
    collect_meta_filepath
    savePosition
    uses_attributes
    restorePosition
    call uses_filepath # uses XYZ -> $include XYZ/XYZ.rogue
    return

  elseOn IDENTIFIER
    call insert_definition
    return

  endOn
  call rewrite_token

- include_attributes
  on '['
    while (hasAnother and not nextIs(']'))
      include_attribute
      consume ','
    endWhile
    mustConsume(']')
  endOn

- include_attribute
  on @"api"
    include_attribute_api = true
    return
  endOn
  on @"folder"
    include_attribute_folder = true
    return
  endOn
  on @"optional"
    include_attribute_optional = true
    return
  endOn
  syntaxError "Illegal $include attribute. Expected one or more of [api folder optional]."

#{
- meta_if
  meta_expression
  meta_condition = false         # declares meta_condition
  call evaluate_meta_expression  # sets meta_condition to true or false

  if (meta_condition)
    # Keep tokens
    if (consume(EOL))
      # Multi-line
      keep_multiline_tokens

      on "$elseIf"
        discard_multiline_tokens

- keep_multiline_tokens
  while (hasAnother and not nextIs("$elseIf") and not nextIs("$endIf"))
    on "$if"
      meta_if
    elseOnOthers
      # Keep these tokens
      call rewrite_token
    endOn
  endWhile

- discard_multiline_tokens
  while (hasAnother and not nextIs("$elseIf") and not nextIs("$endIf"))
    on "$if"
      ++disable_output
      meta_expression
    elseOnOthers
      # Keep these tokens
      call rewrite_token
    endOn
  endWhile
}#


#{
  if (consume(EOL))
    # Multi-line 'if'
    scoped_multi_line_statements
    if_statement_multi_line_elseIf_else
    mustConsume "endIf"
  else
    # Single-line 'if'
    scoped_single_line_statements
    if_statement_single_line_elseIf_else
  endIf
  produce If(condition,statements,cmd_else):Conditional
}#

- meta_expression
  meta_term

- meta_term
  on "true"  -> LiteralLogical(value="true":Logical):LiteralPrimitive
  on "false" -> LiteralLogical(value="false":Logical):LiteralPrimitive
  on '(' meta_expression ')': return
  syntaxError "Invalid metacondition."

- collect_meta_filepath
  call mark_token
  buffer = ""
  on STRING
    call collect_token_string
  elseOnOthers
    while (hasAnother and not nextIs('[') and not nextIs(EOL))
      on IDENTIFIER:      call collect_token_string
      elseOn INTEGER:     call collect_token_string
      elseOn REAL_NUMBER: call collect_token_string
      elseOn '~':         call collect_token_string
      elseOn '/':         call collect_token_string
      elseOn ':':         call collect_token_string
      elseOn '.':         call collect_token_string
      elseOn '\\':        call collect_token_string
      elseOnOthers:       syntaxError "Unsupported filepath character. Put the filepath in quotes."
    endWhile
  endOn

- additional_node_types
  create CallDynamicMethod(context,args):CallProcedure
  create CallGlobalMethod(args):CallProcedure
  create CallMethodPointer(pointer,param_types:TypeList,args,return_type:Type)
  create CallProcedure(args)
  create CallStaticMethod(context,args):CallProcedure
  create CallThisDynamicMethod(args):CallProcedure
  create CallThisStaticMethod(args):CallProcedure
  create CallVirtualMethod(context,args):CallProcedure
  create CallThisVirtualMethod(args):CallProcedure
  create CleanupBlock(statements,cleanup):ControlStructure
  create Compare(left,right):Binary
  create Conditional(condition,statements):ControlStructure
  create ControlStructure(statements)
  create Convert(operand)
  create ConvertToByte(operand):Convert
  create ConvertToCharacter(operand):Convert
  create ConvertToInt32(operand):Convert
  create ConvertToInt(operand):Convert
  create ConvertToInt64(operand):Convert
  create ConvertToLogical(operand):Convert
  create ConvertToReal32(operand):Convert
  create ConvertToReal(operand):Convert
  create ConvertToReal64(operand):Convert
  create CreateObject(of_type:Type,args)
  create CreateObject(of_type:Type,info:Local)
  create CreateCompound(of_type:Type,args:Args)
  create DefaultArg(operand):Unary
  #create DefaultValueOfCmdType(cmd)
  create DummyInitialValue
  create ExplicitCast(operand,to_type:Type)
  create EnumValue(of_type:Type,name:String)
  create EnumValueDef(value)
  create EmptyCompound(of_type:Type)
  create Escape
  create ForEachControl(name:String,optional_at:ForEachAt,collection:ForEachCollection)
  create FunctionReturnValue(operand)
  create InlineAssignment(info:Local,value)
  create IntrospectionGetObjectProperty(info:Property,context)
  create Iterator(control,condition,statements,upkeep):Conditional
  create GetGlobalProperty(info:Property)
  create GetLocal(info:Local)
  create GetProperty(context,info:Property)
  create GetThisProperty(info:Property)
  create GetSingleton(type:Type)
  create Literal
  create LiteralNullOptional(optional_type:Type):Literal
  create LiteralPrimitive:Literal
  create LiteralInt(value:Integer):LiteralInteger
  create LiteralInt32(value:Integer):LiteralInteger
  create LiteralInt64(value:Integer):LiteralInteger
  create LiteralReal(value:Real):LiteralPrimitive
  create LiteralReal32(value:Real):LiteralPrimitive
  create LiteralReal64(value:Real):LiteralPrimitive
  create LocalDeclaration(info:Local)
  create Logicalized(operand):Unary
  create OpAndAssign(target,operand)
  create PreDecrementLocal(info:Local)  # Internal use
  create Procedure(name:String,parameters:Parameters,return_type:Type,attributes:Attributes,doc=`null`,body:LocalScope)
  create PushStackTraceCutoff
  create CreateRange(start,limit,step_size)
  create ReturnOnException
  create SetGlobalProperty(info:Property,new_value)
  create SetLocal(info:Local,new_value)
  create SetProperty(context,info:Property,new_value)
  create SetSingleton(of_type:Type,new_value)
  create SetThisProperty(info:Property,new_value)
  create Stepper(operand)
  create Switch(condition,cases:WhichCases,statements):Conditional
  create TypeContext(type:Type)
  create TypeIndex(of_type:Type)
  create WideningCast(operand,to_type:Type)

  create ResolvedOpAndAssignLocal(info:Local,operand)
  create ResolvedOpAndAssignProperty(info:Property,operand)
  create AddAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create AddAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create AddAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create AddAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create SubtractAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create SubtractAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create SubtractAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create SubtractAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create MultiplyAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create MultiplyAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create MultiplyAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create MultiplyAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create DivideAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create DivideAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create DivideAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create DivideAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseAndAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseAndAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create BitwiseAndAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseAndAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseOrAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseOrAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create BitwiseOrAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseOrAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseXorAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseXorAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create BitwiseXorAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create BitwiseXorAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftLeftAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftLeftAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create BitShiftLeftAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftLeftAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftRightXAndAssignGlobalProperty(info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftRightXAndAssignLocal(info:Local,operand):ResolvedOpAndAssignLocal
  create BitShiftRightXAndAssignProperty(context,info:Property,operand):ResolvedOpAndAssignProperty
  create BitShiftRightXAndAssignThisProperty(info:Property,operand):ResolvedOpAndAssignProperty

  create DecrementGlobalProperty(info:Property)
  create DecrementLocal(info:Local)
  create DecrementProperty(context,info:Property)
  create DecrementThisProperty(info:Property)
  create IncrementGlobalProperty(info:Property)
  create IncrementLocal(info:Local)
  create IncrementProperty(context,info:Property)
  create IncrementThisProperty(info:Property)

--------------------------------------------------------------------------------
nativeTypes
--------------------------------------------------------------------------------
