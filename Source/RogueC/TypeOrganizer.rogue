library RogueC

class TypeOrganizer : Visitor
  METHODS
    method init( this_library )

    method visit( this_type, class_def:Cmd )
      # Called when instantiating a template
      visit( class_def )

    method on_visit_node( cmd:Category )
      if (not this_type.is_enum)
        throw cmd.t.error( "Only enums can have a CATEGORIES section." )
      endIf

      ensure<<this_type.categories>>
      this_type.categories.add( cmd )

    method on_visit_node( cmd:Class )
      cmd.attributes.flags |= this_type.attributes.flags
      this_type.attributes = cmd.attributes
      if (not this_type.is_primitive and not this_type.is_compound and not this_type.is_aspect)
        this_type.attributes.is_object = true
      endIf

      forEach (base_type in cmd.base_types)
        base_type.ensure_definition
        base_type.organize_type

        if (base_type.instance_of(this_type) and this_type is not Program.type_Object)
          throw cmd.base_types.t.error( "Circular class extension - $ already extends $." (base_type,this_type) )
        endIf

        if (base_type.is_primitive)
          throw cmd.base_types.t.error( "Primitive $ cannot be extended."(base_type) )
        elseIf (base_type.is_compound)
          throw cmd.base_types.t.error( "Compound $ cannot be extended."(base_type) )
        elseIf (base_type.is_object)
          if (this_type.base_class and this_type.base_class is not base_type)
            throw cmd.base_types.t.error(
              "Class $ cannot extend both $ and $. Only one base class is allowed."...
              (this_type.name,this_type.base_class,base_type)
            )
          endIf
          if (not this_type.is_object)
            throw cmd.base_types.t.error( "Compounds, aspects, and primitives cannot extend objects." )
          endIf
          this_type.base_class = base_type
        else
          # base_type.is_aspect
          ensure<<this_type.aspects>>
          this_type.aspects.add( base_type )
        endIf
      endForEach

      visit_children( cmd )

    method on_visit( cmd:Access )->Cmd
      visit_children( cmd )

      # Convert to TypeAccess if possible.
      local (lib,name) = this_library.split_library_and_type( cmd.t, cmd.name )
      if (not lib) lib = this_library

      local type = lib.find_type( cmd.t, name, &extended_search )
      if (type) return TypeAccess( cmd.t, type, cmd.args )
      return cmd

    method on_visit( cmd:Definition )->Cmd
      assert this_type
      if (this_type.definitions.contains(cmd.name))
        throw cmd.t.error( "'$.$' is already defined."(this_type,cmd.name) )
      endIf
      this_type.definitions[ cmd.name ] = cmd.value
      return null

    method on_visit( cmd:NativeCode )->Cmd
      this_type.native_code.add( cmd )
      return null

    method on_visit( cmd:NativeHeader )->Cmd
      this_type.native_header.add( cmd )
      return null

    method on_visit( cmd:StateDef )->Cmd
      if (this_type.definitions.contains(cmd.name))
        throw cmd.t.error( "Multiple definitions of '$' in type $."(cmd.name,this_type) )
      endIf
      this_type.definitions[cmd.name] = LiteralInt32( cmd.t, this_type.states.count )
      this_type.states.add( cmd )
      return null

    method on_visit_node( cmd:TemplatedAccess )
      assert this_library
      cmd.library_context = this_library
      cmd.type_context = this_type
      visit_children( cmd )

endClass
