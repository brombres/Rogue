library RogueC

class ExceptionAnalyzer : InspectionVisitor
  PROPERTIES
    is_modified   = true
    control_stack = ControlStructure[]

  METHODS
    method apply
      while (is_modified)
        is_modified = false
        Program.apply( this )
      endWhile

    method back_propagate_thrown_exception( type:Type )
      forEach (control_structure in control_stack step -1)
        if (control_structure.catches_exception(type)) return
        if (control_structure.requires_cleanup)
          if (not control_structure.catches_escape) is_modified = true
          if (not control_structure.exception_passthrough) is_modified = true
          control_structure.catches_escape = true
          control_structure.exception_passthrough = true
        endIf
      endForEach

      # Never caught
      if (not this_procedure.throws.contains(type))
        is_modified = true
        this_procedure.throws |= type
      endIf

    method back_propagate_thrown_exception( types:ExceptionTypes )
      use exception_types = WorkList<<Type>>
        types.collect_types( exception_types )
        back_propagate_thrown_exception( forEach in exception_types )
      endUse

    method propagate_exceptions_among_dynamic_methods( reference_m:Procedure )
      local group = Program.dynamic_methods[reference_m.dynamic_signature].methods
      if (not group) return

      local throws : ExceptionTypes
      throws |= (forEach in group).throws
      (forEach in group).throws = throws
      reference_m.throws = throws

    method on_visit_node( cmd:CallProcedure )
      if (cmd.info.throws)
        back_propagate_thrown_exception( cmd.info.throws )
      endIf

    method on_visit_node( cmd:CallDynamicMethod )
      propagate_exceptions_among_dynamic_methods( cmd.info )
      on_visit_node( cmd->(as CallProcedure) )

    method on_visit( cmd:CleanupBlock )->Logical
      control_stack.add( cmd )
      visit( cmd.statements )
      control_stack.remove_last
      visit( cmd.cleanup )
      return false

    method on_visit( cmd:ControlStructure )->Logical
      control_stack.add( cmd )
      visit_children( cmd )
      control_stack.remove_last
      return false

    method on_visit_node( cmd:CallThisDynamicMethod )
      propagate_exceptions_among_dynamic_methods( cmd.info )
      on_visit_node( cmd->(as CallProcedure) )

    method on_visit_node( cmd:CreateObject )
      if (cmd.m_init and cmd.m_init.throws?)
        back_propagate_thrown_exception( cmd.m_init.throws )
      endIf

    method on_visit_node( cmd:Throw )
      if (cmd.is_analyzed) return
      cmd.is_analyzed = true
      back_propagate_thrown_exception( cmd.exception.type )

    method on_visit( cmd:Try )->Logical
      control_stack.add( cmd )
      visit( cmd.statements )
      control_stack.remove_last
      visit( cmd.catches )
      return false

endClass
