library RogueC

class Library
  PROPERTIES
    t    : Token
    name : String

    used_libraries      = UsedLibrary[]
    implicit_context  = Type[]
    global_statements : Statements
    templates         = [String:Template]
    augments          = [String:String[]]
    next_augment_id   = 0

    types             = [String:Type]
    type_arg_lookup   = [String:Type]
    m_on_launch       : GlobalMethod

    attributes        : Attributes

    native_headers = NativeHeader[]
    native_code    = NativeCode[]

    is_organized   : Logical

  METHODS
    method init( t, name )
      attributes = Attributes(t)
      Program.libraries[ name ] = this
      ensure<<global_statements>>(t)

      if (name != "Rogue")
        uses_library( Program.default_library )
      endIf

      # Each library gets a Routine class to store routines as GLOBAL METHODS.
      local tokens = Token[]
      tokens.add( t.cloned(TokenType.EOL,"") )
      tokens.add( t.cloned(TokenType.KEYWORD_END_CLASS) )
      local new_template = Template( t, this, "Routine", &placeholders=Token[], tokens, Attribute.OBJECT )
      templates["Routine<<0>>"] = new_template

    method collect_used_libraries
      # Ensure we have a flat list of all libraries we should search for types in.
      temporarily attributes.is_visiting = true
        forEach (used_m in used_libraries)
          used_m.m.collect_exported_libraries( this )
        endForEach
      endTemporarily

      (forEach in used_libraries).m.attributes.is_collected = false

      # Every library has type Rogue::Global as an implicit context.
      implicit_context.add( Program.type_Global )

      # Add each class LibraryName::Routine to list of implicit contexts if it exists.
      # Each routine is converted in to a global method of its library's Routine class.
      local type_Routine = Type( t, Program.default_library, "Routine" )
      type_Routine.ensure_definition
      implicit_context.add( type_Routine )
      forEach (used_m in used_libraries)
        type_Routine = Type( t, used_m.m, "Routine" )
        type_Routine.ensure_definition
        implicit_context.add( type_Routine )
      endForEach

    method collect_exported_libraries( target:Library )
      if (attributes.is_visiting or attributes.is_collected) return
      attributes.is_collected = true

      temporarily attributes.is_visiting = true
        forEach (used_m in used_libraries)
          if (used_m.is_exported)
            target.uses_library( used_m.m )
            used_m.m.collect_exported_libraries( target )
          endIf
        endForEach
      endTemporarily

    method create_placeholder_data_type( placeholder_t:Token )->(t:Token,type:Type)
      if (placeholder_t.content[1].is_uppercase)
        # Type parameter
        local type_name = placeholder_t.content.replacing( "$", "_Doc_Gen_" )
        placeholder_t = placeholder_t.cloned( TokenType.IDENTIFIER, type_name )
        local type = types[ type_name ]
        if (not type) type = Type( placeholder_t, Program.default_library, type_name, Attribute.OBJECT|Attribute.DEFINED )
        return (t:placeholder_t,type:type)
      else
        # Unknown token parameter
        local placeholder_name = placeholder_t.content.replacing( "$", "_Doc_Gen_" )
        placeholder_t = placeholder_t.cloned( TokenType.IDENTIFIER, placeholder_name )
        return (t:placeholder_t,type:null)
      endIf

    method description->String
      return name

    method find_template( t:Token, template_name:String, type_name:String, &extended_search )->Template
      # template_name: e.g. List<<1>>
      # type_name:     e.g. Int32[]
      local lib : Library
      (lib,template_name) = split_library_and_type( t, template_name )
      if (lib is null) lib = split_library_and_type( t, type_name )._1

      if (lib)
        # Explicit library given
        local result = lib.templates[ template_name ]
        if (result) return result

      else
        local result = this.templates[ template_name ]
        if (result) return result

        if (extended_search)
          forEach (used_m in used_libraries)
            result = used_m.m.templates[ template_name ]
            if (result) return result
          endForEach
        endIf
      endIf

      return null

    method must_find_template( t:Token, template_name:String, type_name:String, &extended_search )->Template
      local result = find_template( t, template_name, type_name, &=extended_search )
      if (result) return result

      local (lib,type) = split_library_and_type( t, type_name )
      if (lib is null) lib = this
      Program.check_include_hints( t, lib, template_name )
      throw t.error( "Reference to undefined type '$::$'."(lib,type) )

    method find_type( t:Token, type_name:String, &extended_search )->Type
      local (lib,isolated_type_name) = split_library_and_type( t, type_name, &suppress_error )

      if (isolated_type_name is null) return null

      if (lib) extended_search = false
      else     lib = this

      local result = lib.types[ isolated_type_name ]
      if (result) return result

      if (not isolated_type_name.ends_with('>'))
        use template_name = StringPool
          template_name.print isolated_type_name
          template_name.print "<<0>>"
          local template = lib.templates[ template_name ]
          if (template) return Type( t, template, lib, isolated_type_name )
        endUse
      endIf

      if (extended_search)
        forEach (used_m in used_libraries)
          result = used_m.m.find_type( t, type_name )
          if (result) return result
        endForEach
      endIf

      return null

    method must_find_type( t:Token, type_name:String, &extended_search )->Type
      local result = find_type( t, type_name, &=extended_search )
      if (result) return result
      local (lib,type) = split_library_and_type( t, type_name )
      if (not lib) lib = this

      Program.check_include_hints( t, lib, type_name )
      throw t.error( "Reference to undefined type '$::$'."(lib,type) )

    method instantiate_essential_and_api_types->Logical
      local any_new = false
      if (attributes.is_essential or Program.generate_doc)
        temporarily Program.current_library = this
          local i = 0
          while (i < templates.count)
            local template = templates.at(i)
            if (not template.attributes.is_augment)
              local placeholders = template.placeholders
              if (placeholders.count == 0)
                # Instantiate one of each template with 0 type parameters
                if (not types.contains(template.name))
                  Type( template.t, this, template.name )
                  any_new = true
                endIf
              elseIf (Program.generate_doc and not template.doc_type)
                if (template.name == "Tuple")
                  noAction
                elseIf (template.name == "List" and placeholders.count == 1)
                  local element_type = Program.default_library.create_placeholder_data_type( placeholders.first ).type
                  template.doc_type = Type( template.t, element_type )
                  any_new = true
                elseIf (template.name == "Table" and placeholders.count == 2)
                  local key_type = Program.default_library.create_placeholder_data_type( placeholders[0] ).type
                  local value_type = Program.default_library.create_placeholder_data_type( placeholders[1] ).type
                  template.doc_type = Type( template.t, key_type, value_type )
                  any_new = true
                elseIf (template.name == "Optional" and placeholders.count == 1)
                  local data_type = Program.default_library.create_placeholder_data_type( placeholders[0] ).type
                  template.doc_type = Type( template.t, data_type, &optional )
                  any_new = true
                elseIf (not template.attributes.undocumented)
                  # Create a dummy placeholder datatype and instantiate template.
                  local args = TemplateArgs( template.t )
                  forEach (placeholder_t in placeholders)
                    placeholder_t = Program.default_library.create_placeholder_data_type( placeholder_t ).t
                    args.add( TokenList(template.t,[placeholder_t]) )
                  endForEach
                  template.doc_type = Type( t, template, this, args )
                  any_new = true
                endIf
              endIf
            endIf
            ++i
          endWhile
        endTemporarily
      endIf

      if (attributes.is_essential)
        (forEach in types).attributes.is_essential = true
      endIf
      if (attributes.is_api)
        (forEach in types).attributes.is_api = true
      endIf

      return any_new

    method split_library_and_type( t:Token, type_name:String, &allow_unknown_library, &suppress_error )->(Library,String)
      if (type_name.begins_with('(') or type_name.begins_with('['))
        # Type names beginning with ( are (tuples) or (Functions)
        # Type names beginning with [ are [KeyType:ValueType] tables
        #return (Program.default_library,type_name)
        return (null->(as Library),type_name)
      endIf

      if (not type_name.contains("::"))
        return (null->(as Library),type_name)
      endIf

      # Find library name, handling e.g. MyLibrary::Type<<Rogue::Int32>>
      local first_template_i = type_name.locate( "<<" )  # could be null
      local last_scope_i = type_name.locate_last( "::", first_template_i )
      if (not last_scope_i.exists) return (null->(as Library),type_name)

      use mod_name = StringPool
        forEach (i in 0..<last_scope_i.value)
          mod_name.print type_name[i]
        endForEach

        type_name .= substring( last_scope_i.value + 2 )

        local lib = Program.libraries[ mod_name ]
        if (lib) return (lib,type_name)

        use relative_mod_name = StringPool
          # Try one more thing - if in library Alpha, check Beta::XYZ -> Alpha::Beta::XYZ
          relative_mod_name.print this.name
          relative_mod_name.print "::"
          relative_mod_name.print mod_name
          lib = Program.libraries[ relative_mod_name ]
          if (lib) return (lib,type_name)
        endUse

        if (allow_unknown_library)
          # Create and return the library
          lib = Program.get_library( t, mod_name )
          return (lib,type_name)
        endIf

        if (suppress_error)
          return (null->(as Library), null->(as String))  # null Type indicates suppresssed error
        endIf

        throw t.error( "No such library '$'. Is there a missing 'uses $' directive?" (mod_name,mod_name) )
      endUse

      return (null->(as Library),type_name)

    method organize_methods
      if (is_organized) return
      is_organized = true

      # Instantiate any essential templates
      forEach (template in templates)
        if (template.placeholders.count == 0)
          if (not template.attributes.is_essential)
            if (not template.attributes.is_aspect)
              forEach (pattern in Program.api_patterns)
                contingent
                  if (pattern.contains("::"))
                    necessary (FilePattern(pattern).matches("$::$"(name,template.name)))
                  elseIf (pattern != "*")
                    necessary (FilePattern(pattern).matches(name))
                  endIf
                satisfied
                  template.attributes.is_api = true
                  template.attributes.is_essential = true
                endContingent
              endForEach
            endIf
          endIf

          if (template.attributes.is_essential or Program.generate_doc)
            temporarily Program.current_library = this
              if (not template.attributes.is_augment and not types.contains(template.name))
                Type( template.tokens.first, template.name )
              endIf
            endTemporarily
          endIf
        endIf
      endForEach

      # Add global statements to Routine.on_launch()
      local type_Routine = Type( t, this, "Routine" )
      type_Routine.ensure_definition
      local r = type_Routine.global_methods[ "on_launch()" ]
      if (not r)
        local launch_t = which{ global_statements.count:global_statements.first.t || t }
        r = GlobalMethod( launch_t, type_Routine, "on_launch" )
        r.statements.add( forEach in global_statements )
        r.attributes.is_global = true
        r.organize
        r.attributes.omit_doc = true
        type_Routine.global_methods[ r.signature ] = r
        if (r.statements.count)
          r.attributes.is_essential = true
          type_Routine.attributes.is_essential = true
        endIf
      else
        r.statements.add( forEach in global_statements )
      endIf
      m_on_launch = r

    method to->String
      return name

    method uses_library( lib:Library, &is_exported )
      if (lib is this) return
      # happens when this is the default library because all libraries implicitly "use" default library

      forEach (existing_m at i in used_libraries)
        if (existing_m.m is lib)
          # Already added - move to end to give it higher search priority than before.
          used_libraries.add( used_libraries.remove_at(i) )
          return
        endIf
      endForEach

      used_libraries.add( UsedLibrary(lib,&=is_exported) )

endClass

class UsedLibrary( m:Library, is_exported:Logical ) [compound]
  METHODS
    method to->String
      return m.name
endClass

