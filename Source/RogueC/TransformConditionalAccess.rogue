module RogueC

class TransformConditionalAccess : ScopeVisitor
  PROPERTIES
    inline_stack       = Cmd[]
    current_statements : ListRewriter<<Cmd>>
    current_statement  : Cmd
    nesting_depth : Int

  METHODS
    method on_visit( cmd:ConditionalAccess )->Cmd
      cmd.nesting_depth = nesting_depth

      ++nesting_depth
      cmd.context = visit( cmd.context )->(as ConditionalContext)
      cmd.access = visit( cmd.access )
      --nesting_depth

      inline_stack.add( cmd )

      if (cmd is current_statement)
        return null
      else
        cmd.v_result = create_local( cmd.t, "conditional_result", null, cmd.access )
        current_statements.write( LocalDeclaration(cmd.t,cmd.v_result) )
        return GetLocal( cmd.v_result )
      endIf

    method on_visit( cmd:ConditionalContext )->Cmd
      cmd.context = visit( cmd.context )
      return cmd

      visit_children( cmd )

    method on_visit_children( cmd:Statements )
      temporarily current_statements = cmd.list.rewriter
        forEach (element in current_statements)
          current_statement = element
          local inline_stack_fp = inline_stack.count

          local visited_element = visit( element )

          local conditional_access_statements : Statements

          # Turn inline commands inside out
          while (inline_stack.count > inline_stack_fp)
            local outer_cmd = inline_stack.remove_last

            if local cmd = outer_cmd->(as ConditionalAccess)
              local config_statements = Statements( cmd.t )
              if (cmd.v_result)

                if (.is_simple(cmd.context.context))
                  local cmd_if = If( cmd.t, cmd.context )
                  cmd_if.statements.add( SetLocal( cmd.t, cmd.v_result, cmd.access ) )
                  if (cmd.nesting_depth and conditional_access_statements)
                    cmd_if.statements.add( forEach in conditional_access_statements )
                  endIf
                  config_statements.add( cmd_if )
                else
                  local v_context = create_local( cmd.t, "conditional_context", null, cmd.context.original )
                  config_statements.add( LocalDeclaration(v_context.t,v_context) )
                  config_statements.add( SetLocal(v_context.t, v_context, cmd.context.context) )
                  cmd.context.context = GetLocal( v_context )

                  local cmd_if = If( cmd.t, GetLocal(v_context) )
                  cmd_if.statements.add( SetLocal( cmd.v_result, cmd.access ) )
                  if (cmd.nesting_depth and conditional_access_statements)
                    cmd_if.statements.add( forEach in conditional_access_statements )
                  endIf
                  config_statements.add( cmd_if )
                endIf

              else
                if (.is_simple(cmd.context.context))
                  local cmd_if = If( cmd.t, cmd.context )
                  cmd_if.statements.add( cmd.access )
                  if (cmd.nesting_depth and conditional_access_statements)
                    cmd_if.statements.add( forEach in conditional_access_statements )
                  endIf
                  config_statements.add( cmd_if )
                else
                  local v_context = create_local( cmd.t, "conditional_context", null, cmd.context.original )
                  config_statements.add( LocalDeclaration(v_context.t,v_context) )
                  config_statements.add( SetLocal(v_context.t, v_context, cmd.context.context) )
                  cmd.context.context = GetLocal( v_context )

                  local cmd_if = If( cmd.t, GetLocal(v_context) )
                  cmd_if.statements.add( cmd.access )
                  if (cmd.nesting_depth and conditional_access_statements)
                    cmd_if.statements.add( forEach in conditional_access_statements )
                  endIf
                  config_statements.add( cmd_if )
                endIf

              endIf
              conditional_access_statements = config_statements
            else
              trace
              throw outer_cmd.t.error( "[INTERNAL] Unhandled inline command '$'."(outer_cmd.type_name) )
            endIf
          endWhile

          if (conditional_access_statements)
            current_statements.write( forEach in conditional_access_statements )
          endIf

          if (visited_element)
            if (visited_element instanceOf Statements)
              current_statements.write( forEach in visited_element )
            else
              current_statements.write( visited_element )
            endIf
          endIf

        endForEach
      endTemporarily

endClass
