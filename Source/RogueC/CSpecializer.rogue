module RogueC

class CSpecializer : Visitor
  PROPERTIES
    writer         : CWriter
    autoname_index = 0

    current_statements : ListRewriter<<Cmd>>
    control_stack      = ControlStructure[]

  METHODS
    method apply
      Program.apply( this )

      forEach (mod in Program.modules)
        forEach (type in mod.types)
          type.finalize_vtable
        endForEach
      endForEach

      if (Program.default_module.types.contains("TypeInfo"))
        forEach (mod in Program.modules.values)
          collect_literal_string( mod.name )
        endForEach
      endIf

      if (Program.default_module.types.contains("PropertyInfo"))
        forEach (mod in Program.modules)
          forEach (type in mod.types.values)
            collect_literal_string( (forEach in type.global_properties).name )
            collect_literal_string( (forEach in type.properties).name )
          endForEach
        endForEach
      endIf

      if (Program.default_module.types.contains("MethodInfo"))
        forEach (m in Program.all_methods)
          collect_literal_string( m.name )
          collect_literal_string( (forEach in m.parameters).name )
        endForEach
      endIf

      if (VCALLS) CollectVirtualCallInfo()

    method visit_type( type:Type )
      if (type.attributes.is_used)
        prior.visit_type( type )
      endIf

    method add_local( t:Token, base:String, type:Type, initial_value=null:Cmd )->Local
      local v = Local( t, autoname(base), initial_value, type )
      insert( LocalDeclaration(t,v) )
      v.index = this_procedure.locals.count + this_procedure.parameters.count
      v.c_name = "$_$" (v.name,v.index)
      this_procedure.locals.add( v )
      assert control_stack.count
      control_stack.last.locals.add( v )
      return v

    method autoname( base:String )->String
      local result = "_auto_$_$"(base,autoname_index)
      ++autoname_index
      return result

    method collect_literal_string( str:String )
      if (not Program.unique_strings.contains(str))
        local builder = String()
        builder.print( Program.namespace_lc )
        builder.print( "str_" )
        forEach (i in 0..<str.count.or_smaller(20))
          local ch = str[i]
          if (ch.is_letter or ch.is_number) builder.print( ch )
          else builder.print( '_' )
        endForEach
        local c_name = builder
        if (Program.c_name_strings.contains(c_name))
          local n = 1
          while (Program.c_name_strings.contains(c_name))
            local c_name_2 = c_name + "_" + n
            if (not Program.c_name_strings.contains(c_name_2))
              c_name = c_name_2
              escapeWhile
            endIf
            ++n
          endWhile
        endIf
        Program.unique_strings[ str ] = c_name;
        Program.string_table_indices[ str ] = Program.string_table_indices.count;
        Program.c_name_strings[ c_name ] = str;
      endIf

    method insert( cmd:Cmd )
      current_statements.write( cmd )

    method on_visit( cmd:CallDynamicMethod )->Cmd
      # Anchor the object context if necessary
      local context = cmd.context
      if (Program.gc_auto)
        if ((context.type.is_reference or context.type.contains_reference) and not context.is_anchored)
          context = visit( context )
          local v = context.intermediate_v
          if (not v or not v.is_anchored)
            v = add_local( context.t, "anchored_context", context.type, DummyInitialValue )
            cmd.context = InlineAssignment( context.t, v, context )
          else
            cmd.context = GetLocal(context.t,v)
          endIf
        endIf
      endIf
      return on_visit( cmd->(as CallProcedure) )

    method on_visit( cmd:CallProcedure )->Cmd
      visit_children( cmd )

      # Anchor any args that need it
      if (Program.gc_auto)
        forEach (arg at i in cmd.args)
          if ((arg.type.is_reference or arg.type.contains_reference) and not arg.is_anchored)
            local v = add_local( arg.t, "anchored_arg_"+i, arg.type )
            cmd.args[i] = InlineAssignment( arg.t, v, arg )
          endIf
        endForEach
      endIf

      if (cmd.info.throws?)
        # Decompose call
        if (cmd.info.return_type? and not cmd.result_discarded)
          local v = add_local( cmd.t, "call_result", cmd.info.return_type, DummyInitialValue )
          insert( SetLocal(cmd.t,v,cmd,&initial_assignment) )
          insert( ReturnOnException(cmd.t) )
          return GetLocal( cmd.t, v )
        else
          insert( cmd )
          return ReturnOnException( cmd.t )
        endIf
      else
        return cmd
      endIf

    method on_visit( cmd:CallStaticMethod )->Cmd
      # Anchor the object context if necessary
      local context = cmd.context
      if (Program.gc_auto)
        if ((context.type.is_reference or context.type.contains_reference) and not context.is_anchored)
          context = visit( context )
          local v = context.intermediate_v
          if (not v or not v.is_anchored)
            v = add_local( context.t, "anchored_context", context.type, DummyInitialValue )
            cmd.context = InlineAssignment( context.t, v, context )
          else
            cmd.context = GetLocal(context.t,v)
          endIf
        endIf
      endIf
      return on_visit( cmd->(as CallProcedure) )

    method on_visit( cmd:ControlStructure )->Cmd
      control_stack.add( cmd )
      visit_node( cmd )
      control_stack.remove_last
      return cmd

    method on_visit( cmd:CreateObject )->Cmd
      visit_children( cmd )

      if (Program.gc_auto or cmd.m_init)
        local v = add_local( cmd.t, "obj", cmd.of_type, DummyInitialValue )
        insert( CreateObjectAndSetLocal(cmd.t,cmd.of_type,v) )
        if (cmd.m_init)
          insert( visit(CallStaticMethod(cmd.t,GetLocal(cmd.t,v),cmd.m_init,cmd.args)) )
        endIf
        return GetLocal(cmd.t,v)
      else
        return cmd
      endIf

    method on_visit_node( cmd:If )
      control_stack.add( cmd )

      cmd.condition = visit( cmd.condition )
      cmd.statements = visit( cmd.statements )
      cmd.cmd_else = visit( cmd.cmd_else )

      control_stack.remove_last

    method on_visit( cmd:InlineWhich )->Cmd
      if (not cmd.needs_decomposition)
        visit_node( cmd )
        return validate( cmd )
      endIf

      # One of the cases can throw an exception; change the whole thing into an 'if' block
      #
      # Example
      #   println which{ a:x || b:y || z }
      # ->
      #   local temp : typeOf<<x>>
      #   if (a)     temp = x
      #   elseIf (b) temp = y
      #   else       temp = z
      #   println temp
      local v_result = add_local( cmd.t, "which", cmd.cases[0].value.type, DummyInitialValue )
      insert( visit(convert_case_to_if(cmd,v_result)) )
      return validate( GetLocal(v_result) )

    method convert_case_to_if( cmd:InlineWhich, v_result:Local, index=0:Int32 )->Cmd
      local cmd_case = cmd.cases[index]

      local value = cmd_case.value
      if (not value)
        if (cmd_case.condition.is_simple)
          value = cmd_case.condition.cloned
        else
          local v_case = add_local( cmd.t, "case", cmd_case.condition.type, DummyInitialValue )
          insert( visit(SetLocal(v_case,cmd_case.condition.cloned,&initial_assignment)) )
          value = GetLocal( v_case )
        endIf
      endIf

      local statements = Statements( cmd_case.t, SetLocal(cmd_case.t, v_result, value, &initial_assignment) )
      if (index+1 == cmd.cases.count) return statements

      local cmd_if = If( cmd_case.t, cmd_case.condition, statements, null )

      local else_statements = Statements( cmd_case.t )
      temporarily current_statements = else_statements.list.rewriter
        else_statements.add( convert_case_to_if(cmd,v_result,index+1) )
        cmd_if.cmd_else = else_statements
      endTemporarily

      return cmd_if

    method on_visit_node( cmd:Iterator )
      control_stack.add( cmd )

      local v = add_local( cmd.t, "condition", Program.type_Logical, DummyInitialValue )
      insert( SetLocal(cmd.t,v,cmd.condition.cloned,&initial_assignment) )
      cmd.upkeep.add( SetLocal(v,cmd.condition,&initial_assignment) )
      cmd.condition = GetLocal(v)
      cmd.statements = visit( cmd.statements )
      cmd.upkeep = visit( cmd.upkeep )
      cmd.control = visit( cmd.control )

      control_stack.remove_last

    method on_visit_node( cmd:LiteralString )
      collect_literal_string( cmd.value )

    method on_visit_node( cmd:Local )
      cmd.type = visit(cmd.type)->(as Type)
      if (not cmd.c_name) cmd.c_name = "$_$"(cmd.name,cmd.index)

    method on_visit( cmd:LogicalAnd )->Cmd
      if (cmd.left.needs_decomposition or cmd.right.needs_decomposition)
        local t = cmd.t

        local left = cmd.left
        left.intermediate_v = cmd.intermediate_v
        cmd.left = visit( left )
        local v = left.intermediate_v
        if (not v)
          v = cmd.intermediate_v
          if (v)
            insert( SetLocal(t,v,cmd.left) )
          else
            v = add_local( t, "and", cmd.left.type, DummyInitialValue )
            insert( SetLocal(t,v,cmd.left,&initial_assignment) )
          endIf
        endIf
        cmd.intermediate_v = v
        cmd.right.intermediate_v = v

        local statements = Statements( t, SetLocal(t,v,cmd.right) )
        insert( visit( If(t, GetLocal(t,v), statements, null) ) )

        contingent
          necessary statements.count
          local cmd_set_local = statements.last->(as SetLocal)
          necessary (cmd_set_local)
          local cmd_get_local = cmd_set_local.new_value->(as GetLocal)
          necessary (cmd_get_local)
          necessary (cmd_set_local.info is cmd_get_local.info)
          statements.remove_last
        endContingent

        return GetLocal(t,v)
      else
        visit_children( cmd )
      endIf
      return cmd

    method on_visit( cmd:LogicalOr )->Cmd
      local decompose_left  = cmd.left.needs_decomposition
      local decompose_right = cmd.right.needs_decomposition
      if (decompose_left or decompose_right)
        local t = cmd.t

        local left = cmd.left
        left.intermediate_v = cmd.intermediate_v
        cmd.left = visit( left )
        local v = left.intermediate_v
        if (not v)
          v = cmd.intermediate_v
          if (v)
            insert( SetLocal(t,v,cmd.left) )
          else
            v = add_local( t, "or", cmd.left.type, DummyInitialValue )
            insert( SetLocal(t,v,cmd.left,&initial_assignment) )
          endIf
        endIf
        cmd.intermediate_v = v
        cmd.right.intermediate_v = v

        local statements = Statements( t, SetLocal(t,v,cmd.right) )
        insert( visit( If(t, LogicalNot(t,GetLocal(t,v)), statements, null) ) )

        contingent
          necessary statements.count
          local cmd_set_local = statements.last->(as SetLocal)
          necessary (cmd_set_local)
          local cmd_get_local = cmd_set_local.new_value->(as GetLocal)
          necessary (cmd_get_local)
          necessary (cmd_set_local.info is cmd_get_local.info)
          statements.remove_last
        endContingent

        return GetLocal(t,v)
      else
        visit_children( cmd )
      endIf
      return cmd

    method on_visit_node( cmd:Procedure )
      autoname_index = 0

      cmd.c_result_name = "_auto_result"

      forEach (p at i in cmd.parameters)
        block p = p->(as Local)
          p.c_name = "$_$" (p.name,i)
        endBlock
      endForEach

      forEach (v in cmd.locals) v.c_name = "$_$"(v.name,v.index)

      visit_children( cmd )

    method on_visit_node( cmd:Return )
      visit_children( cmd )

    method on_visit_node( cmd:Statements )
      temporarily current_statements = cmd.list.rewriter
        forEach (statement in current_statements)
          statement = visit( statement )
          contingent
            necessary (statement)
            necessary (statement not instanceOf GetLocal)
            current_statements.write( statement )
          endContingent
        endForEach
      endTemporarily

    method on_visit( cmd:SetLocal )->Cmd
      local cmd_create = cmd.new_value->(as CreateObject)
      if (not cmd_create)
        visit_children( cmd )
        return cmd
      endIf

      local args = visit( cmd_create.args )
      local cmd_create2 = validate( CreateObjectAndSetLocal(cmd_create.t,cmd_create.of_type,cmd.info) )
      if (cmd_create.m_init)
        insert( cmd_create2 )
        local cmd_constructor = CallDynamicMethod( cmd.t, GetLocal(cmd.t,cmd.info), cmd_create.m_init, args )
        ConvertDynamicCallsToStaticAndVirtualCalls.this_procedure = this_procedure
        ConvertDynamicCallsToStaticAndVirtualCalls.this_type = this_type
        local result = visit( ConvertDynamicCallsToStaticAndVirtualCalls.visit(cmd_constructor) )
        return result
      else
        return cmd_create2
      endIf

    method on_visit_node( cmd:Throw )
      insert( PushStackTraceCutoff(cmd.t) )
      visit_children( cmd )
endClass

augment Cmd
  METHODS
    method intermediate_v->Local
      return null

    method set_intermediate_v( v:Local )
      noAction
endAugment

augment ControlStructure
  PROPERTIES
    c_escape_label      : String
    c_necessary_label   : String
    c_sufficient_label  : String

  METHODS
    method c_escape_label( cgen:CGenerator, control_type=ControlType.UNDEFINED:ControlType )->String
      which (control_type)
        case ControlType.NECESSARY
          if (not @c_necessary_label) @c_necessary_label = cgen.autoname("unsatisfied")
          return @c_necessary_label
        case ControlType.SUFFICIENT
          if (not @c_sufficient_label) @c_sufficient_label = cgen.autoname("satisfied")
          return @c_sufficient_label
        others
          if (not @c_escape_label) @c_escape_label = cgen.autoname("escape")
          return @c_escape_label
      endWhich

endAugment

augment Local
  PROPERTIES
    c_name : String

  METHODS
    method init( existing:Local ) [append]
      c_name = existing.c_name
endAugment

augment LogicalAnd
  PROPERTIES
    intermediate_v : Local

  METHODS
    method intermediate_v->Local
      return @intermediate_v

    method set_intermediate_v( @intermediate_v )
endAugment

augment LogicalOr
  PROPERTIES
    intermediate_v : Local

  METHODS
    method intermediate_v->Local
      return @intermediate_v

    method set_intermediate_v( @intermediate_v )
endAugment

augment Procedure
  PROPERTIES
    c_name          : String
    c_result_name   : String
    c_dynamic_signature : String  # for dynamic dispatch
    c_call_signature    : String

  METHODS
    method c_name->String
      throw UnsupportedOperationError()

    method c_call_signature->String
      if (@c_call_signature) return @c_call_signature

      local builder = String()
      builder.print "Rogue_m"
      if (attributes.is_mutating) builder.print 'm'
      builder.print '_'

      if (not is_global)
        builder.print '_'
        if (type_context.is_reference)
          builder.print "RogueObject"
        else
          builder.print type_context.c_name
        endIf
      endIf

      if (parameters.count)
        forEach (p in parameters)
          builder.print( "_" )
          if (p.type.is_reference)
            builder.print "RogueObject"
          else
            builder.print p.type.c_sig_name
          endIf
        endForEach
      endIf

      if (return_type)
        builder.print "__"
        if (return_type.is_reference)
          builder.print "RogueObject"
        else
          builder.print return_type.c_sig_name
        endIf
      endIf

      c_call_signature = builder

      return @c_call_signature

    method c_dynamic_signature->String
      if (@c_dynamic_signature) return @c_dynamic_signature

      local builder = String()
      builder.print( Program.to_c_name(name) )
      builder.print '_'
      if (parameters.count)
        forEach (p in parameters)
          builder.[ print("_"), print(p.type.c_sig_name) ]
        endForEach
      endIf

      if (return_type)
        localize return_type
        if (return_type.is_reference) return_type = Program.type_Object
        builder.print "__"
        builder.print return_type.c_sig_name
      endIf

      c_dynamic_signature = builder

      return @c_dynamic_signature

endAugment

augment Program
  PROPERTIES
    c_name_strings = [String:String]
    unique_c_names = Set<<String>>()

  METHODS
    method init [append]
      # Reserve these type names that are already used by the C runtime. Any Rogue class named
      # e.g. "Rogue::ObjectList" will become "RogueObjectList2" etc.
      unique_c_names.add( "RogueCallFrame" )
      unique_c_names.add( "RogueObjectList" )

    method to_c_name( name:String )->String
      name = name.replacing( "[]", "List" )

      while (name.ends_with('?'))
        name = "Optional" + name.leftmost(-1)
      endWhile

      if (name.contains(':'))
        name .= replacing( ":<<:",  "SHL" )
        name .= replacing( ":>>:",  "SHR" )
        name .= replacing( ":>>>:", "SHRX" )
      endIf

      local builder = String()
      local iterator = name.iterator
      while (iterator.has_another)
        local ch = iterator.read
        if (ch.is_letter or ch.is_number)
          builder.print ch
        elseIf (ch == '>')
          if (iterator.peek == '>') builder.print 'x'; iterator.read
          else                      builder.print "GT"
        elseIf (ch == '<')
          if (iterator.peek == '<') builder.print 'x'; iterator.read
          else                      builder.print "LT"
        elseIf (ch == '+')
          if (iterator.peek == '+') builder.print "INC"; iterator.read
          else                      builder.print "PLUS"
        elseIf (ch == '-')
          if (iterator.peek == '-')     builder.print "DEC"; iterator.read
          elseIf (iterator.peek == '>') builder.print "RETURNS"; iterator.read
          else                          builder.print "MINUS"
        elseIf (ch == ':')
          # "::" -> ""
          if (iterator.peek == ':') iterator.read
          else                      builder.print '_'
        else
          which (ch)
            case '?': builder.print "Q"
            case '*': builder.print "TIMES"
            case '/': builder.print "DIVIDE"
            case '%': builder.print "MOD"
            case '^': builder.print "POWER"
            case '&': builder.print "AND"
            case '|': builder.print "OR"
            case '~': builder.print "XOR"
            case '!': builder.print "NOT"
            case '(': builder.print "OPAREN"
            case ')': builder.print "CPAREN"
            case '[': builder.print "BTABLE"
            case ']': builder.print "ETABLE"
            others:   builder.print '_'
          endWhich
        endIf
      endWhile
      return builder

    method unique_c_name( c_name:String )->String
      if (unique_c_names.contains(c_name))
        local i = 2
        local cni = c_name + i
        while (unique_c_names.contains(cni))
          ++i
          cni = c_name + i
        endWhile
        unique_c_names.add( cni )
        return cni
      else
        unique_c_names.add( c_name )
        return c_name
      endIf
endAugment

augment Procedure
  METHODS
    method requires_cleanup->Logical
      if (Program.gc_auto)
        forEach (p in parameters)
          if (not p.is_anchored)
            if (p.type.is_reference or p.type.contains_reference) return true
          endIf
        endForEach

        forEach (v in locals)
          if (v.type.is_reference or v.type.contains_reference) return true
        endForEach
      endIf

      return false
endAugment

augment Property
  PROPERTIES
    c_name : String

  METHODS
    method c_name->String
      if (@c_name) return @c_name

      if (name.begins_with('.')) @c_name = "_" + name.unleft(1)
      else                       @c_name = name

      if (attributes.is_global)
        @c_name = "$$__g_$"(Program.namespace_capitalized,type_context.c_name,@c_name)
      endIf

      return @c_name

endAugment

augment Type
  PROPERTIES
    c_name     : String   # e.g. RogueString (RogueObject for aspects)
    c_ref_name : String   # e.g. RogueString* (RogueObject* for aspects)
    c_sig_name : String   # e.g. RogueString

  METHODS
    method c_ref_name->String
      if (@c_ref_name) return @c_ref_name
      @c_ref_name = c_name
      if (is_reference) @c_ref_name += "*"
      return @c_ref_name

    method c_name->String
      if (@c_name) return @c_name

      if (is_aspect)
        @c_name = "RogueObject"
      elseIf (attributes.is_tuple)
        @c_name = Program.unique_c_name( "$Tuple$"(module_context.c_name,Program.to_c_name(name)) )
      elseIf (name.begins_with('['))
        # [KeyType:ValueType] Table
        @c_name = Program.unique_c_name( "$Table$"(module_context.c_name,Program.to_c_name(name)) )
      elseIf (attributes.is_native_type)
        @c_name = name
      else
        @c_name = Program.unique_c_name( module_context.c_name + Program.to_c_name(name) )
      endIf

      @c_name = Program.namespace_capitalized + @c_name
      return @c_name

    method c_sig_name->String
      if (@c_sig_name) return @c_sig_name
      if (is_aspect)
        @c_sig_name = Program.namespace_capitalized + Program.unique_c_name( module_context.c_name + Program.to_c_name(name) )
      else
        @c_sig_name = c_name
      endIf
      return @c_sig_name

endAugment

augment Module
  PROPERTIES
    c_name : String

  METHODS
    method c_name->String
      if (@c_name) return @c_name
      @c_name = name.replacing("::","_")
      return @c_name
endAugment

augment
  METHODS
    method GlobalMethod.c_name->String
      if (@c_name) return @c_name
      local builder = String()
      builder.[ print(type_context.c_sig_name), print("__") ]
      builder.print( Program.to_c_name(name) )
      if (parameters.count)
        builder.print '_'
        forEach (p in parameters)
          builder.[ print("_"), print(p.type.c_sig_name) ]
        endForEach
      endIf
      c_name = builder
      return @c_name

    method Method.c_name->String
      if (@c_name) return @c_name
      local builder = String()
      builder.[ print(type_context.c_sig_name), print("__") ]
      builder.print( Program.to_c_name(name) )
      if (parameters.count)
        builder.print '_'
        forEach (p in parameters)
          builder.[ print("_"), print(p.type.c_sig_name) ]
        endForEach
      endIf
      c_name = builder
      return @c_name

endAugment

