class Files
  # Manages a set of filepath strings.
  PROPERTIES
    base_folder  : String
    filepath_set = [String:String]()

  METHODS
    method init( base_folder:String, &allow_pattern=true, &include_folders )
      base_folder = File(base_folder).resolved.filepath
      this.base_folder = base_folder

      if (allow_pattern)
        # Treat the folder as a possible pattern
        local path_segments = this.base_folder.split('/')
        use pattern_segments = WorkList<<String>>
          local first_wildcard_i = path_segments.locate( $.contains('*') or $.contains('?') )
          if (first_wildcard_i)
            forEach (p in path_segments from first_wildcard_i.value)
              pattern_segments.add( p )
            endForEach
            path_segments.discard_from( first_wildcard_i.value )
          endIf
          if (pattern_segments.count)
            if (path_segments.is_empty) this.base_folder = "./"
            else                        this.base_folder = path_segments.join( "/" )
            local pattern : String
            if (pattern_segments.is_empty) pattern = "*"
            else                           pattern = pattern_segments.join( "/" )
            init( this.base_folder, FilePattern(pattern), &=include_folders )
            return
          endIf
        endUse
      endIf

      if (this.base_folder == "") this.base_folder = "./"
      if (this.base_folder.begins_with("./") and this.base_folder.count > 2)
        this.base_folder = this.base_folder.rightmost( -2 )
      endIf
      this.base_folder /= ""  # Adds trailing /

    method init( base_folder:String, pattern:FilePattern, &ignore_hidden=true, &include_folders )
      init( base_folder, &!allow_pattern )
      add( pattern, &=ignore_hidden, &=include_folders )

    method init( base_folder:String, pattern:String, &ignore_hidden=true, &include_folders )
      init( base_folder, FilePattern(pattern), &=ignore_hidden, &=include_folders )

    method init( base_folder:File, pattern:FilePattern, &ignore_hidden=true, &include_folders )
      init( base_folder.filepath, pattern, &=ignore_hidden, &=include_folders )

    method init( base_folder:File, pattern:String, &ignore_hidden=true, &include_folders )
      init( base_folder, FilePattern(pattern), &=ignore_hidden, &=include_folders )

    method add( pattern:FilePattern, &ignore_hidden=true, &include_folders )
      add( pattern->String, &=ignore_hidden, &=include_folders )

    method add( pattern:String, &ignore_hidden=true, &include_folders )
      local target = base_folder/pattern
      if (File(target).exists and not File(target).is_folder)
        filepath_set[target] = target
      else
        forEach (listing_filepath in File(base_folder).listing(FilePattern(pattern),&=ignore_hidden))
          if (not filepath_set.contains(listing_filepath))
            if (include_folders or not File(listing_filepath).is_folder)
              filepath_set[listing_filepath] = listing_filepath
            endIf
          endIf
        endForEach
      endIf

    method any_newer_than( filepath:String )->Logical
      if (not File(filepath).exists) return true
      local timestamp_ms = newest_timestamp_ms
      if (not timestamp_ms.exists) return false
      return (timestamp_ms.value > File(filepath).timestamp_ms)

    method contains( file:File )->Logical
      return filepath_set.contains( file.resolved.filepath )

    method contains( filepath:String )->Logical
      return filepath_set.contains( filepath )

    method copy_to( to_folder:File, &if_newer, &if_different, &verbose, &dry_run )
      if (verbose)
        forEach (filepath in filepath_set.values)
          local to_filepath = to_folder / relative_filepath(filepath)
          if (File(filepath).copy_to(File(to_filepath), &=if_newer, &=if_different, &dry_run))
            println "Copying $ -> $"(base_folder,to_folder)
            escapeForEach
          endIf
        endForEach
      endIf

      to_folder .= resolved
      if (not dry_run) to_folder.create_folder
      forEach (filepath in filepath_set.values)
        local to_filepath = to_folder / relative_filepath(filepath)
        File(filepath).copy_to( File(to_filepath), &=if_newer, &=if_different, &=verbose, &=dry_run )
      endForEach

    method count->Int
      return filepath_set.count

    method delete( &verbose, &dry_run )
      forEach (filepath in filepath_set.values)
        if (verbose) println "Deleting " + filepath
        if (not dry_run) File( filepath ).delete
      endForEach

    method files->File[]
      local result = File[]( count )
      result.add( File(forEach in filepath_set.values) )
      return result

    method filepaths->TableValuesIterator<<String,String>>
      return filepath_set.values

    method get( index:Int )->String
      return filepath_set.at( index )

    method newest_timestamp_ms->Int64?
      local result : Int64?
      forEach (filepath in filepath_set.values)
        if (File(filepath).exists)
          local timestamp_ms = File(filepath).timestamp_ms
          if (not result.exists or timestamp_ms > result.value) result = timestamp_ms
        endIf
      endForEach
      return result

    method oldest_timestamp->Int64?
      local result : Int64?
      forEach (filepath in filepath_set.values)
        if (File(filepath).exists)
          local timestamp_ms = File(filepath).timestamp_ms
          if (not result.exists or timestamp_ms < result.value) result = timestamp_ms
        endIf
      endForEach
      return result

    method relative_filepath( filepath:String )->String
      if (base_folder.count == 0) return filepath
      if (not filepath.begins_with(base_folder)) return filepath
      return filepath.after_first( base_folder )

    method relative_files->File[]
      local result = File[]( count )
      result.add( File(relative_filepath(forEach in this)) )
      return result

    method relative_filepaths->String[]
      local result = String[]( count )
      result.add( relative_filepath(forEach in this) )
      return result

    method remove( pattern:FilePattern )
      # Removes files from this listing but not from the filesystem - use delete() for that.
      remove( pattern.pattern )

    method remove( pattern:String )
      # Removes files from this listing but not from the filesystem - use delete() for that.
      if (pattern.contains('*') or pattern.contains('?'))
        block pattern = FilePattern(pattern)
          forEach (filepath in filepath_set.values)
            if (pattern.matches(filepath) or pattern.matches(relative_filepath(filepath)))
              filepath_set.remove( filepath )
            endIf
          endForEach
        endBlock
      else
        filepath_set.remove( pattern )
      endIf

    method remove( query:Function(String)->Logical )
      # Removes files from this listing but not from the filesystem - use delete() for that.
      forEach (filepath in filepath_set.values)
        if (query(filepath)) filepath_set.remove( filepath )
      endForEach

    method remove( files:Files )
      # Removes files from this listing but not from the filesystem - use delete() for that.
      forEach (filepath in files)
        filepath_set.remove( filepath )
      endForEach

    method sync_to( dest_folder:File, &verbose, &keep_unused, &dry_run, &missing_only, &if_newer )->Int
      # If 'if_newer' is not specified then files are copied if they are different.
      dest_folder .= resolved

      if (not dest_folder.exists and not dry_run)
        dest_folder.create_folder
        if (not dest_folder.is_folder)
          error.println( "ERROR: File.sync_to() can not create destination folder $" (dest_folder) )
          return 0
        endIf
      endIf

      dest_folder /= ""
      local dest_name = dest_folder.filepath
      if (dest_name.begins_with("./")) dest_name = dest_name.from( 2 )

      if (dest_name == base_folder)
        error.println( "ERROR: File.sync_to() has the same source and destination folders ($)."...
            (dest_folder.filepath.leftmost(-1)) )
        return 0
      endIf

      local width = 0
      width = width.or_larger( (forEach in filepath_set.values).count )
      width -= base_folder.count

      local dest_files = Files( dest_folder )
      if (not keep_unused) dest_files.add( "**" )
      local printed_header = false
      local change_count = 0
      forEach (src_filepath in filepath_set.values)
        local relative_filepath = relative_filepath( src_filepath )
        local dest_filepath = dest_name + relative_filepath
        dest_files.remove( dest_filepath )
        local folder = File( dest_filepath ).folder
        while (dest_files.contains(folder))
          dest_files.remove( folder )
          folder = File(folder).folder
        endWhile

        contingent
          sufficient (not File(dest_filepath).exists)
          necessary  (not missing_only)
          if (if_newer)
            necessary (File(src_filepath).is_newer_than(File(dest_filepath)))
          else
            sufficient (File(src_filepath).size != File(dest_filepath).size)
            necessary  (File(src_filepath).crc32 != File(dest_filepath).crc32)
          endIf

        satisfied
          ++change_count

          if (verbose)
            if (not printed_header)
              printed_header = true
              local src = base_folder
              if (src.count) src = src.leftmost( -1 )
              else           src = "."
              local dest = dest_folder.filepath.leftmost( -1 )
              Global.println( "Copying $ -> $" (src,dest) )
            endIf
            Global.[ print("  "), println(relative_filepath) ]
          endIf

          if (not dry_run)
            File( src_filepath ).copy_to( File(dest_filepath) )
          endIf

        endContingent
      endForEach

      if (not keep_unused)
        printed_header = false
        forEach (filepath in dest_files.filepath_set.values)
          if (verbose)
            if (not printed_header)
              printed_header = true
              Global.println( "Deleting unused files in " + dest_files.base_folder )
            endIf
            Global.[ print("  "), println(dest_files.relative_filepath(filepath)) ]
          endIf
          if (not dry_run) File(filepath).delete
          ++change_count
        endForEach
      endIf

      return change_count

    method to->File[]
      local result = File[]( filepath_set.count )
      result.add( File(forEach in filepath_set.values) )
      return result

    method to->String
      return filepath_set.values->String

    method to->String[]
      return filepath_set.values->String[]
endClass
