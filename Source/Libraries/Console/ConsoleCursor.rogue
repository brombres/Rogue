class ConsoleCursor [compound]
  # API
  #   Console.cursor = (x,y)  # Defined in Console.set_cursor(), (0,0) is top-left
  #   Console.cursor->XY   # (0,0) is top-left
  #   Console.cursor.position->XY  # Same as above
  #   Console.cursor += (delta_x,delta_y)
  #   Console.cursor.save_position
  #   Console.cursor.restore_position
  #   Console.cursor.hide
  #   Console.cursor.show
  GLOBAL PROPERTIES
    cursor_hidden : Logical

  METHODS
    method operator+=( delta:(x:Int,y:Int), output=Global:PrintWriter )
      output.flush
      if (delta.x)
        if (delta.x > 0) output.[ print("\e["), print( delta.x), print('C') ]
        else             output.[ print("\e["), print(-delta.x), print('D') ]
      endIf
      if (delta.y)
        if (delta.y > 0) output.[ print("\e["), print( delta.y), print('B') ]
        else             output.[ print("\e["), print(-delta.y), print('A') ]
      endIf
      output.flush

    method position->XY
      local x, y : Int
      native
      @|
       |#if defined(%NS%ROGUE_PLATFORM_WINDOWS)
       |  HANDLE h_stdout = GetStdHandle( STD_OUTPUT_HANDLE );
       |  CONSOLE_SCREEN_BUFFER_INFO info;
       |  GetConsoleScreenBufferInfo( h_stdout, &info );
       |  $x = info.dwCursorPosition.X;
       |  $y = info.dwCursorPosition.Y - info.srWindow.Top;
       |#else
       |  printf("\033[6n");
       |
       |  struct termios old_settings, new_settings;
       |  tcgetattr( STDIN_FILENO, &old_settings );
       |  new_settings = old_settings;
       |  new_settings.c_lflag &= ~(ICANON | ECHO);
       |  tcsetattr(STDIN_FILENO, TCSANOW, &new_settings );
       |
       |  if (getchar() == '\x1B' && getchar() == '\x5B')
       |  {
       |    int ch;
       |    while ((ch = getchar()) != ';') $x = $x*10 + (ch-'0');
       |    while ((ch = getchar()) != 'R') $y = $y*10 + (ch-'0');
       |  }
       |
       |  tcsetattr(STDIN_FILENO, TCSANOW, &old_settings );
       |  --$x;
       |  --$y;
       |#endif
      return XY(x,y)

    method print_to( buffer:PrintWriter )
      position.print_to( buffer )

    method restore_position( output=Global:PrintWriter )
      output.[ flush, print("\e[u"), flush ]

    method save_position( output=Global:PrintWriter )
      output.[ flush, print("\e[s"), flush ]

    method hide( setting=true:Logical, output=Global:PrintWriter )
      if (cursor_hidden == setting) return
      cursor_hidden = setting
      output.[ flush, print("\e[?25"), print(which{setting:'l'||'h'}), flush ]

    method show( output=Global:PrintWriter )
      hide( false, output )

    method to->XY
      return position

    method to->String
      return position->String

    method x->Int
      return position.x

    method y->Int
      return position.y

endClass
