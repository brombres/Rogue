# EXAMPLE
#   # Parse.rogue
#   uses Console/CommandLineParser
#
#   local command = CommandLineParser().
#   [
#     option( "--alpha", &alias="-a" )
#     option( "--beta",  &alias="-b" )
#
#     option( "--timeout=", &optional, &default=60, &alias="-t" )
#   ].parse( System.command_line_arguments )
#
#   @trace command
#
#   > parse file-1 --alpha file-2
#   # command:{options:{alpha:true,timeout:60},args:[file-1,file-2]}
#
#   > parse -ab --timeout
#   # command:{options:{timeout:60,alpha:true,beta:true}}
#
#   > parse -t=30
#   # command:{options:{timeout:30}}
#
# USAGE
#   uses Console/CommandLineParser
#
#   local parser = CommandLineParser().
#   [
#     # --flag | -f
#     option( "--flag" )
#     alias( "-f", "--flag" )
#
#     # --alpha[=value]
#     option( "--alpha=", &optional )
#
#     # --beta=value
#     option( "--beta=" )
#
#     # --gamma value
#     option( "--gamma", &require_value )
#
#     # -singledashworksfine
#     option( "-singledashworksfine" )
#
#     # Have --arg=X --arg=Y create a list arg=[X,Y] instead of overriding arg=X with arg=Y
#     option( "--arg=", &multi )
#
#     # --custom or --custom= using handler function(CommandLineParser) to handle
#     option( "--custom", (parser) => do_something )
#
#     # Have args after "--source" collect in list "source" (default group is "args")
#     group( "--source" )
#
#     # Have args after "--dest" collect in list "destination"
#     group( "--dest", "destination" )
#
#     # Turn off -ab == -a -b
#     allow_batching = false
#
#     # Turn off meaning of -- as disabling further parsing
#     ddash_disables = false
#
#   ].parse( System.command_line_arguments )
#
#
class CommandLineParser
  PROPERTIES
    handlers        = [String:Function(CommandLineParser)]()
    unknown_handler : Function(CommandLineParser)
    defaults        = @{}

    allow_batching  = true  # Allows -abc to represent -a -b -c
    ddash_disables  = true  # Allows -- to turn off further option parsing

    cur_group       = "args"
    arg             : String
    name            : String
    arg_reader      : Reader<<String>>

    options         = @{}
    command         = @{}

  METHODS
    method init
      on_unknown( (parser) => throw UnrecognizedOptionError(parser.arg) )

    method alias( from_name:String, to_name:String, &require_value )
      handlers[ from_name ] =
        function( parser:CommandLineParser ) with (from_name,to_name,require_value)
          block arg=parser.arg
            if (arg.contains('='))
              parser._handle( to_name + arg.after_first(from_name) )
            elseIf (require_value)
              if (arg.count == 2 and parser.arg_reader.has_another)
                # Single letter option requiring value, like "-d 2"
                parser._handle( "$=$" (to_name,parser.arg_reader.read) )
              else
                throw ValueExpectedError( arg )
              endIf
            else
              parser._handle( to_name )
            endIf
          endBlock
        endFunction

    method group( new_group_option:String, new_group_name=null:String )
      # Changes the group that subsequent args are collected under
      if (not new_group_name) new_group_name = _extract_name( new_group_option )
      handlers[ new_group_option ] = (parser) with (new_group_name) => parser.cur_group = new_group_name

    method on_unknown( unknown_handler )

    method on_unknown( usage_callback:Function )
      on_unknown(
        function( parser:CommandLineParser ) with (usage_callback)
          Console.error.println( "=" * 80 )
          Console.error.[ println("ERROR: " + UnrecognizedOptionError(parser.arg)), println ]
          Console.error.println( "=" * 80 )
          usage_callback()
          System.exit 1
        endFunction
      )

    method option( name:String, &require_value, &optional, &multi, default=null:Variant, &alias=null:String, &aliases=null:String[] )
      if (name.ends_with('=') and not optional) require_value = true

      if (alias)
        ensure<<aliases>>
        aliases.add( alias )
      endIf

      if (aliases)
        local to_name = name.before_first( '=' )
        this.alias( forEach in aliases, to_name, &=require_value )
      endIf

      if (default) defaults[ _extract_name(name) ] = default

      if (name.ends_with('='))
        # --option=value
        name = name.before_first('=')
        handlers[ name ] =
          function( parser:CommandLineParser ) with (require_value,multi)
            block options=parser.options, name=parser.name.before_first('='), arg=parser.arg
              if (arg.contains('='))
                local value = arg.after_first( '=' )
                if (multi)
                  if (not options[name].is_list) options[ name ] = @[]
                  options[ name ].add( value )
                else
                  options[ name ] = value
                endIf
              elseIf (require_value)
                throw ValueExpectedError( arg )
              else
                # Be careful not to overwrite a default value if no value supplied
                if (not parser.defaults.contains(name) or not options.contains(name))
                  if (multi)
                    if (not options[name].is_list) options[ name ] = @[]
                    options[ name ].add( true )
                  else
                    options[ name ] = true
                  endIf
                endIf
              endIf
            endBlock
          endFunction
      else
        # --option arg
        handlers[ name ] =
          function( parser:CommandLineParser ) with (require_value,multi)
            if (require_value)
              if (parser.arg_reader.has_another)
                block options=parser.options, name=parser.name
                  if (multi)
                    if (not options[name].is_list) options[ name ] = @[]
                    options[ name ].add( parser.arg_reader.read )
                  else
                    options[ name ] = parser.arg_reader.read
                  endIf
                endBlock
              else
                throw ValueExpectedError( parser.arg )
              endIf
            elseIf (parser.arg.contains('='))
              throw UnexpectedValueError( parser.arg )
            else
              block options=parser.options, name=parser.name
                if (multi)
                  if (not options[name].is_list) options[ name ] = @[]
                  options[ name ].add( true )
                else
                  options[ name ] = true
                endIf
              endBlock
            endIf
          endFunction
      endIf

    method option( name:String, handler:Function(CommandLineParser), &alias=null:String, &aliases=null:String[], &require_value )
      if (alias)
        ensure<<aliases>>
        aliases.add( alias )
      endIf

      if (aliases)
        local to_name = name.before_first( '=' )
        this.alias( forEach in aliases, to_name, &=require_value )
      endIf

      handlers[ name ] = handler

    method parse( args:String[] )->Variant
      args .= cloned

      options  = @{}
      command  = @{ options }
      cur_group = "args"

      forEach (key in defaults.keys)
        options[ key ] = defaults[ key ]
      endForEach

      arg_reader = args.reader
      while (arg_reader.has_another)
        _handle( arg_reader.read )
      endWhile

      return command

    method _handle( arg:String )
      if (arg == "--" and ddash_disables)
        if (not command.contains(cur_group)) command[ cur_group ] = @[]
        while (arg_reader.has_another)
          command[ cur_group ].add( arg_reader.read )
        endWhile
        return
      endIf

      this.arg = arg
      name = _extract_name( arg )

      local handler = handlers[ arg.before_first('=') ]
      if (handler)
        handler( this )
      elseIf (arg.begins_with('-'))
        if (arg.count > 2 and allow_batching and not arg.begins_with("--") and handlers.contains("-"+arg[1]))
          # -abc == -a -b -c
          forEach (ch in arg from 1)
            _handle( "-" + ch )
          endForEach
        else
          this.unknown_handler( this )
        endIf
      else
        if (not command.contains(cur_group)) command[ cur_group ] = @[]
        command[ cur_group ].add( arg )
      endIf

    method _extract_name( name:String )->String
      if (name.begins_with("--"))    name = name.rightmost(-2)
      elseIf (name.begins_with('-')) name = name.rightmost(-1)
      return name.before_first( '=' )

endClass

class UnrecognizedOptionError : Error
  PROPERTIES
    name : String

  METHODS
    method init( name )
      prior.init( "Unrecognized option '$'." (name) )
endClass

class ValueExpectedError : Error
  PROPERTIES
    name : String

  METHODS
    method init( name )
      prior.init( "Value expected after '$'." (name) )
endClass

class UnexpectedValueError : Error
  PROPERTIES
    name : String

  METHODS
    method init( name )
      prior.init( "Unexpected value given with '$'." (name) )
endClass

