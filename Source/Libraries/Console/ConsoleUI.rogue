uses UI [export]

$include Console/ConsoleUIFont
$include Console/ConsoleUICanvas

uses Utility/Epilog
uses Utility/Timer

class ConsoleUI : UI
  GLOBAL PROPERTIES
    #bold_font      : ConsoleUIFont
    #inverse_font   : ConsoleUIFont
    #underline_font : ConsoleUIFont

  PROPERTIES
    mouse_position       : XY?
    button_pressed       = Dim<<Logical>>(2)
    is_running           : Logical

    max_events_processed = 512
    max_event_window_ms  = 8
    update_timer         = Timer()
    keep_active_timer    = Timer(1.0)

  METHODS
    #method init
    #  prior.init( Console.size )

    #method init( size:XY )
    #  prior.init( size )

    #method init( bounds:Box )
    #  prior.init( bounds )

    method init_object
      #if (not bold_font)
      #  bold_font = default_font.cloned.[ bold=true ]
      #  inverse_font = default_font.cloned.[ inverse=true ]
      #  underline_font = default_font.cloned.[ underline=true ]
      #endIf

    method drag_threshold->Real [override]
      return 1

    method draw
      prior.draw
      ConsoleUICanvas.display(0,0)
      Console.set_cursor( 0, bounds.y2 )

    method font->ConsoleUIFont [override]
      return ConsoleUIFont

    method handle( e:KeyEvent )
      keep_active( 0.5 )
      prior.handle( e )

    method handle( e:PointerEvent )
      if (mouse_position.exists) e.delta = e.position - mouse_position.value
      mouse_position = e.position
      keep_active( 0.5 )
      prior.handle( e )

    method handle( e:ScrollEvent )
      keep_active( 0.5 )
      prior.handle( e )

    method handle( e:TextEvent )
      keep_active( 0.5 )
      prior.handle( e )

    method handle( type:GlobalID, index:Int, e:ConsoleEvent )
      # Only called when e is a pointer or scroll event
      local pos = XY( e.x, e.y )
      Pointer.position = pos
      Pointer.positions.[clear].add( pos )
      handle( PointerEvent(type,pos,XY(0,0),index) )

    method keep_active( seconds:Real )
      keep_active_timer.init( seconds.or_larger(keep_active_timer.duration) )

    method on_draw [override]
      ConsoleUICanvas.resize( size.x, size.y )
      ConsoleUICanvas.fill( ' ' )

    method on_resize
      Console.clear
      ConsoleUICanvas.resize( placement.size.x, placement.size.y )
      prior.on_resize

    method on_update( dt:Real ) [override]
      if (not Console.immediate_mode) return

      if (keep_active_timer.is_expired)
        Console.force_input_blocking = true
        local has_event = Console.has_another_event  # blocks until input received
        Console.force_input_blocking = false
        if (not has_event) return
      endIf

      update_timer.init( max_event_window_ms / 1000.0 )

      loop max_events_processed

        if (update_timer.is_expired) escapeLoop

        if (not Console.immediate_mode) escapeLoop
        if (not Console.has_another_event) escapeLoop

        local event = Console.read_event
        which (event.type)
          case ConsoleEventType.CHARACTER
            local unicode = event.unicode
            local is_control = false
            if (unicode <= 31)
              # 0 (CTRL @) through 31 (CTRL -)
              which (unicode)
                case '\n', '\t', 8, 27
                  noAction
                others
                  is_control = true
                  unicode += 64
              endWhich
            endIf
            local (keycode,is_shifted) = Keycode.unicode_to_keycode( unicode )
            local scancode             = 0
            local modifiers = which{ is_shifted:KeyModifier.SHIFT || KeyModifier.NONE }
            Keyboard.key_pressed[ keycode ] = true
            Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = is_shifted
            Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = is_shifted
            if (is_control)
              modifiers |= KeyModifier.CONTROL
              Keyboard.key_pressed[ Keycode.LEFT_CONTROL ] = true
              Keyboard.key_pressed[ Keycode.RIGHT_CONTROL ] = true
            endIf
            handle( KeyEvent(keycode,scancode,&is_press,&!is_repeat,&=modifiers) )
            Keyboard.key_pressed[ keycode ] = false
            Keyboard.key_pressed[ Keycode.LEFT_SHIFT ]  = false
            Keyboard.key_pressed[ Keycode.RIGHT_SHIFT ] = false
            Keyboard.key_pressed[ Keycode.LEFT_CONTROL ] = false
            Keyboard.key_pressed[ Keycode.RIGHT_CONTROL ] = false
            handle( KeyEvent(keycode,scancode,&!is_press,&!is_repeat,&=modifiers) )
            handle( TextEvent(unicode,null) )

          case ConsoleEventType.POINTER_PRESS_LEFT
            send_release_event( 1, event )
            button_pressed[0] = true
            handle( <PRESS>, <LEFT>, event )

          case ConsoleEventType.POINTER_PRESS_RIGHT
            send_release_event( 0, event )
            button_pressed[1] = true
            handle( <PRESS>, PointerEvent.RIGHT, event )

          case ConsoleEventType.POINTER_RELEASE
            send_release_event( 0, event )
            send_release_event( 1, event )

          case ConsoleEventType.POINTER_MOVE
            handle( <MOVE>, 0, event )

          case ConsoleEventType.SCROLL_UP
            handle( ScrollEvent(XY(0,-1)) )

          case ConsoleEventType.SCROLL_DOWN
            handle( ScrollEvent(XY(0, 1)) )

        endWhich
      endLoop

    method run
      System.sleep(0.2)  # helps prevent initial screen corruption
      Console.immediate_mode = true
      Console.cursor.hide
      Console.clear

      try
        is_running = true
        while (is_running)
          update( Box(Console.width,Console.height) )
          if (needs_redraw)
            needs_redraw = false
            keep_active( 1.0 )
            draw
          endIf

          System.sleep( 1.0/60.0 )
        endWhile

        Console.immediate_mode = false
        Console.cursor.show

      catch (error:Error)
        Console.immediate_mode = false
        Console.cursor.show
        Console.clear
        println error
      endTry

    method send_release_event( index:Int, event:ConsoleEvent )
      if (not button_pressed[index]) return
      button_pressed[index] = false
      handle( <RELEASE>, index, event )

    method set_clip( @clip )
      if local clip_value = clip
        ConsoleUICanvas.clip = clip_value
      else
        ConsoleUICanvas.clip = null
      endIf

endClass
