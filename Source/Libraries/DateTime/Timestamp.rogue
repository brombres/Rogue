class Timestamp( value=System.time:Real ) [compound]
  NATIVE
    nativeHeader @|#if defined(%NS%ROGUE_PLATFORM_LINUX)
                  |  #include <time.h>
                  |#elif defined(%NS%ROGUE_PLATFORM_WINDOWS)
                  |  #include <time.h>
                  |  #include <sys/timeb.h>
                  |#endif

  DEFINITIONS
    JANUARY   = 1
    FEBRUARY  = 2
    MARCH     = 3
    APRIL     = 4
    MAY       = 5
    JUNE      = 6
    JULY      = 7
    AUGUST    = 8
    SEPTEMBER = 9
    OCTOBER   = 10
    NOVEMBER  = 11
    DECEMBER  = 12

    SUNDAY    = 0
    MONDAY    = 1
    TUESDAY   = 2
    WEDNESDAY = 3
    THURSDAY  = 4
    FRIDAY    = 5
    SATURDAY  = 6

  GLOBAL METHODS
    method create( date:Date, time:Time )->Timestamp
      return Timestamp( date.year, date.month, date.day, time.hour, time.minute, time.second, time.millisecond )

    method create( year:Int, month:Int, day:Int, hour=12:Int, minute=0:Int, second=0:Int, millisecond=0:Int )->Timestamp
      # A year earlier than 1970 will result a date of 1969-12-31 on Mac at least.
      # Therefore take the opportunity to adjust years < 100 to be prefixed with the current century,
      # e.g. 19 -> 2019.
      if (year < 100) year = (Timestamp.now.year/100)*100 + year
      native @|time_t cur_seconds = 0;
              |struct tm* zero_date = localtime( &cur_seconds );
              |
              |struct tm cur_date;
              |memcpy( &cur_date, zero_date, sizeof(struct tm) );
              |
              |cur_date.tm_year = $year - 1900;
              |cur_date.tm_mon  = $month - 1;
              |cur_date.tm_mday = $day;
              |cur_date.tm_hour = $hour;
              |cur_date.tm_min  = $minute;
              |cur_date.tm_sec  = $second;
              |cur_date.tm_isdst = -1;
              |
      return Timestamp( native( "((%Ns%RogueInt64)mktime(&cur_date))" )->Int64 * 1000 + millisecond )

    method create( date:String )->Timestamp
      local parts = String[]

      if (date.extract_strings("$(I)-$(I)-$(I)T$(I):$(I):$(I)",parts))
        # 2018-10-27T10:49
        local y  = parts[0]->Int
        local m  = parts[1]->Int
        local d  = parts[2]->Int
        local hh = parts[3]->Int
        local mm = parts[4]->Int
        local ss = parts[5]->Int
        return Timestamp( y, m, d, hh, mm, ss )

      elseIf (date.extract_strings("$ $ $(I) $(I):$(I):$(I) $ $(I)",parts))
        # Sat Oct 27 10:46:30 PDT 2018
        local y  = parts[7]->Int
        local m  = month_name_to_index( parts[1] )
        local d  = parts[2]->Int
        local hh = parts[3]->Int
        local mm = parts[4]->Int
        local ss = parts[5]->Int
        return Timestamp( y, m, d, hh, mm, ss )

      elseIf (date.extract_strings("$(I).$(I).$(I) $(I):$(I):$(I)*",parts))
        # 2018.10.27 11:18:00[.000][AM]
        local y  = parts[0]->Int
        local m  = parts[1]->Int
        local d  = parts[2]->Int
        local hh = parts[3]->Int
        local mm = parts[4]->Int
        local ss = parts[5]->Int
        local is_am = date.ends_with("am") or date.ends_with("AM")
        local is_pm = date.ends_with("pm") or date.ends_with("PM")
        local is_12 = is_am or is_pm
        if (is_12)
          date = date.leftmost(-2).trimmed
          if (is_am)
            if (hh == 12) hh = 0
          else
            if (hh != 12) hh += 12
          endIf
        endIf
        local ms = 0
        if (date[date.count-4] == '.')
          ms = date.after_last( '.' )->Int
          date = date.leftmost( -4 )
        endIf
        return Timestamp( y, m, d, hh, mm, ss, ms )

      elseIf (date.extract_strings("$(I).$(I).$(I)",parts) or
          date.extract_strings("$(I)/$(I)/$(I)",parts) or
          date.extract_strings("$(I)-$(I)-$(I)",parts))
        # 2018.10.27, 2018-10-27, 2018/10/27
        local a  = parts[0]->Int
        local b  = parts[1]->Int
        local c  = parts[2]->Int
        local y, m, d : Int
        if (a >= 100)
          # YYYY-MM-DD
          y = a
          m = b
          d = c
        elseIf (c >= 100)
          # MM-DD-YYYY
          m = a
          d = b
          y = c
        else
          # MM-DD-YY
          m = a
          d = b
          y = 2000 + c
        endIf
        return Timestamp.ymd( y, m, d )

      elseIf (date.extract_strings("$ $(I), $(I)",parts) or
          date.extract_strings("$ $(I) $(I)",parts))
        # August 29, 2019
        # August 29 2019
        local m  = month_name_to_index( parts[0]->String )
        local d  = parts[1]->Int
        local y  = parts[2]->Int
        return Timestamp.ymd( y, m, d )

      elseIf (date.extract_strings("$(I) $, $(I)",parts) or
          date.extract_strings("$(I) $ $(I)",parts))
        # 29 August, 2019
        # 29 August 2019
        local d  = parts[0]->Int
        local m  = month_name_to_index( parts[1]->String )
        local y  = parts[2]->Int
        return Timestamp.ymd( y, m, d )

      else
        println( "Unsupported date format: " + date )
        return Timestamp.ymd( 2000, 1, 1 )
      endIf

    method gmt_time_zone_offset->Int
      # From:
      # https://stackoverflow.com/a/44063597/135791
      local result : Int
      native@|    time_t gmt, rawtime = time(NULL);
             |    struct tm *ptm;
             |
             |#if !defined(WIN32)
             |    struct tm gbuf;
             |    ptm = gmtime_r(&rawtime, &gbuf);
             |#else
             |    ptm = gmtime(&rawtime);
             |#endif
             |    // Request that mktime() looksup dst in timezone database
             |    ptm->tm_isdst = -1;
             |    gmt = mktime(ptm);
             |
             |    $result = ((int)difftime(rawtime, gmt)) / 3600;
      return result

    method month_name_to_index( month_name:String )->Int
      # January->1, December->12
      # Accepts partial month names e.g. "Jan"
      if (month_name.count >= 3)
        local ch0 = month_name[0].to_lowercase
        local ch1 = month_name[1].to_lowercase
        local ch2 = month_name[2].to_lowercase
        which (ch0)
          case 'j'
            if (ch1 == 'a') return JANUARY
            which (ch2)
              case 'n': return JUNE
              case 'l': return JULY
            endWhich
          case 'f': return FEBRUARY
          case 'm'
            which (ch2)
              case 'r': return MARCH
              case 'y': return MAY
            endWhich
          case 'a'
            which (ch1)
              case 'p': return APRIL
              case 'u': return AUGUST
            endWhich
          case 's': return SEPTEMBER
          case 'o': return OCTOBER
          case 'n': return NOVEMBER
          case 'd': return DECEMBER
        endWhich
      endIf
      println( "Invalid month name: " + month_name )
      return JANUARY

    method now->Timestamp
      return Timestamp()

    method ymd( year:Int, month:Int, day:Int )->Timestamp
      # Use hour 12 instead of hour 0 as a default so that time change won't mess up the result of adding 24 hours to date
      return Timestamp( year, month, day, &hour=12 )

  GLOBAL PROPERTIES
    month_names = [ "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December" ]

    weekday_names = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]

  METHODS
    method year->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_year + 1900;
      return result

    method day->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_mday;
      return result

    method hashcode->Int
      return value->Int

    method hour->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_hour;
      return result

    method millisecond->Int
      return ((value * 1000.0) % 1000.0)->Int

    method minute->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_min;
      return result

    method month->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_mon + 1;
      return result

    method month_name->String
      return month_names[ month.clamped(1,month_names.count) - 1 ]

    method second->Int
      return (value % 60.0)->Int

    method hour12->Int
      local h = hour
      if (h == 0) return 12
      if (h <= 12) return h
      return (h - 12)

    method is_am->Logical
      return (hour < 12)

    method is_pm->Logical
      return (hour >= 12)

    method operator+( other:TimeInterval )->Timestamp
      return Timestamp( value + other.total_ms/1000.0 )

    method operator-( other:TimeInterval )->Timestamp
      return Timestamp( value - other.total_ms/1000.0 )

    method operator-( other:Timestamp )->TimeInterval
      return TimeInterval( value - other.value )

    method operator<>( other:Timestamp )->Int64
      return (value <> other.value)

    method operator==( other:Timestamp )->Logical
      return (value == other.value)

    method or_newer( other:Timestamp )->Timestamp
      if (value >= other.value) return this
      else                      return other

    method or_older( other:Timestamp )->Timestamp
      if (value <= other.value) return this
      else                      return other

    method to->Date
      return Date( year, month, day )

    method to->String
      return this->String( &ymd, &hms )

    method to->String( &ymd, &hms, &ms, &format=24:Int, &mdy )
      if (mdy)
        return "$ $, $" (month_names[month-1], day, year)
      endIf

      if (hms)
        which (format)
          case 12, 24: noAction
          others:      println( "Timestamp->String() &format should be 12 or 24." )
        endWhich
      endIf

      local result = String()
      if (ymd)
        result.[ print(year.format("04")), print('-') ]
        result.[ print(month.format("02")), print('-') ]
        result.print( day.format("02") )
        if (hms or ms) result.print( ' ' )
      endIf

      if (hms)
        if (format == 12)
          result.[ print(hour12), print(':') ]
        else
          result.[ print(hour.format("02")), print(':') ]
        endIf
        result.[ print(minute.format("02")), print(':') ]
        result.print( second.format("02") )
        if (ms)
          result.print( '.' )
          result.print( millisecond.format("03") )
        endIf
        if (format == 12)
          if (is_am) result.print " AM"
          else       result.print " PM"
        endIf
      endIf
      return result

    method to->Time
      return Time( hour, minute, second, millisecond )

    method weekday->Int
      local result : Int
      native @|time_t cur_seconds = (time_t)(int)$value;
              |struct tm* date = localtime( &cur_seconds );
              |$result = (%Ns%RogueInt32) date->tm_wday;
      return result

    method weekday_name->String
      return weekday_names[ weekday ]

endClass

