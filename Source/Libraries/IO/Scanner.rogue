$include IO/ScanPattern

class Scanner : Reader<<Character>>
  PROPERTIES
    data           : Character[]
    source         : String
    position       : Int
    count          : Int
    line           : Int
    column         : Int
    spaces_per_tab : Int

  METHODS
    method init( source, spaces_per_tab=0, &preserve_crlf )
      local tab_count = 0

      if (spaces_per_tab)
        tab_count = source.count('\t')
      endIf

      localize spaces_per_tab
      local new_count = source.count + tab_count*spaces_per_tab - tab_count
      data = Character[]( new_count )

      native @|char* src = $source->data->as_utf8 - 1;
              |%Ns%RogueCharacter* dest = $data->as_characters - 1;
              |for (RogueInt i=$source->count; --i>=0; )
              |{
              |  %Ns%RogueCharacter ch = (%Ns%RogueCharacter) *(++src);
              |  if (ch == '\t')
              |  {
              |    if ($spaces_per_tab)
              |    {
              |      for (RogueInt j=$spaces_per_tab; --j>=0; ) *(++dest) = ' ';
              |    }
              |    else
              |    {
              |      *(++dest) = ch;
              |    }
              |  }
              |  else if (ch == '\r')
              |  {
              |    if ($preserve_crlf) *(++dest) = '\r';
              |    else                --$new_count;
              |  }
              |  else if (ch & 0x80)
              |  {
              |    if (ch & 0x20)
              |    {
              |      if (ch & 0x10)
              |      {
              |        ch  = ((ch&7)<<18) | ((*(++src) & 0x3F) << 12);
              |        ch |= (*(++src) & 0x3F) << 6;
              |        *(++dest) = ch | (*(++src) & 0x3F);
              |      }
              |      else
              |      {
              |        ch  = ((ch&15)<<12) | ((*(++src) & 0x3F) << 6);
              |        *(++dest) = ch | (*(++src) & 0x3F);
              |      }
              |    }
              |    else
              |    {
              |      *(++dest) = ((ch&31)<<6) | (*(++src) & 0x3F);
              |    }
              |  }
              |  else
              |  {
              |    *(++dest) = ch;
              |  }
              |}
      data.count = new_count
      count = new_count
      line = 1
      column = 1
      position = 0

      source = String( data )

    method init( value:Variant, spaces_per_tab=0, &preserve_crlf )
      init( value->String, &=spaces_per_tab, &=preserve_crlf )

    method init( file:File, spaces_per_tab=0 )
      init( String(file), spaces_per_tab )

    method init( source:Character[], spaces_per_tab=0, &preserve_crlf )
      init( String(source), &=spaces_per_tab, &=preserve_crlf )

    method consume( ch:Character )->Logical
      if (position == count or data[position] != ch) return false
      read
      return true

    method consume( text:String )->Logical
      if (not next_is(text)) return false

      # Found a match; discard the characters
      # Must read() each one to track line & column correctly
      loop (text.count) read

      return true

    method consume( pattern:ScanPattern, buffer=null:String )->Logical
      return pattern.scan( this, buffer )

    method consume_any( ch:Character )->Logical
      if (not consume(ch)) return false
      while (consume(ch)) noAction
      return true

    method consume_any( characters:String )->Logical
      local found_any = false
      while (position < count)
        contingent
          local ch = data[position]
          forEach (possible_match in characters)
            sufficient (ch == possible_match)
          endForEach
          return found_any
        satisfied
          read
          found_any = true
        endContingent
      endWhile
      return found_any

    method consume_id( text:String )->Logical
      # deprecated
      return consume_identifier( text )

    method consume_identifier( text:String )->Logical
      local ch = peek( text.count )
      if (ch.is_alphanumeric or ch == '_') return false  # not end of identifier
      return consume( text )

    method consume_eols->Logical
      local found = false
      while (consume('\n')) found = true
      return found

    method consume_spaces->Logical
      local found = false
      while (consume(' ')) found = true
      return found

    method consume_whitespace->Logical
      local found = false
      while (consume(' ') or consume('\t')) found = true
      return found

    method location->ScannerLocation
      return ScannerLocation( position, line, column )

    method has_another->Logical
      return (position < count)

    method has_another( n:Int )->Logical
      return (position+n <= count)

    method next_is( ch:Character )->Logical
      if (position == count) return 0
      return (ch == data[position])

    method next_is( pattern:ScanPattern )->Logical
      return pattern.is_next( this )

    method next_is( text:String )->Logical
      if (position + text.count > count) return false
      forEach (ch at index in text)
        if (ch != data[position+index]) return false
      endForEach
      return true

    method next_is_hex_digit->Logical
      local ch = peek
      return (ch >= '0' and ch <= '9') or (ch >= 'a' and ch <= 'f') or (ch >= 'A' and ch <= 'F')

    method next_is_identifier( additional_characters="":String )->Logical
      return peek.is_identifier_start( additional_characters )

    method next_is_number( base=10:Int )->Logical
      if (next_is('-')) return peek(1).is_number( base )
      return peek.is_number( base )

    method next_is_real_number->Logical
      if (not next_is_number) return false
      use buffer = StringPool
        local pos = this.position
        local line = this.line
        local col  = this.column
        local result = scan_number_string( buffer )
        this.position = pos
        this.line = line
        this.column = col
        return result
      endUse

    method next_is_string->Logical
      local ch = peek
      return (ch == '"' or ch == '\'')

    method peek->Character
      if (position == count) return 0->Character
      return data[position]

    method peek( lookahead:Int )->Character
      # Zero-based
      local peek_pos = position + lookahead
      if (peek_pos >= count) return 0->Character
      return data[peek_pos]

    method read->Character
      local result = data[ position ]->Character
      ++position
      if (result == 10)
        ++line
        column = 1
      else
        ++column
      endIf
      return result

    method read_hex_value->Int
      local ch = read
      if (ch >= '0' and ch <= '9') return (ch - '0')
      if (ch >= 'a' and ch <= 'f') return 10 + (ch - 'a')
      if (ch >= 'A' and ch <= 'F') return 10 + (ch - 'A')
      return 0

    method read_line( buffer=String():String )->String
      while (has_another)
        local ch = read
        if (ch == '\n') escapeWhile
        buffer.print( ch )
      endWhile
      return buffer

    method reset
      count = data.count
      seek( 0 )

    method scan_args( separator="":String )->String[]
      local args = String[]
      consume_whitespace
      if (not has_another) return args

      local first = true
      while (first or has_another)
        first = false
        if (String.exists(separator) and not consume(separator)) escapeWhile
        local st = scan_string
        if (st)
          args.add( st )
        else
          args.add( scan_escaped_string(separator) )
        endIf
        consume_whitespace
      endWhile

      return args

    method scan_escaped_string( separator="":String )->String
      local result = String()
      while (has_another and
          ((String.exists(separator) and not next_is(separator)) or not consume_whitespace))
        local ch = read
        if (ch == '\\' and has_another) result.print( read )
        else                            result.print( ch )
      endWhile
      return result

    method scan_hex_sequence( buffer:String )
      local first = true
      while (first or consume(','))
        first = false
        local ch = scan_hex_value( &variable_length )->Character
        buffer.print( ch )
      endWhile

    method scan_hex_value( digits=6:Int, &variable_length )->Int
      local value = 0
      local i = 1
      while (i <= digits)
        if (not has_another or not next_is_hex_digit) return value
        local intval = read.to_number(16)
        value = (value:<<:4) + intval
        ++i
      endWhile
      return value

    method scan_identifier( additional_characters="":String, buffer=null:String )->String
      if (not peek.is_identifier_start(&=additional_characters)) return null
      if (not buffer) buffer = String()
      buffer.print( read )
      while (peek.is_identifier(&=additional_characters)) buffer.print( read )
      return buffer

    method scan_int( base=10:Int )->Int
      return scan_int64->Int

    method scan_int64( base=10:Int )->Int64
      local is_negative = consume( '-' )
      local result : Int64
      while (peek.is_number(base))
        result = result * base + read.to_number(base)
      endWhile
      if (is_negative) return -result
      else             return result

    method scan_number_string( buffer:String )->Logical
      # Returns true if number string contains a decimal point or an exponent
      local is_real = false
      if (consume('-')) buffer.print( '-' )
      while (peek.is_number) buffer.print( read )
      if (peek == '.' and peek(1) != '.')
        is_real = true
        consume('.')
        buffer.print( '.' )
        while (peek.is_number) buffer.print( read )
      endIf
      if (consume('e') or consume('E'))
        is_real = true
        buffer.print( 'e' )
        if (consume('-'))     buffer.print( '-' )
        elseIf consume( '+' ) buffer.print( '+' )
        while (peek.is_number) buffer.print( read )
      endIf
      return is_real

    method scan_real->Real
      use buffer = StringPool
        scan_number_string( buffer )
        return buffer->Real
      endUse

    method scan_string->String
      local ch = peek
      if (ch == '"')  return scan_string( '"', '"' )
      if (ch == '\'') return scan_string( '\'', '\'' )
      return null

    method scan_string( open:Character, close:Character, buffer=null:String )->String
      if (not consume(open)) return null
      if (not buffer) buffer = String()

      while (has_another and not consume(close))
        scan_string_character( buffer )
      endWhile
      return buffer

    method scan_string_character( buffer:String )
      if (not has_another) return

      local ch = peek

      if (ch == '\\')
        read

        local value : Int
        if     (consume('b')) value = 8
        elseIf (consume('e')) value = 27
        elseIf (consume('f')) value = 12
        elseIf (consume('n')) value = '\n'
        elseIf (consume('r')) value = '\r'
        elseIf (consume('t')) value = '\t'
        elseIf (consume('v')) value = 11
        elseIf (consume('0')) value = '\0'
        elseIf (consume('/')) value = '/'
        elseIf (consume('?')) value = '?'
        elseIf (consume('\''))value = '\''
        elseIf (consume('\\'))value = '\\'
        elseIf (consume('"')) value = '"'
        elseIf (consume('x')) value = scan_hex_value(2)
        elseIf (consume('u')) value = scan_hex_value(4)
        elseIf (consume('[')) scan_hex_sequence( buffer ); consume(']'); return
        elseIf (has_another)  value = read
        else                  value = '\\'

        buffer.print( value->Character )

      else
        buffer.print( read )
      endIf

    method seek( pos:Int )
      if (pos < 0)         pos = 0
      elseIf (pos > count) pos = count

      if (pos < position)
        position = 0
        line = 1
        column = 1
      endIf

      while (position < pos) read

    method seek_location( new_line:Int, new_column:Int )
      if (new_line < line or (new_line == line and new_column < column))
        # start over at (1,1)
        position = 0
        line     = 1
        column   = 1
      endIf

      while (has_another and line < new_line)     read
      while (has_another and column < new_column) read

    method set_location( line, column )

    method set_location( loc:ScannerLocation )
      position = loc.position
      line = loc.line
      column = loc.column

endClass

class ScannerLocation( position:Int, line:Int, column:Int ) [compound];
