module Geometry

class Triangle( a:XY, b:XY, c:XY ) [compound]
  # [a,b,c] should be defined in clockwise order to ensure visibility
  METHODS
    method bounding_box->Box
      local tl = a.or_smaller(b).or_smaller(c)
      local br = a.or_larger(b).or_larger(c)
      return Box.from_corners( tl, br )

    method centroid->XY
      return (a + b + c) / 3

    method contains( point:XY )->Logical
      # Using Barycentric technique as described here:
      #   http://www.blackpawn.com/texts/pointinpoly/default.html

      # Compute vectors
      local v0 = c - a
      local v1 = b - a
      local v2 = point - a

      # Compute dot products
      local dot00 = v0.dot(v0)
      local dot01 = v0.dot(v1)
      local dot02 = v0.dot(v2)
      local dot11 = v1.dot(v1)
      local dot12 = v1.dot(v2)

      # Compute barycentric coordinates
      local inverse_denom = 1.0 / (dot00 * dot11 - dot01 * dot01)
      local u = (dot11 * dot02 - dot01 * dot12) * inverse_denom
      local v = (dot00 * dot12 - dot01 * dot02) * inverse_denom

      # Check if point is in triangle
      return (u >= 0) and (v >= 0) and (u + v < 1)

    method hashcode->Int
      return a.hashcode ~ b.hashcode ~ c.hashcode

    method intersects( box:Box )->Logical
      return box->Quad.intersects( this )

    method intersects( circle:Circle )->Logical
      if (Line(a,b).intersects(circle)) return true
      if (Line(b,c).intersects(circle)) return true
      return (Line(a,c).intersects(circle))

    method intersects( quad:Quad )->Logical
      return quad.intersects( this )

    method intersects( line:Line )->Logical
      return line.intersects( this )

    method intersects( other:Triangle )->Logical
      if (Line(a,b).intersects(other)) return true
      if (Line(b,c).intersects(other)) return true
      return (Line(a,c).intersects(other))

    method operator+( position:XY )->Triangle
      return Triangle( a+position, b+position, c+position )

    method operator-( position:XY )->Triangle
      return Triangle( a-position, b-position, c-position )

    method operator*( scale:Real )->Triangle
      return Triangle( a*scale, b*scale, c*scale )

    method operator/( scale:Real )->Triangle
      return Triangle( a/scale, b/scale, c/scale )

    method operator*( scale:XY )->Triangle
      return Triangle( a*scale, b*scale, c*scale )

    method operator/( scale:XY )->Triangle
      return Triangle( a/scale, b/scale, c/scale )

    method operator<>( other:Triangle )->Int
      local result = a <> other.a
      if (result) return result
      result = b <> other.b
      if (result) return result
      return c <> other.c

    method operator?->Logical
      return a? or b? or c?

    method rotated( angle:Degrees )->Triangle
      return this.rotated( angle->Radians )

    method rotated( angle:Radians )->Triangle
      return Triangle( a.rotated(angle), b.rotated(angle), c.rotated(angle) )

    method to->String
      return "($,$,$)" (a,b,c)

endClass

class Triangle<<$DataType>>( a:$DataType, b:$DataType, c:$DataType ) [compound]
  # [a,b,c] should be defined in clockwise order to ensure visibility
  METHODS
    method description->String
      return "($,$,$)" (a,b,c)
endClass
