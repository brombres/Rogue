library Geometry

class Circle( position:XY, radius:Real ) [compound]
  METHODS
    method at( angle:Radians )->XY
      # Returns the point along the edge of the circle at the given angle.
      #
      # Example:
      #   one_oclock = circle.at( 2*Radians(pi/12) )
      return position + XY( radius, angle )

    method at( angle:Degrees )->XY
      # Returns the point along the edge of the circle at the given angle.
      #
      # Example:
      #   one_oclock = circle.at( Degrees(360.0/12.0) )
      return position + XY( radius, angle )

    method bounding_box->Box
      return Box( position-radius, radius*2 )

    method contains( point:XY )->Logical
      return (point - position).magnitude_squared <= radius*radius

    method hashcode->Int
      return position.hashcode ~ radius.hashcode

    method intersects( box:Box )->Logical
      return box.intersects( this )

    method intersects( other:Circle )->Logical
      local delta = (position - other.position).magnitude_squared
      return (delta <= (radius + other.radius) ^ 2)

    method intersects( quad:Quad )->Logical
      return quad.intersects( this )

    method intersects( line:Line )->Logical
      return line.intersects( this )

    method intersects( triangle:Triangle )->Logical
      return triangle.intersects( this )

    method operator==( other:Circle )->Logical
      return position == other.position and radius == other.radius

    method operator<>( other:Circle )->Logical
      local result = position <> other.position
      if (result) return result
      return radius <> other.radius

    method operator+( delta:XY )->Circle
      return Circle( position+delta, radius )

    method operator-( delta:XY )->Circle
      return Circle( position-delta, radius )

    method operator*( scale:Real )->Circle
      return Circle( position*scale, radius*scale )

    method operator/( scale:Real )->Circle
      return Circle( position/scale, radius/scale )

    method print_to( buffer:PrintWriter )
      buffer.print "(@"
      buffer.print position
      buffer.print ", r:"
      buffer.print radius
      buffer.print ')'

    method to->String
      return "(@$, r:$)" (position,radius)
endClass

