library Geometry

class XYZ( x:Real, y:Real, z=0:Real ) [compound]
  GLOBAL METHODS
    method create->XYZ
      return XYZ( 0, 0, 0 )

		method create( xy:XY )->XYZ
      return XYZ( xy.x, xy.y, 0 )

		method create( xy:XY, z:Real )->XYZ
      return XYZ( xy.x, xy.y, z )

    method zero->XYZ
      return XYZ( 0, 0, 0 )

  METHODS
    method cross( other:XYZ )->XYZ
      return XYZ(
          y*other.z - (z*other.y),
          z*other.x - (x*other.z),
          x*other.y - (y*other.x)
      )

    method dot( other:XYZ )->Real
      return x*other.x + y*other.y + z*other.z

    method hashcode->Int
      return x.hashcode ~ y.hashcode ~ z.hashcode

    method magnitude->Real
      return ( x*x + y*y + z*z ).sqrt

    method magnitude_squared->Real
      return x*x + y*y + z*z

    method normalized->XYZ
      local sum_of_squares = x*x + y*y + z*z
      if ((1.0 - sum_of_squares).abs <= 0.0001) return this # already normalized
      local m = ( sum_of_squares ).sqrt
      return XYZ( x/m, y/m, z/m )

    method operator==( other:XYZ )->Logical
      return (x == other.x) and (y == other.y) and (z == other.z)

    method operator<>( other:XYZ )->Int
      if (x == other.x)
        if (y == other.y) return z <> other.z
        else              return y <> other.y
      else
        return x <> other.x
      endIf

    method operator+( other:XYZ )->XYZ
      return XYZ( x+other.x, y+other.y, z+other.z )

    method operator+( value:Real )->XYZ
      return XYZ( x+value, y+value, z+value )

    method operator-()->XYZ
      return XYZ( -x, -y, -z )

    method operator-( other:XYZ )->XYZ
      return XYZ( x-other.x, y-other.y, z-other.z )

    method operator-( value:Real )->XYZ
      return XYZ( x-value, y-value, z-value )

    method operator*( other:XYZ )->XYZ
      return XYZ( x*other.x, y*other.y, z*other.z )

    method operator*( value:Real )->XYZ
      return XYZ( x*value, y*value, z*value )

    method operator/( other:XYZ )->XYZ
      return XYZ( x/other.x, y/other.y, z/other.z )

    method operator/( value:Real )->XYZ
      return XYZ( x/value, y/value, z/value )

    method operator%( other:XYZ )->XYZ
      return XYZ( x%other.x, y%other.y, z%other.z )

    method operator%( value:Real )->XYZ
      return XYZ( x%value, y%value, z%value )

    method operator^( other:XYZ )->XYZ
      return XYZ( x^other.x, y^other.y, z^other.z )

    method operator^( value:Real )->XYZ
      return XYZ( x^value, y^value, z^value )

    method print_to( buffer:PrintWriter )
      buffer.print '('
      x.print_to( buffer )
      buffer.print ','
      y.print_to( buffer )
      buffer.print ','
      z.print_to( buffer )
      buffer.print ')'

    method to->XY [essential]
      return XY(x,y)

    method to->String
      return "[$,$,$]" (x,y,z)

    method xy->XY
      return XY(x,y)
endClass

class XYZ32( x:Real32, y:Real32, z:Real32 ) [compound]
  GLOBAL METHODS
    method create( xyz:XYZ )->XYZ32
      return XYZ32( xyz.x, xyz.y, xyz.z )

  METHODS
    method hashcode->Int
      return x.hashcode ~ y.hashcode ~ z.hashcode

    method operator?->Logical
      return x or y or z

    method operator<>( other:XY )->Int
      if (x == other.x)
        if (y == other.y)
          return z <> other.z
        else
          return y <> other.y
        endIf
      else
        return x <> other.x
      endIf

    method to->XYZ
      return XYZ( x, y, z )
endClass

class DegreesXYZ( value:XYZ ) [compound]
  GLOBAL METHODS
    method create( x:Real, y:Real, z:Real )->DegreesXYZ
      return DegreesXYZ( XYZ(x,y,z) )

  METHODS
    method to->RadiansXYZ
      return RadiansXYZ( Degrees(value.x)->Radians, Degrees(value.y)->Radians, Degrees(value.z)->Radians )

    method to->String
      return %value

    method to->XYZ
      return value
endClass

class RadiansXYZ( value:XYZ ) [compound]
  GLOBAL METHODS
    method create( x:Real, y:Real, z:Real )->RadiansXYZ
      return RadiansXYZ( XYZ(x,y,z) )

  METHODS
    method to->DegreesXYZ
      return DegreesXYZ( Radians(value.x)->Degrees, Radians(value.y)->Degrees, Radians(value.z)->Degrees )

    method to->String
      return %value

    method to->XYZ
      return value
endClass

augment Rogue::Random
  METHODS
    method xyz->XYZ:
      # Creates a XYZ compound with randomized (x,y,z) values,
      # each in the range (0.0,1.0) exclusive.
      return XYZ( real, real, real )

    method xyz( low:Real, high:Real )->XYZ
      # Returns a XYZ compound with an evenly distributed random real number in
      # the range (low,high) exclusive (does not include low or high).
      # for each of the (x,y,z) values.
      return XYZ((real * (high-low)) + low,(real * (high-low)) + low,(real * (high-low)) + low)
endAugment
