library Geometry

class IntXY( x:Int, y:Int ) [essential compound]
  DEFINITIONS
    zero = IntXY(0,0)

  GLOBAL METHODS
    method create( r:Real, angle:Radians )->IntXY
      return IntXY( r*angle.cos.floor, r*angle.sin.floor )

    method create( r:Real, angle:Degrees )->IntXY
      local radians = angle->Radians
      return IntXY( r*angle.cos.floor, r*angle.sin.floor )

    method create( n:Int )->IntXY
      return IntXY(n,n)

    method create( real_xy:XY )->IntXY
      return IntXY( real_xy.x.floor, real_xy.y.floor )

    method operator*( a:Int, b:IntXY )->IntXY
      return IntXY( a*b.x, a*b.y )

    method operator*( a:XY, b:IntXY )->XY
      return XY( a.x*b.x, a.x*b.y )

    method operator*( a:IntXY, b:IntXY )->IntXY
      return IntXY( a.x*b.x, a.y*b.y )

    method operator*( a:IntXY, b:Int )->IntXY
      return IntXY( a.x*b, a.y*b )

    method operator*( a:IntXY, b:Real )->XY
      return XY( a.x*b, a.y*b )

    method operator*( a:IntXY, b:XY )->XY
      return XY( a.x*b.x, a.y*b.y )

    method operator/( a:Int, b:IntXY )->IntXY
      return IntXY( a/b.x, a/b.y )

    method operator/( a:XY, b:IntXY )->XY
      return XY( a.x/b.x, a.x/b.y )

    method operator%( a:Int, b:IntXY )->IntXY
      return IntXY( a%b.x, a%b.y )

    method operator%( a:XY, b:IntXY )->XY
      return XY( a.x%b.x, a.x%b.y )

    method operator+( a:IntXY, b:IntXY )->IntXY
      return IntXY( a.x+b.x, a.y+b.y )

    method operator+( a:IntXY, b:XY )->XY
      return XY( a.x+b.x, a.y+b.y )

    method operator-( a:IntXY, b:IntXY )->IntXY
      return IntXY( a.x-b.x, a.y-b.y )

    method operator-( a:IntXY, b:XY )->XY
      return XY( a.x-b.x, a.y-b.y )

    method operator/( a:IntXY, b:IntXY )->IntXY
      return IntXY( which{b.x:a.x/b.x || 0}, which{b.y:a.y/b.y || 0} )

    method operator/( a:IntXY, b:Int )->IntXY
      if (b == 0) return IntXY.zero
      return IntXY( a.x/b, a.y/b )

    method operator/( a:IntXY, b:Real )->XY
      return XY( a.x/b, a.y/b )

    method operator/( a:IntXY, b:XY )->XY
      return a->XY / b

    method operator%( a:IntXY, b:IntXY )->IntXY
      return IntXY( a.x%b.x, a.y%b.y )

    method operator%( a:IntXY, b:Int )->IntXY
      if (b == 0) return a
      return IntXY( a.x%b, a.y%b )

    method operator%( a:IntXY, b:XY )->XY
      return XY( a.x%b.x, a.y%b.y )

    method operator^( a:IntXY, b:IntXY )->IntXY
      return IntXY( a.x^b.x, a.y^b.y )

    method operator^( a:IntXY, b:Int )->IntXY
      return IntXY( a.x^b, a.y^b )


  METHODS
    method abs->IntXY
      return IntXY( x.abs, y.abs )

    method clamped( low:IntXY, high:IntXY )->IntXY
      return this.clamped_low(low).clamped_high(high)

    method clamped_high( limit:IntXY )->IntXY
      return IntXY( this.x.clamped_high(limit.x), this.y.clamped_high(limit.y) )

    method clamped_low( limit:IntXY )->IntXY
      return IntXY( this.x.clamped_low(limit.x), this.y.clamped_low(limit.y) )

    method cross( other:IntXY )->Int
      return x * other.y - y * other.x

    method degrees->Degrees
      return Radians( y->Real.atan2(x) )->Degrees

    method distance_to( other:IntXY )->Int
      return (other - this).magnitude

    method dot( other:IntXY )->Int
      return x * other.x + y * other.y

    method hashcode->Int
      return x.hashcode ~ y.hashcode

    method is_zero->Logical
      return x == 0 and y == 0

    method magnitude->Int
      return (x*x + y*y).sqrt

    method magnitude_squared->Int
      return x*x + y*y

    method max->Int
      return which{ x>=y:x || y }

    method min->Int
      return which{ x<=y:x || y }

    method max( other:IntXY )->IntXY
      # Returns an IntXY containing the max X and the max Y of 'this' and 'other'.
      local max_x = which{ x>=other.x:x || other.x }
      local max_y = which{ y>=other.y:y || other.y }
      return IntXY( max_x, max_y )

    method min( other:IntXY )->IntXY
      # Returns an IntXY containing the min X and the min Y of 'this' and 'other'.
      local min_x = which{ x<=other.x:x || other.x }
      local min_y = which{ y<=other.y:y || other.y }
      return IntXY( min_x, min_y )

    method normal->IntXY
      # Returns the normal of this vector.
      return IntXY( -y, x )

    method normalized->IntXY
      local msq = x*x + y*y
      if (msq <= 0) return IntXY(0,0)
      local m = msq.sqrt
      if (m) return IntXY( x/m, y/m )
      else   return IntXY.zero

    method operator?->Logical
      return x or y

    method operator==( other:IntXY )->Logical
      return x == other.x and y == other.y

    method operator<>( other:IntXY )->Int
      if (x == other.x) return y <> other.y
      else              return x <> other.x

    method operator-()->IntXY
      return IntXY( -x, -y )

    method or_larger( other:IntXY )->IntXY
      # Returns the largest X and the largest Y between this value and the other value.
      return IntXY( this.x.or_larger(other.x), this.y.or_larger(other.y) )

    method or_smaller( other:IntXY )->IntXY
      # Returns the smaller X and the smaller Y between this value and the other value.
      return IntXY( this.x.or_smaller(other.x), this.y.or_smaller(other.y) )

    method print_to( buffer:PrintWriter )
      buffer.print '('
      x.print_to( buffer )
      buffer.print ','
      y.print_to( buffer )
      buffer.print ')'

    method product->Int
      return x * y

    method radians->Radians
      return Radians( y->Real.atan2(x) )

    method rotated( angle:Degrees )->IntXY
      return IntXY( this.magnitude, radians + angle->Radians )

    method rotated( angle:Radians )->IntXY
      return IntXY( magnitude, radians + angle )

    method sign->IntXY
      return IntXY( x.sign, y.sign )

    method sum->Int
      return x + y

    method to->String
      return "($,$)"(x,y)

    method to->XY
      return XY(x,y)

    method xv->IntXY
      return IntXY(x,0)

    method yv->IntXY
      return IntXY(0,y)

    method yx->IntXY
      return IntXY(y,x)
endClass

augment Rogue::Random
  METHODS
    method int_xy( limit:Int )->Geometry::IntXY
      return Geometry::IntXY( int32(limit), int32(limit) )

    method int_xy( limit:Geometry::IntXY )->Geometry::IntXY
      return Geometry::IntXY( int32(limit.x), int32(limit.y) )
endAugment

augment Rogue::XY
  GLOBAL METHODS
    method create( xy:IntXY )->XY
      return XY(xy.x,xy.y)

    method operator*( a:XY, b:IntXY )->XY
      return XY( a.x*b.x, a.y*b.y )

    method operator*( a:IntXY, b:XY )->XY
      return XY( a.x*b.x, a.x*b.y )

    method operator/( a:XY, b:IntXY )->XY
      return XY( a.x/b.x, a.y/b.y )

    method operator/( a:IntXY, b:XY )->XY
      return XY( a.x/b.x, a.x/b.y )

    method operator%( a:IntXY, b:XY )->XY
      return XY( a.x%b.x, a.x%b.y )

  METHODS

endAugment

augment Rogue::XYZ
  GLOBAL METHODS
    method create( xy:IntXY )->XYZ
      return XYZ( xy.x, xy.y, 0 )

    method create( xy:IntXY, z:Real )->XYZ
      return XYZ( xy.x, xy.y, z )

  METHODS
    method to->IntXY [essential]
      return IntXY(x.floor,y.floor)

endAugment
