module Geometry

class Quad( a:XY, b:XY, c:XY, d:XY ) [compound]
  GLOBAL METHODS
    method create->Quad
      return Quad( XY(0,0), XY(0,0), XY(0,0), XY(0,0) )

    method create( bounds:Box )->Quad
      return Quad( bounds.top_left, bounds.top_right, bounds.bottom_right, bounds.bottom_left )

  METHODS
    method bounds->Box
      return this->Box

    method centroid->XY
      return (a + b + c + d) / 4

    method contains( point:XY )->Logical
      local top_left  = a.or_smaller(b).or_smaller(c).or_smaller(d)
      if (point.x < top_left.x or point.y < top_left.y) return false

      local bottom_right = a.or_larger(b).or_larger(c).or_larger(d)
      if (point.x >= bottom_right.x or point.y >= bottom_right.y) return false

      return (Triangle(a,b,c).contains(point) or Triangle(a,c,d).contains(point))

    method hashcode->Int
      return a.hashcode ~ b.hashcode ~ c.hashcode ~ d.hashcode

    method intersects( line:Line )->Logical
      # Returns true if this Quad quad and `line` intersect.

      # See if any lines intersect
      if (line.intersects(Line(a,b))) return true
      if (line.intersects(Line(b,c))) return true
      if (line.intersects(Line(c,d))) return true
      if (line.intersects(Line(d,a))) return true

      # This quad may fully contain the line - test one of the points
      return this.contains(line.a)

    method intersects( box:Box )->Logical
      return intersects( box->Quad )

    method intersects( other:Quad )->Logical
      if (not this.bounds.intersects(other.bounds)) return false

      # See if any lines intersect
      local line = Line( this.a, this.b )
      if (line.intersects(Line(other.a,other.b))) return true
      if (line.intersects(Line(other.b,other.c))) return true
      if (line.intersects(Line(other.c,other.d))) return true
      if (line.intersects(Line(other.d,other.a))) return true

      line = Line( this.b, this.c )
      if (line.intersects(Line(other.a,other.b))) return true
      if (line.intersects(Line(other.b,other.c))) return true
      if (line.intersects(Line(other.c,other.d))) return true
      if (line.intersects(Line(other.d,other.a))) return true

      line = Line( this.c, this.d )
      if (line.intersects(Line(other.a,other.b))) return true
      if (line.intersects(Line(other.b,other.c))) return true
      if (line.intersects(Line(other.c,other.d))) return true
      if (line.intersects(Line(other.d,other.a))) return true

      line = Line( this.d, this.a )
      if (line.intersects(Line(other.a,other.b))) return true
      if (line.intersects(Line(other.b,other.c))) return true
      if (line.intersects(Line(other.c,other.d))) return true
      if (line.intersects(Line(other.d,other.a))) return true

      # Either the quads don't intersect or one completely contains the other.
      # We can test any one point from each to see if it lies within the other.
      if (this.contains(other.a)) return true
      if (other.contains(this.a)) return true

      return false

    method intersects( circle:Circle )->Logical
      if (Line(a,b).intersects(circle)) return true
      if (Line(b,c).intersects(circle)) return true
      if (Line(c,d).intersects(circle)) return true
      if (Line(d,a).intersects(circle)) return true

      # The circle could be entirely inside this quad
      return (this.contains(circle.position))

    method intersects( triangle:Triangle )->Logical
      return (Triangle(a,b,c).intersects(triangle) or Triangle(a,c,d).intersects(triangle))

    method operator+( position:XY )->Quad
      return Quad( a+position, b+position, c+position, d+position )

    method operator-( position:XY )->Quad
      return Quad( a-position, b-position, c-position, d-position )

    method operator*( scale:Real )->Quad
      return Quad( a*scale, b*scale, c*scale, d*scale )

    method operator/( scale:Real )->Quad
      return Quad( a/scale, b/scale, c/scale, d/scale )

    method operator*( scale:XY )->Quad
      return Quad( a*scale, b*scale, c*scale, d*scale )

    method operator/( scale:XY )->Quad
      return Quad( a/scale, b/scale, c/scale, d/scale )

    method rotated( angle:Degrees )->Quad
      return this.rotated( angle->Radians )

    method rotated( angle:Radians )->Quad
      return Quad( a.rotated(angle), b.rotated(angle), c.rotated(angle), d.rotated(angle) )

    method to->Box
      local top_left  = a.or_smaller(b).or_smaller(c).or_smaller(d)
      local bottom_right = a.or_larger(b).or_larger(c).or_larger(d)
      return Box( top_left, bottom_right - top_left )

    method to->String
      return "[$ $ $ $]" (a,b,c,d)
endClass

class Quad<<$DataType>>( a:$DataType, b:$DataType, c:$DataType, d:$DataType ) [compound]
  METHODS
    method to->String
      return "[$ $ $ $]" (a,b,c,d)
endClass

class Quad32( a:XY32, b:XY32, c:XY32, d:XY32 ) [compound]
  GLOBAL METHODS
    method create( quad:Quad )->Quad32
      return Quad32( quad.a, quad.b, quad.c, quad.d )

  METHODS
    method hashcode->Int
      return a.hashcode ~ b.hashcode ~ c.hashcode ~ d.hashcode

    method operator<>( other:Quad32 )->Int
      local result = a <> other.a
      if (result) return result
      result = b <> other.b
      if (result) return result
      result = c <> other.c
      if (result) return result
      return d <> other.d

    method to->Quad
      return Quad( a, b, c, d )

    method to->String
      return "[$ $ $ $]" (a,b,c,d)
endClass
