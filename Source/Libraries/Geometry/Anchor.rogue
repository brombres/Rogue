library Geometry

class Anchor( position:XY ) [compound]
  DEFINITIONS
    TOP_LEFT      = Anchor( XY( 0.0, 0.0) )
    TOP           = Anchor( XY( 0.5, 0.0) )
    TOP_RIGHT     = Anchor( XY( 1.0, 0.0) )
    LEFT          = Anchor( XY( 0.0, 0.5) )
    CENTER        = Anchor( XY( 0.5, 0.5) )
    RIGHT         = Anchor( XY( 1.0, 0.5) )
    BOTTOM_LEFT   = Anchor( XY( 0.0, 1.0) )
    BOTTOM        = Anchor( XY( 0.5, 1.0) )
    BOTTOM_RIGHT  = Anchor( XY( 1.0, 1.0) )

    LEFT_TOP      = TOP_LEFT
    TOP_CENTER    = TOP
    CENTER_TOP    = TOP
    RIGHT_TOP     = TOP_RIGHT
    LEFT_CENTER   = LEFT
    CENTER_LEFT   = LEFT
    LEFT_BOTTOM   = BOTTOM_LEFT
    BOTTOM_CENTER = BOTTOM
    CENTER_BOTTOM = BOTTOM
    RIGHT_BOTTOM  = BOTTOM_RIGHT

  GLOBAL METHODS
    method operator*( size:IntXY, anchor:Anchor )->IntXY
      # size * anchor -> delta (or the anchor position within the area (0,0,size))
      # Display.size * Anchor.TOP_LEFT     -> IntXY(0,0)
      # Display.size * Anchor.BOTTOM_RIGHT -> Display.size
      return IntXY( anchor.position.x*size.x, anchor.position.y*size.y )

    method operator*( anchor:Anchor, size:IntXY )->IntXY
      # anchor * size -> delta (or the anchor position within the area (0,0,size))
      # Anchor.TOP_LEFT     * Display.size -> IntXY(0,0)
      # Anchor.BOTTOM_RIGHT * Display.size -> Display.size
      return IntXY( anchor.position.x*size.x, anchor.position.y*size.y )

  METHODS
    method hashcode->Int
      return position.hashcode

    method operator==( other:Anchor )->Logical
      return position == other.position

    method name->String
      which (position)
        case TOP_LEFT.position:     return "TOP_LEFT"
        case TOP.position:          return "TOP"
        case TOP_RIGHT.position:    return "TOP_RIGHT"
        case LEFT.position:         return "LEFT"
        case CENTER.position:       return "CENTER"
        case RIGHT.position:        return "RIGHT"
        case BOTTOM_LEFT.position:  return "BOTTOM_LEFT"
        case BOTTOM.position:       return "BOTTOM"
        case BOTTOM_RIGHT.position: return "BOTTOM_RIGHT"
        others:                     return "CUSTOM"
      endWhich

    method print_to( buffer:PrintWriter )
      buffer.print( name )

    method to->String
      local result = String()
      print_to( result )
      return result
endClass
