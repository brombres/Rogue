library Graphics

class Color( argb:Int32 ) [compound]
  DEFINITIONS
    BLACK       = Graphics::Color( 0xff000000 )
    BLUE        = Graphics::Color( 0xff0000FF )
    BROWN       = Graphics::Color( 0xff882222 )
    CYAN        = Graphics::Color( 0xff00FFFF )
    DARK_GRAY   = Graphics::Color( 0xff444444 )
    DARK_GREEN  = Graphics::Color( 0xff008800 )
    GRAY        = Graphics::Color( 0xff888888 )
    GREEN       = Graphics::Color( 0xff00FF00 )
    LIGHT_GRAY  = Graphics::Color( 0xffCCCCCC )
    LIGHT_GREEN = Graphics::Color( 0xff88FF88 )
    MAGENTA     = Graphics::Color( 0xffFF00FF )
    ORANGE      = Graphics::Color( 0xffFF8800 )
    PINK        = Graphics::Color( 0xffFFCCCC )
    PURPLE      = Graphics::Color( 0xff880088 )
    RED         = Graphics::Color( 0xffFF0000 )
    ROGUE_BLUE  = Graphics::Color( 0xff3333FF )
    ROYAL_BLUE  = Graphics::Color( 0xff4169E1 )
    SKY_BLUE    = Graphics::Color( 0xff87CEEB )
    TRANSPARENT = Graphics::Color( 0 )
    YELLOW      = Graphics::Color( 0xffFFFF00 )
    WHITE       = Graphics::Color( 0xffFFFFFF )

  GLOBAL METHODS
    method create( argb:Int )->Color
      return Color( argb->Int32 )

    method create( r:Int, g:Int, b:Int, a=255:Int )->Color
      return Color( a.clamped(0,255):<<:24 | r.clamped(0,255):<<:16 | g.clamped(0,255):<<:8 | b.clamped(0,255) )

    method create( r:Real, g:Real, b:Real, a=1.0:Real )->Color
      return Color( (r*255)->Int, (g*255)->Int, (b*255)->Int, (a*255)->Int )

  METHODS
    method abgr->Int32
      return (argb & 0xFF00FF00) | ((argb:<<:16) & 0x00FF0000) | ((argb:>>>:16) & 0x000000FF)

    method alpha->Real
      return ((argb :>>: 24) & 255) / 255.0

    method alpha_byte->Int
      return (argb :>>: 24) & 255

    method alpha_premultiplied->Color
      local a = alpha_byte
      return Color( (red_byte*a)/255, (green_byte*a)/255, (blue_byte*a)/255, a )

    method alpha_unmultiplied->Color
      local a = alpha_byte
      if (a == 0) return Color(0)
      return Color( (red_byte*255)/a, (green_byte*255)/a, (blue_byte*255)/a, a )

    method blue->Real
      return (argb & 255) / 255.0

    method blue_byte->Int
      return argb & 255

    method green->Real
      return ((argb :>>: 8) & 255) / 255.0

    method green_byte->Int
      return (argb :>>: 8) & 255

    method hashcode->Int
      return argb

    method is_opaque->Logical
      return ((argb & 0xFF000000) == 0xFF000000)

    method operator*( other:Color )->Color
      local a = other.alpha
      local inverse_a = 1.0 - a
      local r = red * inverse_a   + other.red *a
      local g = green * inverse_a + other.green *a
      local b = blue * inverse_a  + other.blue *a
      return Color( r, g, b, alpha*inverse_a+a )

    method operator&( n:Int )->Color
      return Color( argb & n )

    method operator|( n:Int )->Color
      return Color( argb | n )

    method operator!->Color
      return Color( !argb )

    method operator?->Logical
      return argb?

    method operator<>( other:Color )->Int
      return argb <> other.argb

    method red->Real
      return ((argb :>>: 16) & 255) / 255.0

    method red_byte->Int
      return (argb :>>: 16) & 255

    method rgba->Int32
      return ((argb:<<:8) & 0xFFFFFF00) | ((argb:>>>:24) & 0x000000FF)

    method to->String
      return argb->String(&hex)

    method with_alpha( a:Real )->Color
      return with_alpha_byte( (a*255)->Int )

    method with_alpha_byte( a:Int )->Color
      return Color( (a.clamped(0,255) :<<: 24) | (this.argb & 0xFFffFF) )

    method with_opacity( a:Real )->Color
      return Color( (Int((argb:>>:24) * a):<<:24) | (argb & 0xffFFff) )

endClass

augment Rogue::Real
  METHODS
    method lerp( a:Graphics::Color, b:Graphics::Color )->Graphics::Color
      return Graphics::Color( this.lerp(a.red,b.red), this.lerp(a.green,b.green), this.lerp(a.blue,b.blue), this.lerp(a.alpha,b.alpha) )
endAugment

augment Rogue::Random
  METHODS
    method color->Graphics::Color
      # Returns a color with randomized (r,g,b) values and an
      # alpha of 1.0.
      return Graphics::Color.create(real,real,real)
endAugment

augment Rogue::ConsoleStyle
  METHODS
    method bg_color( bg:Color, output=Global:PrintWriter )
      # 24-bit truecolor mode
      output.flush
      output.print "\e[48;2;"
      output.print ((bg.argb:>>>:16) & 0xFF)
      output.print ';'
      output.print ((bg.argb:>>>:8) & 0xFF)
      output.print ';'
      output.print (bg.argb & 0xFF)
      output.print 'm'
      output.flush

    method colors( fg:Color, bg:Color, output=Global:PrintWriter )
      output.flush
      output.print "\e[38;2;"
      output.print ((fg.argb:>>>:16) & 0xFF)
      output.print ';'
      output.print ((fg.argb:>>>:8) & 0xFF)
      output.print ';'
      output.print (fg.argb & 0xFF)
      output.print ";48;2;"
      output.print ((bg.argb:>>>:16) & 0xFF)
      output.print ';'
      output.print ((bg.argb:>>>:8) & 0xFF)
      output.print ';'
      output.print (bg.argb & 0xFF)
      output.print 'm'
      output.flush

    method fg_color( fg:Color, output=Global:PrintWriter )
      # 24-bit truecolor mode
      output.flush
      output.print "\e[38;2;"
      output.print ((fg.argb:>>>:16) & 0xFF)
      output.print ';'
      output.print ((fg.argb:>>>:8) & 0xFF)
      output.print ';'
      output.print (fg.argb & 0xFF)
      output.print 'm'
      output.flush

endAugment

augment Rogue::DataReader
  METHODS
    method read_colors( buffer=Graphics::Color[]:Graphics::Color[], aligned_data=null:Int? )->Graphics::Color[]
      local color_count = read_int32x
      buffer.reserve( color_count )

      read_logical  # ignore alignment flag
      skip( 4 )     # ignore alignment buffer

      if (aligned_data)
        while (position & (aligned_data.value-1)) read_byte  # alignment padding
      endIf

      local byte_order_marker = read_int32

      if (byte_order_marker == 0x11223344)
        loop (color_count)
          buffer.add( Color(read_int32) )
        endLoop
      else
        loop (color_count)
          buffer.add( Color(read_int32_low_high) )
        endLoop
      endIf

      return buffer

endAugment

augment Rogue::DataWriter
  METHODS
    method write_colors( colors:Graphics::Color[], align_data=null:Int? )
      write_int32x( colors.count + 1 )   # +1 for BOM

      write_logical( false )  # reader-side flag for alignment performed
      write_int32( 0 )        # reader-side alignment padding buffer

      if (align_data)
        # writer-side alignment padding
        while (position & (align_data.value-1)) write_byte( 0 )
      endIf

      # Byte Order Marker
      write_int32_native_byte_order( 0x11223344 )

      if (System.is_native_byte_order_low_high)
        forEach (color in colors)
          write_int32_low_high( color.argb )
        endForEach
      else
        forEach (color in colors)
          write_int32( color.argb )
        endForEach
      endIf
endAugment

