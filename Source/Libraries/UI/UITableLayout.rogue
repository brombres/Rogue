library UI

class UITableLayout : UILayout
  PROPERTIES
    is_adding  : Logical
    next_empty : Int
    columns    = UITableColumnInfo[]
    rows       = UITableRowInfo[]
    cell_span  = IntXY[]

  METHODS
    method init
      prior.init
      resize( 1, 1 )

    method init( size:IntXY )
      prior.init( size )
      resize( 1, 1 )

    method init( column_count:Int, row_count:Int )
      prior.init
      resize( column_count, row_count )

    method add( component:Entity ) [override]
      if (is_adding)
        prior.add( component )
      else
        is_adding = true

        if (next_empty == -1)
          if (columns.is_empty)
            resize( 1, rows.count )
            add( component )
            is_adding = false
            return
          elseIf (rows.count == 1)
            resize( columns.count+1, rows.count )
          else
            resize( columns.count, rows.count+1 )
          endIf
        endIf

        set( next_empty, component )
        _advance_next_empty

        is_adding = false
      endIf

    method add( component:Entity, span:IntXY )
      if (span == IntXY(1,1))
        add( component )  # regular add
        return

      elseIf (next_empty == -1)
        if (rows.count == 1 and span.y == 1)
          # Extend new row
          set( columns.count, 0, component, span )
        else
          # Make new row(s)
          set( 0, rows.count, component, span )
        endIf

      else
        set( next_empty%columns.count, next_empty/columns.count, component, span )

      endIf

    method add_row
      resize( columns.count, rows.count+1 )

    method column( i:Int )->UITableColumnInfo
      assert (i >= 0 and i < columns.count)
      return columns[i]

    method draw_children [override]
      use subcomponents = collect<<Drawable2D>>
        local column_count = columns.count
        forEach (j of rows)
          forEach (i of columns)
            local index = j*column_count+i
            if (cell_span[index].min > 0)
              subcomponents[index].draw
            endIf
          endForEach
        endForEach
      endUse

    method get( i:Int, j:Int )->UIComponent
      local index = index_of( i, j )
      if (not index) return null
      return get( index.value )

    method index_of( i:Int, j:Int )->Int?
      if (i < 0 or i >= columns.count) return null
      if (j < 0 or j >= rows.count)    return null
      return j*columns.count + i

    method measure_content_height( subcomponents:UIComponent[] )->Int?
      local total_h = 0
      forEach (j of rows)
        local h = _row_height( subcomponents, j )
        if (not h) return null
        total_h += h.value
      endForEach
      return total_h

    method measure_content_width( subcomponents:UIComponent[] )->Int?
      local total_w = 0
      forEach (i of columns)
        local w = _column_width( subcomponents, i )
        if (not w) return null
        total_w += w.value
      endForEach
      return total_w

    method measure_height( container_height:Int? )->Int?
      if (is_fixed_height) return size.y

      if (not ((forEach in rows).fixed_height))
        return prior.measure_height( container_height )
      endIf
      local h = 0
      h += (forEach in rows).fixed_height.value
      return h

    method measure_width( container_width:Int? )->Int?
      if (is_fixed_width) return size.x

      if (not ((forEach in columns).fixed_width))
        return prior.measure_width( container_width )
      endIf

      local w = 0
      w += (forEach in columns).fixed_width.value
      return w

    method resize( new_columns:Int, new_rows:Int )
      next_empty = -1
      if (count)
        # Remove cells or add empty cells to maintain structure
        if (new_columns == 0 or new_rows == 0)
          clear
        else
          use new_cells = WorkList<<UIComponent>>
            forEach (j in 0..<new_rows)
              forEach (i in 0..<new_columns)
                local cell = get( i, j )
                if (cell) new_cells.add( cell )
                else      new_cells.add( UITableEmptyCell() )
              endForEach
            endForEach
            clear
            prior.add( forEach in new_cells )
          endUse

          use new_span = WorkList<<IntXY>>
            forEach (j in 0..<new_rows)
              forEach (i in 0..<new_columns)
                local index = index_of( i, j )
                if (index?) new_span.add( cell_span[index.value] )
                else        new_span.add( IntXY(1,1) )
              endForEach
            endForEach
            cell_span.clear
            cell_span.add( new_span )
          endUse
        endIf
      else
        loop (new_columns*new_rows) prior.add( UITableEmptyCell() )
        if (count) next_empty =  0
        else       next_empty = -1
      endIf

      while (columns.count < new_columns) columns.add( UITableColumnInfo() )
      while (rows.count < new_rows) rows.add( UITableRowInfo() )
      columns.discard_from( new_columns )
      rows.discard_from( new_rows )
      loop (columns.count*rows.count - cell_span.count) cell_span.add( IntXY(1,1) )

      _advance_next_empty

    method row( j:Int )->UITableRowInfo
      assert (j > 0 and j < rows.count)
      return rows[j]

    method set( i:Int, j:Int, component:UIComponent )
      if (component is null) component = UITableEmptyCell()
      if (i >= columns.count or j >= rows.count)
        resize( columns.count.or_larger(i+1), rows.count.or_larger(j+1) )
      endIf

      local index = j * columns.count + i
      temporarily is_adding = true
        set( index, component )
      endTemporarily
      if (index == next_empty) _advance_next_empty

    method set( i:Int, j:Int, component:UIComponent, span:IntXY )
      if (span == IntXY(1,1))
        set( i, j, component )
        return
      else
        set( i+(span.x-1), j+(span.y-1), UITableEmptyCell() )
        set( i, j, component )
        set_span( i, j, span )
      endIf

    method set_span( i:Int, j:Int, new_span:IntXY )
      local index = index_of(i,j)
      assert index.exists
      local old_span = cell_span[index.value]
      if (old_span.max > 1)
        # Reset the old span shadow to contain spans of 1 before zeroing the new shadow
        _set_span_shadow( i, j, old_span.x, old_span.y, 1 )
      endIf
      local w = new_span.x.clamped_high( columns.count - i )
      local h = new_span.y.clamped_high( rows.count - j )
      _set_span_shadow( i, j, w, h, 0 )
      cell_span[index.value] = IntXY(w,h)
      _advance_next_empty

    method span( i:Int, j:Int )->IntXY
      local index = index_of(i,j)
      assert index
      return cell_span[index.value]

    method update_subcomponent_heights( subcomponents:UIComponent[], container_height:Int )
      local total_h = 0
      local undefined_count = 0
      local undefined_weight = 0.0

      use row_heights = WorkList<<Int?>>
        forEach (j of rows)
          local h = _row_height( subcomponents, j )
          if (h)
            total_h += h.value
            row_heights.add( h )
          else
            ++undefined_count
            undefined_weight += rows[j].weight
            row_heights.add( null )
          endIf
        endForEach

        undefined_weight .= clamped_low(1)
        local excess_h = container_height - total_h
        local remaining_h = excess_h
        forEach (j of rows)
          local h = row_heights[j]
          if (not h)
            if (undefined_count == 1)
              h = remaining_h
            else
              h = (excess_h * (rows[j].weight / undefined_weight)).floor->Int
              remaining_h -= h.value
            endIf
            --undefined_count
            row_heights[j] = h
          endIf

          forEach (row at row_j in rows)
            row.height = row_heights[row_j].value
          endForEach
        endForEach

        forEach (j of rows)
          local column_count = columns.count
          forEach (i of columns)
            local index = j*column_count + i
            if (cell_span[index].y)
              local cell = subcomponents[ index ]
              cell.update_layout_height( _spanned_height(i,j) )
            endIf
          endForEach
        endForEach
      endUse

    method update_subcomponent_widths( subcomponents:UIComponent[], container_width:Int )
      local total_w = 0
      local undefined_count = 0
      local undefined_weight = 0.0

      use column_widths = WorkList<<Int?>>
        forEach (i of columns)
          local w = _column_width( subcomponents, i )
          if (w)
            total_w += w.value
            column_widths.add( w )
          else
            ++undefined_count
            undefined_weight += columns[i].weight
            column_widths.add( null )
          endIf
        endForEach

        undefined_weight .= clamped_low(1)
        local excess_w = container_width - total_w
        local remaining_w = excess_w
        forEach (i of columns)
          local w = column_widths[i]
          if (not w)
            if (undefined_count == 1)
              w = remaining_w
            else
              w = (excess_w * (columns[i].weight / undefined_weight)).floor->Int
              remaining_w -= w.value
            endIf
            --undefined_count
            column_widths[i] = w
          endIf

          forEach (column at column_i in columns)
            column.width = column_widths[column_i].value
          endForEach
        endForEach

        forEach (i of columns)
          local column_count = columns.count
          forEach (j of rows)
            local index = j*column_count + i
            if (cell_span[index].x)
              local cell = subcomponents[ index ]
              cell.update_layout_width( _spanned_width(i,j) )
            endIf
          endForEach
        endForEach
      endUse

    method update_subcomponent_placement( subcomponents:UIComponent[], container:IntBox ) [override]
      local column_count = columns.count
      local cursor_start = container.position
      forEach (row at j in rows)
        local cursor = cursor_start
        forEach (column at i in columns)
          local index = j*column_count + i
          if (cell_span[index].x)
            local cell = subcomponents[ index ]
            cell.update_layout_placement( IntBox(cursor,cell.size) )
          endIf
          cursor += IntXY(column.width,0)
        endForEach
        cursor_start += IntXY(0,row.height)
      endForEach

    method _advance_next_empty
      forEach (i in next_empty..<count)
        local cell = this[i]
        if (cell instanceOf UITableEmptyCell and cell_span[i].x)
          next_empty = i
          return
        endIf
      endForEach
      next_empty = -1

    method _column_width( subcomponents:UIComponent[], i:Int )->Int?
      local max_w = columns[i].fixed_width
      if (max_w) return max_w

      local column_count = columns.count
      forEach (j of rows)
        local index = j*column_count + i
        if (cell_span[index].x == 1)
          local cell = subcomponents[ index ]
          local w = cell.measure_width( null )
          if (w)
            if (max_w) max_w = max_w.value.or_larger( w.value )
            else       max_w = w.value
          endIf
        endIf
      endForEach

      return max_w

    method _row_height( subcomponents:UIComponent[], j:Int )->Int?
      local max_h = rows[j].fixed_height
      if (max_h) return max_h

      local column_count = columns.count
      forEach (i of columns)
        local index = j*column_count + i
        if (cell_span[index].y == 1)
          local cell = subcomponents[ index ]
          local h = cell.measure_height( null )
          if (h)
            if (max_h) max_h = max_h.value.or_larger( h.value )
            else       max_h = h.value
          endIf
        endIf
      endForEach

      return max_h

    method _set_span_shadow( x:Int, y:Int, w:Int, h:Int, value:Int )
      local cols = columns.count
      local new_span = IntXY(value,value)
      forEach (j in y..<y+h)
        forEach (i in x..<x+w)
          cell_span[ j*cols+i ] = new_span
        endForEach
      endForEach

    method _spanned_height( i:Int, j:Int )->Int
      local spanned_rows = cell_span[ j*columns.count+i ].y
      local result = 0
      forEach (y in 0..<spanned_rows)
        result += rows[j+y].height
      endForEach
      return result

    method _spanned_width( i:Int, j:Int )->Int
      local spanned_columns = cell_span[ j*columns.count+i ].x
      local result = 0
      forEach (x in 0..<spanned_columns)
        result += columns[i+x].width
      endForEach
      return result
endClass

class UITableEmptyCell : UIComponent;

class UITableColumnInfo
  PROPERTIES
    fixed_width : Int?
    width       : Int   # computed
    weight      = 1.0
endClass

class UITableRowInfo
  PROPERTIES
    fixed_height : Int?
    height       : Int
    weight       = 1.0
endClass

