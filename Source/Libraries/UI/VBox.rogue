library UI

class VBox : Component
  METHODS
    method minimum_layout_size( available_size:XY, &limited )->XY [override]
      local w = 0.0
      local h = 0.0
      use components = WorkList<<Component>>
        collect_child_display_components( components )

        forEach (component in components)
          local sz = component.resolve_layout_size( available_size, &=limited )
          w .= or_larger( sz.x )
          h += sz.y
        endForEach
      endUse
      return XY(w,h)

    method perform_layout( position )
      local total_h = 0.0
      local w = 0.0
      use components = WorkList<<Component>>
        collect_child_display_components( components )

        forEach (component in components)
          local sz = component.size
          total_h += sz.y
          w .= or_larger( sz.x )
        endForEach

        local pos = XY.zero
        pos.y = Box(XY(w,total_h)).positioned_within( content_bounds, alignment ).position.y
        forEach (component in components)
          component.perform_layout(
            component.bounds.positioned_within( Box(pos,size.x,component.size.y), alignment ).position
          )
          pos.y += component.size.y
        endForEach
      endUse

    method resolve_child_layout_sizes [override]
      local available_size = content_size

      use components = WorkList<<Component>>
        collect_child_display_components( components )

        use info_list = WorkList<<ComponentSizeInfo>>

          # Determine the min & max widths of all child components.
          local total_weight : Real
          forEach (component in components)
            local min_size = component.resolve_layout_size( XY.zero, &limited )
            local max_size = component.resolve_layout_size( available_size, &limited )
            if (min_size == max_size)
              available_size.y -= min_size.y
            elseIf (component.weight)
              total_weight += component.weight.y
              info_list.add( ComponentSizeInfo(component, &=min_size, &=max_size) )
            endIf
          endForEach

          local snap = UI.snap_to_pixel_coordinates

          block
            local repeat = true
            while (repeat)
              repeat = false
              local remaining_height = available_size.y
              local remaining_count = info_list.count
              forEach (info in rewriter=info_list.rewriter)
                local h = remaining_height
                if (remaining_count > 1)
                  h = h * info.component.weight.y / total_weight
                  if (snap) h .= floor
                endIf
                if (info.max_size.y < h)
                  # Component's max size falls short of its share. Let it keep its max size and
                  # remove it from the list by not rewriting it.
                  available_size.y -= info.max_size.y
                  repeat = true
                elseIf (info.min_size.y > h)
                  # Component's min size exceeds its share. Assign it its min size and
                  # remove it from the list by not rewriting it.
                  info.component.size.y = info.min_size.y
                  available_size.y -= info.min_size.y
                  repeat = true
                else
                  # Component can size at least as big as its proportional share; keep it for the next pass.
                  rewriter.write( info )
                endIf
                remaining_height -= h
                --remaining_count
              endForEach
            endWhile
          endBlock

          # Assign remaining components their proportional share of available width.
          block
            local remaining_height = available_size.y
            local remaining_count = info_list.count
            forEach (info in info_list)
              local h = remaining_height
              if (remaining_count > 1)
                h = h * info.component.weight.y / total_weight
                if (snap) h .= floor
              endIf
              info.component.size.y = h
              remaining_height -= h
              --remaining_count
            endForEach
          endBlock
        endUse

        # All child components have their own size set or assigned; have them recursively
        # determine their child sizes.
        forEach (component in components)
          component.resolve_child_layout_sizes
        endForEach
      endUse

endClass

class UIGeneratedVBox : VBox
  # Special subclass for operator overrides
  METHODS
    method operator/( rhs:Component )->Component [override]
      add( rhs )
      return this
endClass
