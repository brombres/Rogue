library UI

$include UI/Keyboard
$include UI/Pointer

class Event
  PROPERTIES
    is_consumed  : Logical
    refcount     : Int
    timestamp    : Int

  METHODS
    method init( timestamp=System.execution_time_ms )
      is_consumed = false
      refcount    = 0

    method init( existing:Event )
      is_consumed = existing.is_consumed
      timestamp   = existing.timestamp

    method cloned->ThisType [propagated]
      return ThisType( this )

    method consume
      is_consumed = true

    method release [propagated]
      --refcount
      if (refcount == 0)
        ObjectPool<<ThisType>>.on_end_use( this )
      endIf

    method retain
      ++refcount
endClass

class KeyEvent : Event
  PROPERTIES
    keycode   : Keycode   # if Keycode.UNICODE then generated event w/o keycode or scancode.
    scancode  : Int
    unicode   : Character
    is_press  : Logical
    is_repeat : Logical
    modifiers : KeyModifier

  METHODS
    method init
      prior.init

    method init( keycode, scancode, is_press=false, is_repeat=false, modifiers=Keyboard.modifier_state )
      prior.init
      unicode = Keycode.keycode_to_unicode( keycode, is_shift_pressed )

    method init( unicode, is_press=false, is_repeat=false, modifiers=Keyboard.modifier_state )
      prior.init
      keycode = Keycode.UNDEFINED
      scancode = 0

    method init( existing:KeyEvent )
      prior.init( existing )
      keycode   = existing.keycode
      scancode  = existing.scancode
      unicode   = existing.unicode
      is_press  = existing.is_press
      is_repeat = existing.is_repeat
      modifiers = existing.modifiers

    method is_alt_pressed->Logical
      return (modifiers & KeyModifier.ALT)?

    method is_control_pressed->Logical
      return (modifiers & KeyModifier.CONTROL)?

    method is_os_pressed->Logical
      return (modifiers & KeyModifier.OS)?

    method is_press( keycode:Keycode )->Logical
      return this.keycode == keycode and is_press

    method is_repeat( keycode:Keycode )->Logical
      return this.keycode == keycode and is_repeat

    method is_release->Logical
      return not this.is_press

    method is_release( keycode:Keycode )->Logical
      return this.keycode == keycode and not is_press

    method is_shift_pressed->Logical
      return (modifiers & KeyModifier.SHIFT)?

    method to->String
      local buffer = String()
      if (unicode)
        buffer.print unicode
        buffer.print ' '
        buffer.print " ("
        buffer.print keycode
        buffer.print ' '
      else
        buffer.print keycode
        buffer.print " ("
      endIf

      buffer.print keycode.value
      buffer.print ')'

       if (is_press)
         if (is_repeat) buffer.print( " pressed (repeating)" )
         else           buffer.print( " pressed" )
       else
         buffer.print( " released" )
       endIf

       if (is_consumed) buffer.print( " [consumed]" )

       return buffer

endClass


class TextEvent : Event
  PROPERTIES
    character : Character
    text      : String

  METHODS
    method init
      prior.init

    method init( character, text )
      prior.init

    method init( existing:TextEvent )
      prior.init( existing )
      character = existing.character
      text      = existing.text

    method text->String
      if (not @text) text = "" + character
      return @text

    method count->Int
      if (@text) return @text.count
      else       return 1

    method operator==( ch:Character )->Logical
      return (this.character == ch and (@text is null or @text.count == 1))

    method operator==( value:String )->Logical
      which (value.count)
        case 0
          return false
        case 1
          return (character == value[0])
        case 2
          return (text == value)
      endWhich

    method to->String
      return text
endClass


class PointerEvent : Event
  DEFINITIONS
    LEFT     = 0
    RIGHT    = 1
    MIDDLE   = 2

  PROPERTIES
    type      : GlobalID
    position  : XY
    delta     : XY
    index     : Int
    cancelled : Logical
    # When a touch event in progress is interrupted, a <RELEASE> event is sent
    # with .cancelled==true.

  METHODS
    method init
      prior.init

    method init( type, position, delta, index, cancelled=false )
      prior.init

    method init( existing:PointerEvent )
      prior.init( existing )
      type      = existing.type
      position  = existing.position
      delta     = existing.delta
      index     = existing.index
      cancelled = existing.cancelled

    method is_drag_move->Logical
      return (this.type == <DRAG_MOVE>)

    method is_drag_start->Logical
      return (this.type == <DRAG_START>)

    method is_drag_stop->Logical
      return (this.type == <DRAG_STOP>)

    method is_move->Logical
      return (this.type == <MOVE>)

    method is_press->Logical
      return (this.type == <PRESS>)

    method is_press( button_index:Int )->Logical
      return (this.type == <PRESS> and index == button_index)

    method is_press_left->Logical
      return is_press( 0 )

    method is_press_right->Logical
      return is_press( 1 )

    method is_press_middle->Logical
      return is_press( 2 )

    method is_release->Logical
      return (this.type == <RELEASE>)

    method is_release( button_index:Int )->Logical
      return (this.type == <RELEASE> and index == button_index)

    method is_release_left->Logical
      return is_release( 0 )

    method is_release_right->Logical
      return is_release( 1 )

    method is_release_middle->Logical
      return is_release( 2 )

    method operator+( offset:XY )->PointerEvent
      return PointerEvent( type, position+offset, delta, index, cancelled )

    method operator-( offset:XY )->PointerEvent
      return this + (-offset)

    method to->String
      local buffer = String()
      buffer.print( "Pointer " )
      which (type)
        case <MOVE>:       buffer.print( "move" )
        case <PRESS>:      buffer.[ print("press index "), print(index) ]
        case <RELEASE>:    buffer.[ print("release index "), print(index) ]
        case <DRAG_START>: buffer.print( "drag start" )
        case <DRAG_MOVE>:  buffer.print( "drag move" )
        case <DRAG_STOP>:  buffer.print( "drag stop" )
      endWhich
      buffer.[ print(" at "), print(position) ]
      if (is_consumed) buffer.print( " (consumed)" )

      return buffer
endClass


class ScrollEvent : Event
  PROPERTIES
    delta         : XY
    is_precise    : Logical
      # True for Apple Magic Mouse and Trackpad, AKA supports gestures and momentum.
      # If this is true then is_progress and is_momentum are valid (and vice versa).
    in_progress   : Logical
      # macOS: in_progress means that either the finger is still resting on the Magic Mouse/trackpad
      # or that a "momentum scroll" is active. Either way scroll events are guaranteed to continue
      # to be received until one where 'in_progress' is false.
    is_momentum   : Logical
    density       : Int

  METHODS
    method init
      prior.init

    method init( delta, is_precise=false, in_progress=false, is_momentum=false, density=1 )
      prior.init

    method init( existing:ScrollEvent )
      prior.init( existing )
      delta         = existing.delta
      is_precise    = existing.is_precise
      in_progress   = existing.in_progress
      is_momentum   = existing.is_momentum
      density       = existing.density

    method to->String
      local buffer = String().[ print("Scroll "), print( delta ) ]
      buffer.print( " [$x]"(density) )
      if (in_progress) buffer.print( " [in progress]" )
      if (is_momentum) buffer.print( " [momentum]" )
      if (is_consumed) buffer.print( " (consumed)" )
      return buffer
endClass

# Note: this is a utility class used by VScrollView, not an Event.
class ScrollRate
  # macOS with Magic Mouse or trackpad:
  # - Tracks 0.25 seconds of continuous-gesture scroll data and accelerates
  #   the scroll deltas to allow behavior similar to built-in OS scrolling.
  #
  # Other OS or input device:
  # - Scales each scroll delta by 'base_scale' with no acceleration.
  PROPERTIES
    base_scale     : Real
    delta          : XY
    history_x      = ScrollEvent[]
    history_y      = ScrollEvent[]
    acceleration_x = 1.0
    acceleration_y = 1.0

  METHODS
    method init( base_scale=5.0 )

    method add( e:ScrollEvent )->XY
      # Returns the scaled or accelerated scroll-delta.
      contingent
        necessary (e.is_precise)
        necessary (not e.is_momentum)

        delta = XY(
          _process<<history_x,x,acceleration_x>>(e),
          _process<<history_y,y,acceleration_y>>(e)
        )

      unsatisfied
        delta = e.delta * base_scale
        if (not e.is_precise) delta *= e.density
        history_x.clear
        history_y.clear
        acceleration_x = 1.0
        acceleration_y = 1.0

      endContingent

      return delta

    method .same_direction( v1:Real, v2:Real )->Logical
      if (v1 == 0 or v2 == 0) return true  # 0 matches either sign
      return not ((v1 > 0) xor (v2 > 0))

    method _process<<$history,$xy,$acceleration>>( e:ScrollEvent )->Real
      while ($history.count and $history.first.timestamp < e.timestamp - 250) $history.remove_first

      local result = 0.0
      if ($history.count and .same_direction($history.first.delta.$xy,e.delta.$xy))
        $history.add( e )
        result += (forEach in $history).delta.$xy
        result /= $history.count
        if ($history.count == 1)
          $acceleration = 1.0
        else
          result *= $acceleration
        endIf
      else
        $history.[ clear, add(e) ]
        result = e.delta.$xy
        $acceleration = 1.0
      endIf

      $acceleration = ($acceleration * 1.25).clamped_high( base_scale*2 )
      return result
endClass
