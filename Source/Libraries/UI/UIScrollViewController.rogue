library UI

uses Utility/Timer

class UIScrollViewController
  PROPERTIES
    view     : UIScrollView

  METHODS
    method init( view )
      noAction

    method after_prepare_layout
      noAction

    method after_update
      noAction

    method after_update_layout
      noAction

    method content_offset->XY
      return view.content_offset

    method on( e:PointerEvent )
      noAction

    method on( e:ScrollEvent )
      noAction

    method on_prepare_layout
      noAction

    method on_update
      noAction

    method on_update_layout
      noAction

    method scroll_to( new_offset:IntXY )
      content_offset = new_offset

    method scroll_to_bottom
      view.content_offset = view.bottom_offset

    method scroll_to_top
      view.content_offset = view.top_offset

    method set_content_offset( new_offset:XY )
      view.content_offset = new_offset

endClass


class StandardUIScrollViewController : UIScrollViewController
  PROPERTIES
    velocity : XY
    decay    : XY

    tracks_bottom          = true
    scrolling_to           : XY?
    is_scrolling_to_bottom : Logical
    is_scrolling_to_top    : Logical

    active_scroll          = false
    allow_momentum_scroll  = true
    allow_overscroll       = true
    clamp_to_bounds        = true

    scroll_rate = ScrollRate( default_scroll_rate )

    is_pressed  = false
    is_dragging = false
    drag_time   = Timer()
    drag_start  : IntXY
    drag_pos    : IntXY
    drag_deltas = IntXY[]
    drag_delta  : IntXY

  METHODS
    method after_update_layout
      if (tracks_bottom)
        content_offset = IntXY( 0, view.bottom_offset )
      endIf

    method default_scroll_rate->Int
      if (UI.active instanceOf ConsoleUI) return 3
      else                                return 5

    method on( e:PointerEvent )
      if (e.is_press)
        if (not is_dragging and view.contains(e))
          if (view.capture_pointer_focus)
            decay = 0.10   # halt any scrolling going on
            is_pressed = true
            drag_time.restart
            drag_pos = e.position
            drag_start = drag_pos
            e.consume
            return
          endIf
        endIf

      elseIf (e.is_move)
        if (is_dragging)
          drag_delta = (e.position - drag_pos).yv
          drag_pos = e.position
          scroll( drag_delta )
          e.consume
          return
        elseIf (is_pressed)
          if (e.position.distance_to(drag_pos) >= UI.active.drag_threshold)
            is_dragging = true
            drag_deltas.clear
            drag_pos = e.position
            e.consume
            return
          endIf
        else
          # Pass move event to children
          if (view.first_child)
            view.first_child.dispatch( e )
            return
          endIf
        endIf

      elseIf (e.is_release)
        is_pressed = false
        view.release_pointer_focus
        if (is_dragging)
          is_dragging = false
          decay = 0.10
          if (drag_deltas.count)
            local sum = IntXY.zero
            sum += (forEach in drag_deltas)
            local avg = sum / drag_deltas.count
            if (avg.y.abs >= 5)
              decay = 0.96
              velocity += avg.yv
            endIf
          endIf
          e.consume
          return
        else
          decay = 0.10
          if (velocity.abs.max < 1)
            # We pressed and released list without dragging it.  Send a press/release event
            # to subcomponents.
            local e_press = e.cloned.[ type=PointerEvent.PRESS ]
            view.on_select( e_press, e )
            return
          endIf
        endIf
      endIf

    method on( e:ScrollEvent )
      if (not allow_momentum_scroll)
        if (e.is_momentum)
          if (not e.in_progress) allow_momentum_scroll = true
          return
        endIf
      endIf

      if (Pointer.position and view.display_bounds.contains(Pointer.position.value))
        scroll( scroll_rate.add(e).yv, &clamp=not e.precise )
        if (e.in_progress)
          if (e.is_momentum)
            if (view.content_offset.y > view.top_offset or view.content_offset.y < view.bottom_offset)
              allow_momentum_scroll = false  # ran OOB
            endIf
          else
            active_scroll = true
          endIf
        else
          allow_momentum_scroll = true
          active_scroll = false
        endIf
      else
        # Mouse may have moved out while still scrolling
        active_scroll = false
        allow_momentum_scroll = true
      endIf

    method on_prepare_layout
      if (not tracks_bottom)
        tracks_bottom = (content_offset.y <= view.bottom_offset)
      endIf

    method on_update
      local ticks = (UI.active.dt * 60)->Int.clamped_low(1)
      loop (ticks) on_update_tick

    method on_update_tick
      if (is_scrolling_to_bottom)
        local bottom_offset = view.bottom_offset
        local delta = bottom_offset - content_offset.y
        content_offset = XY( content_offset.x, content_offset.y + delta*0.1 )
        if ((bottom_offset - content_offset.y).abs < 1)
          #if (not view.is_modified)
            content_offset = XY( content_offset.x, bottom_offset )
            is_scrolling_to_bottom = false
            tracks_bottom = true
          #endIf
        endIf

      elseIf (is_scrolling_to_top)
        local top_offset = view.top_offset
        local delta = top_offset - content_offset.y
        content_offset = XY( content_offset.x, content_offset.y + delta*0.1 )
        if ((top_offset - content_offset.y).abs < 1)
          #if (not view.is_modified)
            content_offset = XY( content_offset.x, top_offset )
            is_scrolling_to_top = false
            tracks_bottom = (content_offset.y <= view.bottom_offset)
          #endIf
        endIf

      elseIf (scrolling_to)
        local target = scrolling_to.value
        local delta = target - content_offset
        content_offset += delta * 0.1
        if ((target - content_offset).abs.max < 1)
          #if (not view.is_modified)
            content_offset = target
            scrolling_to = null
            tracks_bottom = (content_offset.y <= view.bottom_offset)
          #endIf
        endIf
      endIf

      if (is_dragging)
        # Save 1/10th second of drag deltas to calculate swipe velocity on drag release
        if (drag_deltas.count >= 10) drag_deltas.remove_first
        drag_deltas.add( drag_delta )

      elseIf (not active_scroll)
        if (not velocity.is_zero)
          content_offset += velocity
          velocity *= decay
          if (velocity.x.abs < 0.1) velocity .= yv
          if (velocity.y.abs < 0.1) velocity .= xv
        endIf

        if (clamp_to_bounds)
          local bottom_offset = view.bottom_offset
          local _offset = view.content_offset
          if (_offset.y > 0)
            if (_offset.abs.y < 1)
              content_offset = _offset.xv
            else
              content_offset = _offset * XY(1,0.8)
              decay = XY(0,0.5)
            endIf
          elseIf (_offset.y < bottom_offset)
            local delta = (_offset.y - bottom_offset)
            if (delta.abs < 1)
              content_offset = XY( _offset.x, bottom_offset )
            else
              content_offset = XY( _offset.x, (bottom_offset + delta * 0.8) )
              decay = XY(0,0.5)
            endIf
          endIf
        endIf
      endIf

    method scroll( delta:IntXY, &clamp )
      if (delta.abs.max < 0.1) return

      localize content_offset
      local target = content_offset + delta.yv
      if (target.y >= 0 and delta.y > 0)
        # Scrolling up
        local excess_p = ((4*target.y) / view.size.y.or_larger(1)).clamped_high(1)
        local in_bounds_portion = delta * (1.0 - excess_p)
        local oob_portion = delta * excess_p
        local oob_limiter = (1.0 - excess_p) ^ 8
        local new_content_offset = content_offset + in_bounds_portion + oob_portion*oob_limiter
        set_content_offset( new_content_offset, &=clamp )
        return
      elseIf (target.y <= view.bottom_offset and delta.y < 0)
        # Scrolling down
        local excess_p  = ((-4*(target.y - view.bottom_offset)) / view.size.y.or_larger(1)).clamped_high(1)
        local in_bounds_portion = delta * (1.0 - excess_p)
        local oob_portion = delta * excess_p
        local oob_limiter = (1.0 - excess_p) ^ 8
        local new_content_offset = content_offset + in_bounds_portion + oob_portion*oob_limiter
        set_content_offset( new_content_offset, &=clamp )
        return
      endIf

      set_content_offset( target, &=clamp )

    method scroll_to( content_offset:IntXY )
      scrolling_to = content_offset
      is_scrolling_to_bottom = content_offset.y == view.bottom_offset
      is_scrolling_to_top    = content_offset.y == view.top_offset

    method scroll_to_bottom
      is_scrolling_to_bottom = true
      is_scrolling_to_top    = false

    method scroll_to_top
      is_scrolling_to_top = true
      is_scrolling_to_bottom = false
      tracks_bottom = false

    method set_content_offset( new_offset:XY, clamp:Logical )
      if (new_offset == content_offset) return
      if (not allow_overscroll) clamp = true
      if (not clamp_to_bounds) clamp = false

      local bottom_offset = view.bottom_offset
      local _offset = new_offset
      if (clamp) _offset = _offset.clamped_high( IntXY.zero ).clamped_low( IntXY(0,bottom_offset) )
      tracks_bottom = (_offset.y <= bottom_offset)
      view.content_offset = _offset

endClass

