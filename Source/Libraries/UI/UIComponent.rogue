library UI

class UIComponent : Drawable2D
  METHODS
    method init_object
      clip_content = true

    method after_prepare_layout
      noAction

    method after_update_layout
      noAction

    method can_split_h( max_width:Int )->Logical
      return false

    method draw_children
      # Each UIComponent (including UI) manages drawing all of its descendants down to and including
      # other UIComponent objects but not descending into them. In other words, each UIComponent draws its
      # own descendants.
      use drawables = collect<<Drawable2D>>
        (forEach in drawables).draw
        (forEach in drawables).save_display_state
      endUse

    method expand_to_fill
      attributes &= !(WIDTH_MASK|HEIGHT_MASK)  # turn off fixed and shrink attributes

    method expand_to_fill_height
      attributes &= !HEIGHT_MASK  # turn off fixed and shrink attributes

    method expand_to_fill_width
      attributes &= !WIDTH_MASK   # turn off fixed and shrink attributes

    method is_br->Logical
      return false

    method is_expand_to_fill_height->Logical
      return ((attributes & Entity.HEIGHT_MASK) == 0)

    method is_expand_to_fill_width->Logical
      return ((attributes & Entity.WIDTH_MASK) == 0)

    method is_ui_component->Logical
      return true

    method measure_content_width( subcomponents:UIComponent[] )->Int?
      local result : Int?
      forEach (component in subcomponents)
        local w = component.measure_width( null )
        if (w)
          if (not result or w.value > result.value) result = w
        endIf
      endForEach
      return result

    method measure_content_height( subcomponents:UIComponent[] )->Int?
      local result : Int?
      forEach (component in subcomponents)
        local h = component.measure_height( null )
        if (h)
          if (not result or h.value > result.value) result = h
        endIf
      endForEach
      return result

    method measure_height( container_height:Int? )->Int?
      if (is_fixed_height) return placement.size.y
      if (is_expand_to_fill_height) return container_height

      # Shrink to fit content height
      local result : Int?
      use subcomponents = collect<<UIComponent>>
        result = measure_content_height( subcomponents )
      endUse

      if (result) return result.value
      return container_height

    method measure_width( container_width:Int? )->Int?
      if (is_fixed_width) return placement.size.x
      if (is_expand_to_fill_width) return container_width

      # Shrink to fit content width
      local result : Int?
      use subcomponents = collect<<UIComponent>>
        result = measure_content_width( subcomponents )
      endUse

      if (result) return result.value
      return container_width

    method operator+( rhs:UIComponent )->UIComponent
      return UIGeneratedHorizontalLayout( this ).[ add(rhs) ]

    method operator/( rhs:UIComponent )->UIComponent
      return UIGeneratedVerticalLayout( this ).[ add(rhs) ]

    method operator|( rhs:UIComponent )->UIComponent
      return UIGeneratedStackLayout( this ).[ add(rhs) ]

    method prepare_layout
      local og_size = size

      on_prepare_layout
      use components = collect<<UIComponent>>
        (forEach in components).prepare_layout
      endUse
      after_prepare_layout

      if (size != og_size) needs_layout = true

    method shrink_to_fit
      shrink_to_fit_width
      shrink_to_fit_height

    method shrink_to_fit_height
      attributes = (attributes & !HEIGHT_MASK) | SHRINK_TO_FIT_HEIGHT

    method shrink_to_fit_width
      attributes = (attributes & !WIDTH_MASK) | SHRINK_TO_FIT_WIDTH

    method split_after( i:Int )->UIComponent
      return null

    method text_content->String
      forEach (child in children)
        if local component = child->(as UIComponent)
          local text = component.text_content
          if (text) return text
        endIf
      endForEach

      return null

    method split_h( max_width=null:Int? )->UIComponent
      return null

    method update_layout
      # Normally called on the top-level UI but can also be called on a nested component
      # such as a UIScrollView.
      needs_layout = false

      local og_size = placement.size

      prepare_layout

      use components = collect<<UIComponent>>( &all )
        on_update_layout
        (forEach in components).on_update_layout

        update_layout_width( placement.size.x )
        update_layout_height( placement.size.y )
        update_layout_placement( bounds )

        (forEach in components).after_update_layout
        after_update_layout
      endUse

      if (placement.size != og_size) request_redraw

    method update_layout_height( container_height:Int )
      height = which{ measure_height(container_height) || container_height }

      use subcomponents = collect<<UIComponent>>
        update_subcomponent_heights( subcomponents, placement.size.y )
      endUse

    method update_layout_placement( container:IntBox )
      position = IntBox(placement.size).positioned_within( container, placement.anchor ).position
      update_subcomponent_placement( IntBox(placement.size) )

    method update_layout_width( container_width:Int )
      width = which{ measure_width(container_width) || container_width }

      use subcomponents = collect<<UIComponent>>
        update_subcomponent_widths( subcomponents, placement.size.x )
      endUse

    method update_subcomponent_heights( subcomponents:UIComponent[], container_height:Int )
      (forEach in subcomponents).update_layout_height( container_height )

    method update_subcomponent_placement( container:IntBox )
      use list = collect<<UIComponent>>
        update_subcomponent_placement( list, container )
      endUse

    method update_subcomponent_placement( subcomponents:UIComponent[], container:IntBox )
      forEach (component in subcomponents)
        component.update_layout_placement( container )
      endForEach

    method update_subcomponent_widths( subcomponents:UIComponent[], container_width:Int )
      (forEach in subcomponents).update_layout_width( container_width )

endClass
