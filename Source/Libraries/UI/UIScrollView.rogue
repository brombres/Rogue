library UI

class UIScrollView : UILayout
  PROPERTIES
    controller          : UIScrollViewController
    content_offset      : XY
    last_content_offset : XY

  METHODS
    method init
      controller = create_controller
      prior.init

    method init( content:UIComponent )
      controller = create_controller
      prior.init( content )

    method init( content:UIComponent, controller )
      prior.init( content )

    method after_prepare_layout
      if (controller) controller.after_prepare_layout

    method after_update
      if (controller) controller.after_update

    method create_controller->UIScrollViewController
      return StandardUIScrollViewController( this )

    method bottom_offset->Int
      # Result will be negative or zero.
      return (size.y - content_height).clamped_high(0)

    method content_height->Int
      if local component = first_child<<UIComponent>>
        return component.size.y
      else
        return 0
      endIf

    method needs_redraw->Logical [override]
      if (prior.needs_redraw) return true
      if (last_content_offset != @content_offset) return true
      return false

    method handle( e:PointerEvent )
      if (controller) controller.on( e )

    method on( e:ScrollEvent )
      if (controller) controller.on( e )

    method on_prepare_layout
      if (controller) controller.on_prepare_layout

    method on_select( e_press:PointerEvent, e_release:PointerEvent )
      # UIScrollView consumes any original press event in preparation for dragging.
      # If a release comes without turning into a drag, this pair of press/release events
      # should be dispatched to the appropriate subcomponent.

      local subcomponent = find( e_press.position )
      # Any subcomponents that could respond to this event?

      if (first_child and subcomponent)
        first_child.dispatch( e_press )
        # This may capture pointer focus

        if (UI.active.pointer_focus)
          if (UI.active.pointer_focus.visible and not UI.active.pointer_focus.input_disabled)
            UI.active.pointer_focus.handle( e_release )
          else
            UI.active.pointer_focus.release_pointer_focus
            first_child.dispatch( e_release )
          endIf
        else
          first_child.dispatch( e_release )
        endIf

      else
        on_select_background( e_press.position )

      endIf

    method on_select_background( position:IntXY )
      noAction

    method on_update
      if (controller) controller.on_update

    method on_update_layout
      if (controller) controller.on_update_layout

    method save_display_state
      prior.save_display_state
      last_content_offset = @content_offset

    method scroll_to( vertical_offset:Int )
      scroll_to( IntXY(0,vertical_offset) )

    method scroll_to( content_offset:IntXY )
      if (controller) controller.scroll_to( content_offset )

    method scroll_to_bottom
      if (controller) controller.scroll_to_bottom
      else            position = bottom_offset

    method scroll_to_top
      if (controller) controller.scroll_to_top
      else            position = top_offset

    method set_content_offset( offset:Real )
      set_content_offset( IntXY(@content_offset.x, offset) )

    method set_content_offset( @content_offset )
      if local component = first_child<<UIComponent>>
        component.position = @content_offset.floor->IntXY
      endIf

    method top_offset->Int
      return 0

    method update_subcomponent_placement( subcomponents:UIComponent[], container:IntBox )
      forEach (component in subcomponents)
        component.update_layout_placement( IntBox(component.position,container.size) )
      endForEach

endClass

