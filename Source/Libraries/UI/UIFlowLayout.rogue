library UI

class UIFlowLayout : UILayout
  PROPERTIES
    content_height : Int
    line_spacing   : Int   # Extra pixels between lines

  METHODS
    method init_object
      shrink_to_fit_height

    method update_subcomponent_widths( subcomponents:UIComponent[], container_width:Int )
      forEach (component in subcomponents)
        component.update_layout_height( component.measure_height(0).value )
      endForEach

      local cursor = IntXY.zero
      local max_width = container_width
      local line_height = 0
      local i = 0
      while (i < subcomponents.count)
        local component = subcomponents[i]
        local adj : UIComponent
        if (i+1 < subcomponents.count) adj = subcomponents[i+1]

        # In general don't split up two adjacent text components that
        # don't have a separating space.
        local component_w = component.measure_width(0).value
        local total_w = component_w
        if (adj and cursor.x > 0)
          local a = component.text_content
          local b = adj.text_content
          contingent
            sufficient (not a or not b)
            sufficient (a.ends_with(' ') or a.ends_with('\n'))
            sufficient (b.begins_with(' ') or b.begins_with('\n'))
            total_w += adj.measure_width(0).value
          endContingent
        endIf

        contingent
          # If a text component with a leading space is about to be placed
          # at the beginning of a line, split off the space so we can ignore
          # it later
          if (cursor.x == 0)
            local text = component.text_content
            if (text and text.count > 1 and text.begins_with(' ') and component.can_split_h(component_w))
              subcomponents.insert( component.split_after(0), i+1 )
              sufficient (true)
            endIf
          endIf

          # Fit component at current cursor position
          sufficient (cursor.x + total_w <= max_width)

          # Split component and fit part of it on the current line
          block
            local w = max_width - cursor.x
            if (component.can_split_h(w))
              # split_h() returns the new component that has been added to the UI tree.
              # We need to add it to our work list. The original component is resized in place.
              subcomponents.insert( component.split_h(w), i+1 )
              sufficient (true)
            endIf
          endBlock

          # Split next adjacent component if it's been implicitly linked with this one under
          # line-splitting rules and the current component will fit on the current line.
          if (cursor.x > 0 and adj and total_w > component_w and cursor.x + component_w < max_width)
            local w = (max_width - (cursor.x + component_w))
            if (adj.can_split_h(w))
              subcomponents.insert( adj.split_h(w), i+2 )
              sufficient (true)
            endIf
          endIf

          # Can't fit any part of this component on the current line
          if (cursor.x > 0)
            # Retry all this on the next line
            cursor = IntXY( 0, cursor.y+line_height+line_spacing )
            line_height = 0
            nextIteration
          endIf

          if (component_w > max_width)
            # Too big to fit on line. Split at the first possible spot.
            local new_component = component.split_h
            if (new_component) subcomponents.insert( new_component, i+1 )
          endIf
        endContingent

        # Component is good to go
        component.update_layout_width( component.measure_width(0).value )
        cursor += component.size.xv
        line_height .= or_larger( component.size.y )

        if (component.is_br)
          cursor = IntXY( 0, cursor.y+line_height+line_spacing )
          line_height = 0
        endIf

        ++i
      endWhile

      # Increase the height of this layout to contain all items
      cursor += IntXY(0,line_height+line_spacing)
      content_height = cursor.y

    method measure_height( container_height:Int? )->Int?
      if (is_fixed_height) return size.y
      if (is_expand_to_fill_height) return container_height

      # update_subcomponent_widths() is always called before measure_height()
      # so content_height will always be set by now.
      return content_height

    method update_subcomponent_heights( subcomponents:UIComponent[], container_height:Int )
      noAction  # already done as part of update_subcomponent_widths()

    method update_subcomponent_placement( subcomponents:UIComponent[], container:IntBox ) [override]
      local x1 = container.position.x
      local cursor = container.position
      local max_width = container.size.x
      local line_height = 0
      local i = 0
      local i1 = 0
      while (i < subcomponents.count)
        local component = subcomponents[i]

        # In general don't split up two adjacent text components that
        # don't have a separating space.
        local total_w = component.size.x
        if (i+1 < subcomponents.count and cursor.x > x1)
          local adj = subcomponents[i+1]
          local a = component.text_content
          local b = adj.text_content
          contingent
            sufficient (not a or not b)
            sufficient (a.ends_with(' ') or a.ends_with('\n'))
            sufficient (b.begins_with(' ') or b.begins_with('\n'))
            total_w += adj.size.x
          endContingent
        endIf

        if (not (cursor.x + total_w <= max_width) and cursor.x)
          # Advance to next line
          cursor = IntXY( x1, cursor.y+line_height+line_spacing )
          line_height = 0
          justify( subcomponents, i1, i-1, max_width )
          i1 = i
          nextIteration
        endIf

        # Ready to place component
        component.update_layout_placement( IntBox(cursor,component.size) )
        local text = component.text_content
        if (cursor.x > x1 or not text or text != " ") cursor += component.size.xv
        line_height .= or_larger( component.size.y )

        if (component.is_br)
          cursor = IntXY( x1, cursor.y+line_height+line_spacing )
          line_height = 0
          justify( subcomponents, i1, i-1, max_width )
          i1 = i
        endIf

        ++i
      endWhile
      justify( subcomponents, i1, i-1, max_width )

    method justify( subcomponents:UIComponent[], i1:Int, i2:Int, max_width:Int )
      if (i2 < i1) return
      localize alignment
      if (alignment.position.x == 0.0) return  # already left-justified

      max_width -= subcomponents[ forEach in i1..i2 ].size.x
      local delta = ((max_width * alignment.position.x) / 2).floor->Int
      if (delta)
        forEach (i in i1..i2)
          subcomponents[i].position += IntXY(delta,0)
        endForEach
      endIf

endClass

