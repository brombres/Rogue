library UI

enum WidgetState
  IDLE, TARGETED, PRESSED, DISABLED
endEnum

class Widget : Component
  PROPERTIES
    state              : WidgetState
    on_select_callback : Function
    select_count       : Int
    just_once          : Logical

  METHODS
    method init
      prior.init

    method init( size:XY )
      prior.init( size )

    method init( component:Component )
      prior.init( component )

    method init( label:String )
      prior.init( Label(label) )

    method disable
      if (is_disabled) return
      state = WidgetState.DISABLED

    method enable
      if (not is_disabled) return
      state = WidgetState.IDLE

    method handle_select
      on_select
      if (on_select_callback) on_select_callback()

    method is_disabled->Logical
      return (state == WidgetState.DISABLED)

    method is_idle->Logical
      return (state == WidgetState.IDLE)

    method is_pressed->Logical
      return (state == WidgetState.PRESSED)

    method is_targeted->Logical
      return (state == WidgetState.TARGETED)

    method on( e:PointerEvent )
      if (is_disabled) return

      local contains_e = contains( e )
      if (contains_e or has_pointer_focus or is_targeted)
        request_redraw
      endIf

      if (e.is_press)
        if (contains_e)
          if (capture_pointer_focus)
            state = WidgetState.PRESSED
            e.consume
          endIf
        else
          release_pointer_focus
        endIf
      elseIf (e.is_release)
        if (contains_e and has_pointer_focus)
          prior.release_pointer_focus
          state = WidgetState.TARGETED
          e.consume
          ++select_count
          if (select_count == 1 or not just_once)
            handle_select
          endIf
        else
          release_pointer_focus
        endIf
      elseIf (e.is_move)
        if (contains_e)
          if (state == WidgetState.IDLE)
            state = WidgetState.TARGETED
          endIf
        else
          if (state == WidgetState.TARGETED or state == WidgetState.PRESSED)
            state = WidgetState.IDLE
          endIf
        endIf
      endIf

    method on_change_state( new_state:WidgetState )
      noAction

    method on_select

    method on_select( on_select_callback )

    method once
      select_count = 0
      just_once = true

    method release_pointer_focus
      if (has_pointer_focus)
        if (state != WidgetState.DISABLED) state = WidgetState.IDLE
        request_redraw
      endIf
      prior.release_pointer_focus

    method set_is_visible( setting:Logical )
      if (setting == visible) return
      if (not setting) release_pointer_focus
      prior.set_is_visible( setting )
      if (not is_disabled) state = WidgetState.IDLE

    method set_on_select( on_select_callback )

    method set_state( new_state:WidgetState )
      if (state == new_state) return
      @state = new_state
      on_change_state( new_state )

endClass
