library UI

class Text : Component
  PROPERTIES
    value        : String
    scaling_mode = ScalingModeXY( ScalingMode.NONE, ScalingMode.NONE )
    sizing_mode  = SizingModeXY( SizingMode.NATURAL_SIZE, SizingMode.NATURAL_SIZE )

  METHODS
    method init( text=String():String, &fragment )
      block
        clear

        if (not text)
          @value = String()
          escapeBlock
        endIf

        if (fragment and text.count <= 1)
          @value = text
          escapeBlock
        endIf

        use processed = StringPool
          processed.reserve( text.count )

          local iterator = text.iterator
          local prev = -1
          local has_eol = false
          local is_modified = false
          loop
            if local ch = iterator.read_another
              if (ch == '\r')     is_modified = true; nextIteration
              if (ch == '\n')     has_eol = true
              elseIf (ch == '\t') ch = ' '; is_modified = true
              if (ch == ' ')
                if (prev == ' ') is_modified = true; nextIteration
              endIf
              processed.print( ch )
              prev = ch
            else
              escapeLoop
            endIf
          endLoop

          local has_edge_spaces = processed[0] == ' ' or processed.last == ' '
          if (has_eol or has_edge_spaces) is_modified = true

          if (not is_modified)
            if (value is not text)
              if (fragment) @value = text
              else          @value = processed.cloned
            endIf
            escapeBlock
          endIf

          use builder = StringPool
            forEach (ch in processed)
              if (ch == '\n')
                .add_builder( builder )
                add( Text('\n',&fragment) )
              elseIf (ch == ' ' and not builder.count)
                # Leading space becomes its own element
                add( Text(' ',&fragment) )
              else
                builder.print ch
              endIf
            endForEach
            .add_builder( builder )
          endUse

        endUse
      endBlock

      if (sizing_mode.x == SizingMode.NATURAL_SIZE or sizing_mode.y == SizingMode.NATURAL_SIZE)
        begin_layout   # set initial size
        request_layout
      endIf

    method .add_builder( builder:String )
      if (builder.count)
        if (builder.last == ' ')
          # Make a trailing space its own element
          builder.remove_last
          add( Text(builder.cloned,&fragment) )
          add( Text(" ",&fragment) )
        else
          add( Text(builder.cloned,&fragment) )
        endIf
        builder.clear
      endIf

    method aspect_fit_text
      aspect_fit_text_to_width
      aspect_fit_text_to_height

    method aspect_fit_text_to_height
      scaling_mode.y = ScalingMode.ASPECT_FIT

    method aspect_fit_text_to_width
      scaling_mode.x = ScalingMode.ASPECT_FIT

    method bg_color->Graphics::Color? [override]
      return text_style?.bg_color || prior.bg_color

    method color->Graphics::Color? [override]
      return text_style?.color || prior.color

    method description->String
      local result = ''Text($)''(value?.to_escaped_ascii||"")
      if (count)
        result.print '['
        forEach (child at i in children)
          if (i > 0) result.print ','
          result.print child
        endForEach
        result.print ']'
      endIf
      return result

    method display_position->XY
      if (is_display_component) return prior.display_position
      else                      return parent->(as Component)?.display_position

    method find_h_split( max_width:Real )->Real? [override]
      local font = font
      assert font
      forEach (ch at i in value step -1)
        if (ch == ' ' or ch == '\n' or ch == '\r' or ch == '\t')
          if (i == 0) return null
          local w = font.measure( value, 0, i )
          if (w < max_width) return i
        endIf
      endForEach
      return null

    method font->Font
      if (text_style and text_style.font)
        return text_style.font.value
      else
        return prior.font
      endIf

    method is_br->Logical [override]
      return value == "\n"

    method is_space->Logical [override]
      return value == " "

    method is_display_component->Logical [override]
      forEach (child as Component in children)
        if (child.is_display_component) return false
      endForEach
      return true

    method line_height->Real
      if local font = font
        return font.height * font.line_spacing
      else
        return 0.0
      endIf

    method minimum_layout_size( available_size:XY, &limited )->XY [override]
      if local font = font
        return font.measure( value )
      else
        return XY.zero
      endIf

    method on_begin_layout_internal [override]
      local font = font

      local sz = font?.measure(value || "")

      local measured_size = font?.measure( value || "" )

      natural_size = measured_size

      if (sizing_mode.x == SizingMode.NATURAL_SIZE)
        if (sizing_mode.y == SizingMode.NATURAL_SIZE)
          size = natural_size
        else
          size.x = natural_size.x
        endIf
      elseIf (sizing_mode.y == SizingMode.NATURAL_SIZE)
        size.y = natural_size.y
      endIf

      prior.on_begin_layout_internal

    method on_draw [override]
      if local font = font
        font.draw( this )
      else
        println "ERROR: UI.default_font is undefined."
      endIf

    method set_bg_color( color:Graphics::Color? )
      ensure<<text_style>>
      text_style.bg_color = color

    method set_color( color:Graphics::Color? )
      ensure<<text_style>>
      text_style.color = color

    method set_value( new_value:String )
      if (not new_value) new_value = ""
      if (new_value != value)
        if (not value) @value = String()
        value.clear
        value.print( new_value )
        init( value )
      endIf

    method set_value( new_value:Real, decimal_digits=4:Int )
      use buffer = StringPool
        buffer.print( new_value, decimal_digits )
        set_value( buffer )
      endUse

    method set_value( new_value:Int )
      use buffer = StringPool
        buffer.print( new_value )
        set_value( buffer )
      endUse

    method shrink_text_to_fit_size
      shrink_text_to_fit_width
      shrink_text_to_fit_height

    method shrink_text_to_fit_height
      scaling_mode.y = ScalingMode.SHRINK_TO_FIT

    method shrink_text_to_fit_width
      scaling_mode.x = ScalingMode.SHRINK_TO_FIT

    method split_h( split_position:Real, components:Component[], component_i:Int ) [override]
      local left, center, right : Text

      local split_i = split_position->Int
      if (split_i) left = Text( value.substring(0, split_i), &fragment )
      center = Text( value[split_i], &fragment )
      if (split_i + 1 < value.count) right = Text( value.substring(split_i+1), &fragment )

      if (left) add( left )
      add( center )
      if (right) add( right )

      components.remove_at( component_i )
      if (right) components.insert( right, component_i )
      components.insert( center, component_i )
      if (left) components.insert( left, component_i )

      # Have the new child components set their size
      left?.begin_layout
      center.begin_layout
      right?.begin_layout

    method to->String
      return description

    method use_unscaled_text
      use_unscaled_text_width
      use_unscaled_text_height

    method use_unscaled_text_height
      scaling_mode.y = ScalingMode.NONE

    method use_unscaled_text_width
      scaling_mode.x = ScalingMode.NONE
      sizing_mode.x = SizingMode.FIXED_SIZE

endClass
