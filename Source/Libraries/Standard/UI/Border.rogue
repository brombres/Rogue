library UI

class Border : Component
  PROPERTIES
    is_proportional : Logical
    left_padding    : Real    # original pixel or proportional values (based on 'is_proportional')
    top_padding     : Real
    right_padding   : Real
    bottom_padding  : Real
    left_px, top_px, right_px, bottom_px : Real  # current pixel values derived from 'left_padding' etc.

  METHODS
    method content_size_to_layout_size( content_size:XY )->XY
      return content_size + XY(left_px+right_px,top_px+bottom_px)

    method content_position->XY
      return XY(left_px,top_px)

    method content_size->XY
      return (size - XY(left_px+right_px,top_px+bottom_px)).clamped_low(XY(0,0))

    method fixed
      is_proportional = false

    method proportional
      is_proportional = true

    method resolve_layout_size( available_size:XY, &limited )->XY [override]
      if (is_proportional)
        left_px = left_padding * available_size.x
        top_px = top_padding * available_size.y
        right_px = right_padding * available_size.x
        bottom_px = bottom_padding * available_size.y
      else
        left_px = left_padding
        top_px = top_padding
        right_px = right_padding
        bottom_px = bottom_padding
      endIf
      return prior.resolve_layout_size( available_size, &=limited )

    method set_horizontal_padding( padding:Real )
      left_padding = padding
      right_padding = padding

    method set_vertical_padding( padding:Real )
      top_padding = padding
      bottom_padding = padding

    method set_padding( padding:Real )
      left_padding   = padding
      right_padding  = padding
      top_padding    = padding
      bottom_padding = padding

endClass
