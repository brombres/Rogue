#==============================================================================
# DataIO.rogue
#==============================================================================

class DataReader : Reader<<Byte>>
  PROPERTIES
    input : Reader<<Byte>>

  METHODS
    method init

    method init( input )

    method init( file:File )
      init( file.reader )

    method init( list:Byte[] )
      init( ListReader<<Byte>>(list) )

    method has_another->Logical
      return input.has_another

    method position->Int
      return input.position

    method peek->Byte
      if (not input.has_another) return 0
      return input.peek

    method read->Byte
      if (not input.has_another) return 0
      return input.read

    method read_byte->Byte
      return this.read

    method read_bytes->Byte[]
      return read_bytes( Byte[] )

    method read_bytes( buffer:Byte[] )->Byte[]
      local count = read_int32x
      buffer.reserve( count )
      loop (count) buffer.add( read_byte )
      return buffer

    method read_int16->Int
      # Reads 2 bytes in high-low order, e.g. [99,AA] -> 99AA
      local result = read->Int :<<: 8
      return result | read

    method read_int16_low_high->Int
      # Reads 2 bytes in low-high order, e.g. [99,AA] -> AA99
      local result = read->Int
      return result | (Int(read) :<<: 8)

    method read_int32->Int32
      # Reads 4 bytes in high-low order, e.g. [88,99,AA,BB] -> 8899AABB
      local result = read->Int32 :<<: 24
      result |= Int32(read) :<<: 16
      result |= Int32(read) :<<: 8
      return result | Int32(read)

    method read_int32_low_high->Int32
      # Reads 4 bytes in low-high order, e.g. [88,99,AA,BB] -> BBAA9988
      local result = read->Int32
      result |= (Int32(read) :<<: 8)->Int32
      result |= (Int32(read) :<<: 16)->Int32
      return result | (Int32(read) :<<: 24)

    method read_int32_native_byte_order->Int32
      local b1 = read_byte
      local b2 = read_byte
      local b3 = read_byte
      local b4 = read_byte

      local result : Int32
      native
      @|union
       |{
       |  RogueInt32 int32;
       |  RogueByte  bytes[4];
       |} int32_bytes = { .bytes = {$b1,$b2,$b3,$b4} };
       |
       |$result = int32_bytes.int32;

       return result

    method read_int32x->Int
      return read_int64x->Int

    method read_int64->Int64
      local result = read_int32 : Int64
      return (result :<<: 32) | read_int32->Int32->Int64(&unsigned)

    method read_int64x->Int64
      # Reads a variable-length encoded value that is stored in 1..10 bytes
      # (or more if alignment padding is used). Encoded values are treated
      # as signed.
      #
      # - If the first two bits are not "10" then the first byte is cast to
      #   a signed integer value and returned. This allows for the range
      #   -64..127 using the following bit patterns:
      #
      #     0xxxxxxx    0 .. 127
      #     11xxxxxx  -64 ..  -1
      #
      # - If the first two bits are "10" then the data has been encoded
      #   in the next 6 bits as well as any number of following bytes,
      #   using 7 data bits per byte with an MSBit of 0 representing a halt
      #   or 1 a continuation. The next bit after the leading 10 is
      #   treated as negative magnitude.
      #
      #     10xxxxxx 0yyyyyyy            (13-bit number xxxxxxyyyyyyy)
      #     10xxxxxx 1yyyyyyy 0zzzzzzz   (20-bit number xxxxxxyyyyyyyzzzzzzz)
      #     etc.
      local b = read : Int
      if ((b & 0xc0) != 0x80) return b->Byte.signed

      local result = (b & 0b0011_1111) : Int64   #  0..63  (unsigned)
      if (result >= 32) result -= 64             # -64..-1 (signed)

      loop
        local next = read
        result = (result :<<: 7) | (next & 0b0111_1111)
        if (not (next & 0b1000_0000)) escapeLoop
      endLoop

      return result

    method read_logical->Logical
      return (read != 0)

    method read_real->Real
      if (Real isType Real32) return read_int32.real_bits
      else                    return read_int64.real_bits

    method read_real32->Real32
      return read_int32.real_bits

    method read_real64->Real64
      return read_int64.real_bits

    method read_string( buffer=String():String )->String
      local count = read_int32x
      buffer.reserve( count )  # Reserves bytes, not characters, so may be less than required. That's okay.
      loop (count) buffer.print( read_int32x->Character )
      return buffer

    method reset
      input.reset

    method seek( pos:Int )
      input.seek( pos )

    method skip( n:Int )
      input.skip( n )

endClass

class DataWriter : Writer<<Byte>>, Poolable
  PROPERTIES
    output       : Writer<<Byte>>
    output_bytes : Byte[]  # Only non-null when used with certain constructors

  METHODS
    method init
      init( Byte[] )

    method init( output )

    method init( file:File )
      init( file.writer )

    method init( output_bytes )
      init( @output_bytes.writer )

    method close
      flush
      output.close

    method clear
      position = 0
      if (output_bytes) output_bytes.clear
      output.reset

    method flush
      output.flush

    method on_return_to_pool
      clear

    method output_bytes->Byte[]
      flush
      return @output_bytes

    method patch_int32( pos:Int, value:Int )
      seek( pos )
      write_int32( value )
      seek_end

    method position->Int
      return output.position

    method reset
      clear

    method seek( pos:Int )
      output.seek( pos )

    method seek_end()
      output.seek_end

    method skip( n:Int )
      output.skip( n )

    method write( value:Byte )
      output.write( value )

    method write( list:Byte[] )
      if (output_bytes)
        list.copy( output_bytes, position )
        skip( list.count )
      else
        output.write( forEach in list )
      endIf

    method write_byte( value:Byte )
      this.write( value )

    method write_bytes( data:Byte[], index=0:Int, count=null:Int? )
      if (index > data.count)
        write_int32x( 0 )
        return
      endIf

      if (index < 0)
        if (count.exists) count = count.value + index  # reduce count
        index = 0
      endIf

      if (count.exists) count = count.value.clamped( 0, data.count-index )
      else              count = data.count - index
      write_int32x( count.value )
      loop (count.value) write_byte( data[index] ); ++index

    method write_int16( value:Int )
      # Write 2 bytes in high-low order, e.g. 0x1234 -> [12,34]
      write( value:>>>:8 )
      write( value )

    method write_int16_low_high( value:Int )
      # Writes 2 bytes in low-high order, e.g. 0x1234 -> [34,12]
      write( value )
      write( value:>>>:8 )

    method write_int32( value:Int )
      # Writes 4 bytes in high-low order, e.g. 0x12345678 -> [12,34,56,78]
      write( value:>>>:24 )
      write( value:>>>:16 )
      write( value:>>>:8 )
      write( value )

    method write_int32_low_high( value:Int )
      # Writes 4 bytes in low-high order, e.g. 0x12345678 -> [78,56,34,12]
      write( value )
      write( value:>>>:8 )
      write( value:>>>:16 )
      write( value:>>>:24 )

    method write_int32_native_byte_order( value:Int32 )
      local b1, b2, b3, b4 : Int

      native
      @|union
       |{
       |  RogueInt32 int32;
       |  RogueByte  bytes[4];
       |} int32_bytes = { .int32 = $value };
       |
       |$b1 = int32_bytes.bytes[0];
       |$b2 = int32_bytes.bytes[1];
       |$b3 = int32_bytes.bytes[2];
       |$b4 = int32_bytes.bytes[3];

      write_byte( b1 )
      write_byte( b2 )
      write_byte( b3 )
      write_byte( b4 )

    method write_int32x( value:Int )
      write_int64x( value->Int64 )

    method write_int32x( value:Int, align:Int )
      # Pass e.g. align=4 to have the output position aligned on a 4-byte
      # boundary AFTER this Int32X is written.
      write_int64x( value->Int64, align )

    method write_int64( value:Int64 )
      write_int32( value:>>>:32 )
      write_int32( value )

    method write_int64x( value:Int64 )
      # See read_int64x for format notes.
      if (value >= -64 and value < 128)
        write( value )
      else
        local extra_bytes = 1
        local shift = 7
        local min = -0x1000
        local max =  0x0FFF
        loop 8
          if (value >= min and value <= max) escapeLoop
          ++extra_bytes
          shift += 7
          min = min :<<: 7
          max = (max :<<: 7) | 0xFF
        endLoop
        write( 0b10_000000 | ((value:>>>:shift)&0b11_1111) )
        loop extra_bytes-1
          shift -= 7
          write( 0b1000_0000 | ((value:>>>:shift) & 0b0111_1111) )
        endLoop
        shift -= 7
        write( (value:>>>:shift) & 0b0111_1111 )
      endIf

    method write_int64x( value:Int64, align:Int )
      # Pass e.g. align=4 to have the output position aligned on a 4-byte
      # boundary AFTER this Int64X is written.
      use temp_writer = ObjectPool<<DataWriter>>
        temp_writer.write_int64x( value )
        local count_bytes = temp_writer.position

        local align_pos = position + count_bytes
        if (align_pos & (align-1))
          # Needs alignment padding
          while (align_pos & (align-1)) ++align_pos; ++count_bytes

          # We need at least 1 extra byte of padding. Write the IntX start
          # marker with zeros for data bits.
          write( 0b10_000000 )
          _write_int64x_data_bytes( value, count_bytes-1 )
        else
          # Happens to already be aligned
          write_int64x( value )
        endIf
      endUse

    method _write_int64x_data_bytes( value:Int64, byte_count:Int, &intermediate_byte )
      if (byte_count > 1)    _write_int64x_data_bytes( value:>>>:7, byte_count-1, &intermediate_byte )
      if (intermediate_byte) write( 0b1_0000000 | (value & 0b0_1111111) )
      else                   write( value & 0b0_1111111 )

    method write_logical( value:Logical )
      write( which{value:1 || 0} )

    method write_real( value:Real )
      if (Real isType Real32) write_int32( value.integer_bits )
      else                    write_int64( value.integer_bits )

    method write_real32( value:Real32 )
      write_int32( value.integer_bits )

    method write_real64( value:Real64 )
      write_int64( value.integer_bits )

    method write_string( value:String )
      if (not value) value = ""
      write_int32x( value.count )
      forEach (ch in value) write_int32x( ch )

  GLOBAL METHODS
    method int64x_byte_count( value:Int64 )->Int
      # See read_int64x for format notes.
      if (value >= -64 and value < 128)
        return 1
      else
        local extra_bytes = 1
        local shift = 7
        local min = -0x1000
        local max =  0x0FFF
        loop 7
          if (value >= min and value <= max) escapeLoop
          ++extra_bytes
          shift += 7
          min = min :<<: 7
          max = (max :<<: 7) | 0xFF
        endLoop
        return extra_bytes + 1
      endIf

endClass

