# EXAMPLE
#   uses Network/Sockets
#
#   local exe_name = File(System.executable_filepath).filename
#   local port = 1112
#
#   local args = System.command_line_arguments
#   local is_client = args.contains("client")
#   local is_server = args.contains("server")
#
#   if (args.count != 1 or (not is_client and not is_server))
#     println "USAGE: '$ client' or '$ server'"(exe_name,exe_name)
#
#   elseIf (is_server)
#     local server_socket = ServerSocket( port )
#     if (server_socket.is_listening)
#       println "Listening for connection. Run '$ client' from a separate terminal to connect."(exe_name)
#       while (server_socket.is_listening)
#         local socket = server_socket.accept_connection
#         if (socket)
#           println "Client connected"
#           local buffer = String()
#           local reader = UTF8Reader(socket.reader)
#           loop
#             if (reader.has_another)
#               local ch = reader.read
#               if (ch == '\n')
#                 println "RECEIVED: $" (buffer)
#                 println "SENDING:  Polo"
#                 socket.output.println "Polo"
#                 socket.output.flush
#                 socket.close
#                 server_socket.close
#                 escapeLoop
#               else
#                 buffer.print ch
#               endIf
#             endIf
#             System.sleep( 0.1 )
#           endLoop
#         endIf
#         System.sleep( 0.1 )
#       endWhile
#     endIf
#
#   elseIf (is_client)
#     local socket = Socket( "127.0.0.1", port )
#     while (socket.is_connecting) System.sleep(0.1)
#     if (socket.is_connected)
#       println "Connected"
#       socket.output.println "Marco"
#       socket.output.flush
#       local buffer = String()
#       local reader = UTF8Reader(socket.reader)
#       loop
#         if (reader.has_another)
#           local ch = reader.read
#           if (ch == '\n')
#             println "RECEIVED: $" (buffer)
#             escapeLoop
#           else
#             buffer.print ch
#           endIf
#         endIf
#         System.sleep( 0.1 )
#       endLoop
#     else
#       error.println "Unable to connect."
#     endIf
#
#   endIf


# Vestigial definitions for Rogue 1's thread-capable environment
#$if ((THREAD_MODE == "NONE") or target("Web"))
#  $localDefine USING_THREADS false
#$else
#  $localDefine USING_THREADS true
#$endIf

#$if (USING_THREADS)
#  $localDefine LOCK mutex.lock
#  $localDefine UNLOCK mutex.unlock
#$else
#  $localDefine LOCK
#  $localDefine UNLOCK
#$endIf

$localDefine LOCK
$localDefine UNLOCK

nativeHeader @|#include <sys/errno.h>

class Socket [abstract]
  # Abstract base class of BasicSocket and SecureSocket
  GLOBAL METHODS
    method create( remote_address:String, port:Int32 )->Socket
      return BasicSocket( remote_address, port )

    method create( socket_id:Int32 )->Socket
      # Internal use only - used by BasicServerSocket.
      return BasicSocket( socket_id )

  PROPERTIES

  METHODS
    method close  [abstract]

    method remote_ip->String
      return "0.0.0.0"

    method is_closed->Logical     [abstract]

    method is_connected->Logical  [abstract]

    method is_connecting->Logical [abstract]

    method output->PrintWriter  [abstract]

    method reader->Reader<<Byte>> [abstract]

    method socket_id->Int32       [abstract]

    method writer->Writer<<Byte>> [abstract]

endClass


class ServerSocket [abstract]
  # Abstract base class of BasicServerSocket and SecureServerSocket
  GLOBAL METHODS
    method create( port:Int32 )->ServerSocket
      return BasicServerSocket( port )

  METHODS
    method accept_connection->Socket [abstract]

    method close                     [abstract]

    method is_listening->Logical     [abstract]

    method port->Int32               [abstract]

    method socket_id->Int32          [abstract]

endClass

class BasicSocket : Socket
  DEFINITIONS
    CONNECTING  = 0
    CONNECTED   = 1
    CLOSED      = 2

  NATIVE
    nativeHeader ...
      @|#include <netdb.h>
       |#include <sys/socket.h>

  PROPERTIES
    socket_id        = -1
    state            : Int32
    remote_ip        : String
    remote_address   : String
    port             : Int32
    reader           = BasicSocketReader( this )
    writer           = BasicSocketWriter( this )
    printer          = PrintWriter( writer )

#$if (USING_THREADS)
#    mutex            = Mutex()
#$endIf

    native "char remote_ip_buffer[NI_MAXHOST];"

  METHODS
    method init( remote_address, port )
#$if (USING_THREADS)
#      Thread( this=>handle_connection )
#$else
      handle_connection
#$endIf

    method init( @socket_id )
      # Internal use - used by BasicServerSocket
      state = CONNECTED

    method handle_connection
      state = CONNECTING

      native @|$socket_id = socket( AF_INET, SOCK_STREAM, 0 );
               if (socket_id == -1)
                 state = CLOSED
                 return
               endIf

      native @|char port_string[40];
              |snprintf( port_string, sizeof(port_string), "%d", $port );
              |struct addrinfo requirements;
              |memset( &requirements, 0, sizeof(requirements) );
              |requirements.ai_family = AF_INET;
              |requirements.ai_socktype = SOCK_STREAM;
              |requirements.ai_protocol = IPPROTO_TCP;
              |
              |struct addrinfo *info, *cur;
               if (native("getaddrinfo( (char*)$remote_address->data->as_utf8, port_string, 0, &info )")->Int32 != 0)
                 LOCK
                 if (socket_id != -1)
                   native @|close( $socket_id );
                   socket_id = -1
                   state = CLOSED
                 endIf
                 UNLOCK
                 return
               endIf

               local socket_okay = false
      native @|strcpy( $this->remote_ip_buffer, "0.0.0.0" );
              |cur = info;
              |while (cur)
              |{
              |  if (connect($socket_id,cur->ai_addr, cur->ai_addrlen) == 0)
              |  {
              |    $socket_okay = 1;
              |    char sbuf[NI_MAXSERV];
              |
              |    getnameinfo( cur->ai_addr, cur->ai_addrlen, $this->remote_ip_buffer,
              |      sizeof($this->remote_ip_buffer), sbuf, sizeof(sbuf),
              |          NI_NUMERICHOST | NI_NUMERICSERV );
              |    break;
              |  }
              |  cur = cur->ai_next;
              |}
              |freeaddrinfo( info );
              |

               LOCK
               if (socket_id != -1 and state == 0)
                 # not closed() before we get here
                 if (socket_okay)
                   native @|fcntl( $socket_id, F_SETFL, O_NONBLOCK );
                   state = CONNECTED
                 else
                   native @|close( $socket_id );
                   socket_id = -1
                   state = CLOSED
                 endIf
               endIf
               UNLOCK


    method close
      LOCK
      if (@socket_id != -1)
        native @|close( $socket_id );
        @socket_id = -1
      endIf
      state = CLOSED
      UNLOCK

    method is_closed->Logical
      return (state == CLOSED)

    method is_connected->Logical
      return (state == CONNECTED)

    method is_connecting->Logical
      return (state == CONNECTING)

    method on_cleanup
      close

    method output->PrintWriter
      return @printer

    method reader->Reader<<Byte>>
      return @reader

    method remote_ip->String
      if (@remote_ip) return @remote_ip
      native @|$this->remote_ip = %Ns%RogueString_create( $this->remote_ip_buffer );
      return @remote_ip

    method socket_id->Int32
      return @socket_id

    method writer->Writer<<Byte>>
      return @writer

endClass


class BasicServerSocket : ServerSocket
  NATIVE
    nativeHeader...
     @|#include <netinet/in.h>
      |#include <netdb.h>
      |#include <sys/socket.h>

  PROPERTIES
    socket_id = -1
    port         : Int32
    is_listening : Logical
    native    "struct sockaddr_in address;"
    native    "socklen_t   address_size;"

  METHODS
    method init( @port )
      native @|
              |$socket_id = socket( AF_INET, SOCK_STREAM, 0 );
              |if ($socket_id != -1)
              |{
              |  $this->address.sin_addr.s_addr = INADDR_ANY;
              |  $this->address.sin_port = htons( $port );
              |  $this->address.sin_family = AF_INET;
              |  $this->address_size = sizeof($this->address);
              |
              |  // Allow socket address to be quickly reused between program launches
              |  int opt = 1;
              |  setsockopt( $socket_id, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt) );
              |
              |  if (bind($socket_id,(struct sockaddr*) &$this->address, $this->address_size) == 0)
              |  {
              |    getsockname( $socket_id, (struct sockaddr*) &$this->address, &$this->address_size );
              |
              |    if (listen($socket_id,SOMAXCONN) == 0)
              |    {
              |      fcntl( $socket_id, F_SETFL, O_NONBLOCK );
              |      $is_listening = 1;
              |    }
              |  }
              |}

      if (not @is_listening) close

    method accept_connection->BasicSocket
      # Returns null if no connections are being attempted.
      if (not @is_listening) return null

      local remote_socket_id : Int32

      native...
       @|$remote_socket_id = (%Ns%RogueInt32) accept($socket_id,(struct sockaddr*) &$this->address, &$this->address_size);
        |if ($remote_socket_id < 0)
        |{
           return null
      native...
       @|}
        |
        |char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];
        |
        |if (getnameinfo((struct sockaddr*) &$this->address, $this->address_size, hbuf, sizeof(hbuf), sbuf,
        |    sizeof(sbuf), NI_NUMERICHOST | NI_NUMERICSERV))
        |{
           # Error getting IP address
           return null
      native...
       @|}

      local result = BasicSocket( remote_socket_id )
      result.remote_ip = native( "%Ns%RogueString_create( hbuf )" )->String
      return result

    method close
      if (@socket_id != -1)
        native @|close( $socket_id );
        @socket_id = -1
        is_listening = false
      endIf

    method is_listening->Logical
      return @is_listening

    method on_cleanup
      close

    method port->Int32
      return @port

    method socket_id->Int32
      return @socket_id
endClass


class BasicSocketReader : Reader<<Byte>>
  PROPERTIES
    socket       : BasicSocket
    buffer_pos   : Int32
    buffer_count : Int32
    native "%Ns%RogueByte read_buffer[1024];"

  METHODS
    method init( socket )

    method has_another->Logical
      if (buffer_pos < buffer_count) return true
      if (not socket.is_connected)   return false

      buffer_pos = 0
      buffer_count = native( "read( $socket->socket_id, $this->read_buffer, 1024 )" )->Int32
      if (buffer_count == -1)
        if (native("errno != EAGAIN")->Logical)
          socket.close
          return false
        endIf
        buffer_count = 0
        return false  # No bytes available
      endIf

      if (buffer_count == 0)
        # End of data
        socket.close
        return false
      endIf

      return true

    method peek->Byte
      if (not has_another) return 0
      return native( "$this->read_buffer[$this->buffer_pos]" )->Byte

    method position->Int
      return @position

    method read->Byte
      if (not has_another) return 0
      ++@position
      return native( "$this->read_buffer[$this->buffer_pos++]" )->Byte

    method reset
      seek( 0 )

    method seek( pos:Int32 )
      error.println( "Unsupported operation: BasicSocketReader.seek()" )
endClass


class BasicSocketWriter : Writer<<Byte>>
  PROPERTIES
    socket       : BasicSocket
    write_buffer = Byte[]

  METHODS
    method init( socket )

    method close
      socket.close

    method flush
      if (write_buffer.count == 0) return

      local sent : Int32

      native @|$sent = send( $socket->socket_id, $write_buffer->as_bytes, $write_buffer->count, 0 );

      if (sent == 0) return

      if (sent >= 0)
        write_buffer.discard( 0, sent )
      else
        if (native("errno != EAGAIN")->Logical) socket.close
      endIf

    method reset
      error.println( "Unsupported operation: BasicSocketWriter.reset()" )

    method seek( pos:Int32 )
      error.println( "Unsupported operation: BasicSocketWriter.seek()" )

    method seek_end()
      error.println( "Unsupported operation: BasicSocketWriter.seek_end()" )

    method skip( n:Int32 )
      error.println( "Unsupported operation: BasicSocketWriter.skip()" )

    method write( value:Byte )
      write_buffer.add( value )
      flush

    method write( list:Byte[] )
      forEach (value in list) write( value )
endClass

