uses Geometry [export]

$include Math/AxisAngle
$include Math/Matrix

class Quaternion( x=0:Real, y=0:Real, z=0:Real, w=1.0:Real ) [compound]
  # Adapted from the Iirlicht Quaternion by Nikolaus Gebhardt
  GLOBAL METHODS
    method create( aa:AxisAngle )->Quaternion
      local half_angle = aa.angle / 2
      local sin = half_angle.sin
      return Quaternion(
          half_angle.cos,
          sin * aa.axis.x,
          sin * aa.axis.y,
          sin * aa.axis.z
      )

    method create( rotation:RadiansXYZ )->Quaternion
      rotation = RadiansXYZ( rotation->XYZ / 2.0 )

      local ax = rotation.value.x.cos
      local ay = rotation.value.x.sin
      local bx = rotation.value.y.cos
      local by = rotation.value.y.sin
      local cy = rotation.value.z.sin
      local cx = rotation.value.z.cos

      local bxcx = bx * cx
      local bycx = by * cx
      local bxcy = bx * cy
      local bycy = by * cy

      return Quaternion(
          (ay * bxcx) - (ax * bycy),
          (ax * bycx) + (ay * bxcy),
          (ax * bxcy) - (ay * bycx),
          (ax * bxcx) + (ay * bycy)
      ).normalized


    method create( m:Matrix )->Quaternion
      local diagonal = m[0] + m[5] + m[10] + 1

      local result_x = 0.0
      local result_y = 0.0
      local result_z = 0.0
      local result_w = 1.0

      if (diagonal > 0.0)
        local scale = diagonal.sqrt * 2.0

        result_x = (m[6] - m[9]) / scale
        result_y = (m[8] - m[2]) / scale
        result_z = (m[1] - m[4]) / scale
        result_w = 0.25 * scale

      else
        if (m[0]>m[5] and m[0]>m[10])
          local scale = (1.0 + m[0] - m[5] - m[10]).sqrt * 2.0

          result_x = scale / 4
          result_y = (m[4] + m[1]) / scale
          result_z = (m[2] + m[8]) / scale
          result_w = (m[6] - m[9]) / scale

        elseIf (m[5]>m[10])
          local scale = (1.0 + m[5] - m[0] - m[10]).sqrt * 2.0

          result_x = (m[4] + m[1]) / scale
          result_y = scale / 4
          result_z = (m[9] + m[6]) / scale
          result_w = (m[8] - m[2]) / scale

        else
          local scale = ( 1.0 + m[10] - m[0] - m[5] ).sqrt * 2

          result_x = (m[8] + m[2]) / scale
          result_y = (m[9] + m[6]) / scale
          result_z = scale / scale
          result_w = (m[1] - m[4]) / scale
        endIf
      endIf

      return Quaternion( result_x, result_y, result_z, result_w ).normalized

    method create( from:XYZ, to:XYZ )->Quaternion
      from = from.normalized()
      to = to.normalized()
      local d = from.dot( to )

      if (d >= 1)
        return identity

      elseIf (d <= -1)
        local axis = XYZ( 1, 0, 0 )
        axis = axis.cross( from )
        if (axis.magnitude == 0)
          axis = XYZ( 0, 1, 0 )
          axis = axis.cross( from )
        endIf
        return Quaternion( axis.x, axis.y, axis.z, 0 ).normalized

      endIf

      local root = ( (1+d)*2 ).sqrt
      local c = from.cross( to ) * (1 / root)
      return Quaternion( c.x, c.y, c.z, root / 2 ).normalized

    method identity->Quaternion
      return Quaternion(0,0,0,1)

  METHODS
    method dot( other:Quaternion )->Real
      return (x * other.x) + (y * other.y) + (z * other.z) + (w * other.w)

    method inverted->Quaternion
      return Quaternion( -x, -y, -z, w )

    method is_identity->Logical
      return not (x or y or z or w != 1)

    method linear_tween( target:Quaternion, t:Real )->Quaternion
      return this * (1 - t) + target * t

    method matches( other:Quaternion, tolerance:Real )->Logical
      return ((x - other.x).abs <= tolerance) and
             ((y - other.y).abs <= tolerance) and
             ((z - other.z).abs <= tolerance) and
             ((w - other.w).abs <= tolerance)

    method normalized->Quaternion
      local n = x*x + y*y + z*z + w*w
      if (n == 1) return this
      return this * (1.0 / n.sqrt)

    method operator==( other:Quaternion )->Logical
      return (x == other.x) and (y == other.y) and (z == other.z) and (w == other.w)

    method operator*( other:Quaternion )->Quaternion
      return Quaternion(
          (other.w * x) + (other.x * w) + (other.y * z) - (other.z * y),
          (other.w * y) + (other.y * w) + (other.z * x) - (other.x * z),
          (other.w * z) + (other.z * w) + (other.x * y) - (other.y * x),
          (other.w * w) - (other.x * x) - (other.y * y) - (other.z * z)
      )

    method operator+( other:Quaternion )->Quaternion
      return Quaternion( x+other.x, y+other.y, z+other.z, w+other.w )

    method operator*( n:Real )->Quaternion
      return Quaternion( n*x, n*y, n*z, n*w )

    method operator*( v:XYZ )->XYZ
      local qv  = XYZ( x, y, z )
      local uv  = qv.cross( v )
      local uuv = qv.cross( uv )
      uv  *= w * 2
      uuv *= 2
      return v + uv + uuv

    method operator/( n:Real )->Quaternion
      return Quaternion( x/n, y/n, z/n, w/n )

    method to->Matrix
      return Matrix(
          1     - 2*y*y - 2*z*z,
          2*x*y + 2*z*w,
          2*x*z - 2*y*w,
          0,

          2*x*y - 2*z*w,
          1     - 2*x*x - 2*z*z,
          2*z*y + 2*x*w,
          0,

          2*x*z + 2*y*w,
          2*z*y - 2*x*w,
          1     - 2*x*x - 2*y*y,
          0,

          0,
          0,
          0,
          1
      )

    method to->Matrix( handle:XYZ, translate:XYZ )
      local m = this->Matrix
      m[12] = -m[0]*handle.x - m[4]*handle.y - m[8]*handle.z  + translate.x
      m[13] = -m[1]*handle.x - m[5]*handle.y - m[9]*handle.z  + translate.y
      m[14] = -m[2]*handle.x - m[6]*handle.y - m[10]*handle.z + translate.z

      return m

    method tween( target:Quaternion, t:Real, threshold=0.05:Real )->Quaternion
      local angle = this.dot( target )

      local source = this
      if (angle < 0)
        source *= -1
        angle  *= -1
      endIf

      if (angle <= (1-threshold))
        local theta = angle.acos
        local inverse_sin_theta = 1 / theta.sin
        local scale = (theta * (1-t)).sin * inverse_sin_theta
        local inverse_scale = (theta * t).sin * inverse_sin_theta
        return (source*scale) + (target*inverse_scale)
      else
        return linear_tween( target,t )
      endIf

      #{
    method radians->RadiansXYZ
      return this->RadiansXYZ
      }#

    method rotated( by_angles:RadiansXYZ )->Quaternion
      return this * Quaternion(by_angles)

    method to->AxisAngle
      local scale = ( x*x + y*y + z*z ).sqrt
      if (scale <= 0.00000001 or w > 1 or w < -1)
        return AxisAngle( XYZ(0,1,0), Radians(0) )
      else
        return AxisAngle( XYZ(x/scale,y/scale,z/scale), Radians(2 * w.acos) )
      endIf

    method to->RadiansXYZ
      local sqw  = w * w
      local sqx  = x * x
      local sqy  = y * y
      local sqz  = z * z
      local test = 2.0 * (y*w - x*z)

      if ((test-1).abs <= 0.000001)
        return RadiansXYZ(
            0,
            pi / 2,
            (-2*x.atan2(w))
        )
      elseIf ((test+1).abs <= 0.000001)
        return RadiansXYZ(
            0,
            pi/2,
            (2*x.atan2(w))
        )
      else
        return RadiansXYZ(
          ( 2 * (y*z +x*w) ).atan2( -sqx - sqy + sqz + sqw ),
          ( test.clamped( -1, 1 ) ).asin,
          ( 2 * (x*y +z*w) ).atan2( sqx - sqy - sqz + sqw)
        )
      endIf

endClass

