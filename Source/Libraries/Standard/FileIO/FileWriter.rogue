class FileWriter : Writer<<Byte>>
  PROPERTIES
    filepath : String
    error    : Logical
    buffer   = Byte[](1024)
    native "FILE* fp;"

  METHODS
    method init
      noAction

    method init( _filepath:String, append=false:Logical )
      if (not open(_filepath,append))
        Global.error.println( "Unable to open $ for writing." (filepath) )
        error = true
      endIf

    method on_cleanup
      close

    method close
      flush

      if (fp)
        native @|fclose( $this->fp ); $this->fp = 0;
        System.sync_storage
      endIf

    method flush
      if (buffer.count == 0 or not fp) return

      native @|fwrite( $buffer->as_bytes, 1, $buffer->count, $this->fp );
              |fflush( $this->fp );

      buffer.clear

    method fp->Int64
      return native( "(%Ns%RogueInt64)$this->fp" )->Int64

    method on_use->this
      return this

    method on_end_use( this_writer:FileWriter )
      close

    method open( filepath, append=false:Logical )->Logical
      close
      error = false

      if (append)
        native @|$this->fp = fopen( (char*)$filepath->data->as_utf8, "ab" );
      else
        native @|$this->fp = fopen( (char*)$filepath->data->as_utf8, "wb" );
      endIf

      native "$this->error = !($this->fp);"

      return not error

    method reset
      if (not fp) return
      flush
      seek( 0 )

    method seek( pos:Int )
      if (not fp) return
      flush
      if (pos < 0) pos = 0
      position = pos

      native "fseek( $this->fp, 0, SEEK_SET );"

    method seek_end()
      if (not fp) return
      flush

      native "fseek( $this->fp, 0, SEEK_END );"
      position = native( "(%Ns%RogueInt)ftell( $this->fp )" )->Int

    method write( ch:Byte )
      if (not fp) return

      ++position
      buffer.add( ch )
      if (buffer.count == 1024) flush

    method write( bytes:Byte[] )
      if (not fp) return

      flush
      position += bytes.count
      native @|fwrite( $bytes->as_bytes, 1, $bytes->count, $this->fp );

    method write( data:String )
      if (not fp) return

      flush
      position += data.byte_count
      native @|fwrite( $data->data->as_utf8, 1, $data->data->count, $this->fp );

endClass
