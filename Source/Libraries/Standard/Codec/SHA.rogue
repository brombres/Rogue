#===============================================================================
# SHA.rogue
#
# Based on:
# https://en.wikipedia.org/wiki/SHA-2
#
# Reference:
# https://qvault.io/cryptography/how-sha-2-works-step-by-step-sha-256/
#===============================================================================

uses IO/BitIO

class SHA [singleton]
  # EXAMPLE USAGE
  #   uses Codec/SHA
  #
  #   println SHA.sha256( "" )
  #     # E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855
  #
  #   println SHA.sha256( "hello world" )
  #     # B94D27B9934D3E08A52E52D7DA7DABFAC484EFE37A5380EE9088F7ACE2EFCDE9
  #
  #   println SHA.sha256( Byte[][...] )
  #   println SHA.sha256( File(...) )

  PROPERTIES
    k = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]
      # Round constants
      # (first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
  METHODS
    method sha256( st:String )->String
      return sha256( st.to_utf8 )

    method sha256( bytes:Byte[] )->String
      return sha256( bytes.reader, bytes.count )

    method sha256( file:File )->String
      return sha256( file.reader, file.size )

    method sha256( data_reader:Reader<<Byte>>, byte_count:Int32 )->String
      # Note 1: All variables are 32 bit unsigned integers and addition is calculated modulo 232
      # Note 2: For each round, there is one round constant k[i] and one entry in the message
      #         schedule array w[i], 0 ≤ i ≤ 63
      # Note 3: The compression function uses 8 working variables, a through h
      # Note 4: Big-endian convention is used when expressing the constants in this pseudocode,
      #         and when parsing message block data from bytes to words, for example,
      #         the first word of the input message "abc" after padding is 0x61626380

      # Initialize hash values:
      # (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
      local h0 = 0x6a09e667
      local h1 = 0xbb67ae85
      local h2 = 0x3c6ef372
      local h3 = 0xa54ff53a
      local h4 = 0x510e527f
      local h5 = 0x9b05688c
      local h6 = 0x1f83d9ab
      local h7 = 0x5be0cd19

      local reader = SHA256DataReader( data_reader, byte_count )

      # Process the message in successive 512-bit chunks:
      # break message into 512-bit chunks
      # for each 512-bit (16 xInt32) chunk
      local w = Int32[](64)
      while (reader.has_another)
        # create a 64-entry message schedule array w[0..63] of 32-bit words
        # (The initial values in w[0..63] don't matter, so many implementations zero them here)
        w.clear

        # copy chunk into first 16 words w[0..15] of the message schedule array
        loop (16) w.add( reader.read )

        # Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array:
        forEach (i in 16..63)
          local s0 = (w[i-15].ror(7))  ~ (w[i-15].ror(18)) ~ (w[i-15] :>>:  3)
          local s1 = (w[i- 2].ror(17)) ~ (w[i- 2].ror(19)) ~ (w[i- 2] :>>: 10)
          w.add( w[i-16] + s0 + w[i-7] + s1 )
        endForEach

        # Initialize working variables to current hash value
        local a = h0
        local b = h1
        local c = h2
        local d = h3
        local e = h4
        local f = h5
        local g = h6
        local h = h7

        # Compression function main loop
        forEach (i in 0..63)
          local s1 = (e.ror(6)) ~ (e.ror(11)) ~ (e.ror(25))
          local ch = (e & f) ~ ((!e) & g)
          local temp1 = h + s1 + ch + k[i] + w[i]
          local s0 = (a.ror(2)) ~ (a.ror(13)) ~ (a.ror(22))
          local maj = (a & b) ~ (a & c) ~ (b & c)
          local temp2 = s0 + maj

          h = g
          g = f
          f = e
          e = d + temp1
          d = c
          c = b
          b = a
          a = temp1 + temp2
        endForEach

        # Add the compressed chunk to the current hash value
        h0 += a
        h1 += b
        h2 += c
        h3 += d
        h4 += e
        h5 += f
        h6 += g
        h7 += h
      endWhile

      local builder = String()
      builder.reserve(64)
      builder.print h0->String(&hex)
      builder.print h1->String(&hex)
      builder.print h2->String(&hex)
      builder.print h3->String(&hex)
      builder.print h4->String(&hex)
      builder.print h5->String(&hex)
      builder.print h6->String(&hex)
      builder.print h7->String(&hex)
      return builder

endClass

class SHA256DataReader : Reader<<Int32>>
  PROPERTIES
    data          : Reader<<Byte>>
    data_count    : Int32
    padding       = Byte[]
    byte_position : Int32
    bytes_remaining    : Int32
    next_result   : Int32?

  METHODS
    method init( data:Byte[] )
      init( data.reader, data.count )

    method init( data, data_count )
      # Pre-processing (Padding)
      # begin with the original message of length L bits
      # append a single '1' bit
      # append K '0' bits, where K is the minimum number >= 0 such that L + 1 + K + 64 is a multiple of 512
      # append L as a 64-bit big-endian integer, making the total post-processed length a multiple of 512 bits
      # such that the bits in the message are [L data bits, 1, K zero bits, L in 64 bits] = k*512 total bits
      local nbits = data_count * 8 + 65
      local k = 0
      if (nbits & 511)
        k = ((nbits + 511) & !511) - nbits
        nbits += k
      endIf

      local writer = BitWriter( padding )
      writer.write(1,1)
      while (k >= 8)
        writer.write( 0 )
        k -= 8
      endWhile
      loop (k) writer.write(0,1)

      local data_bytes = data_count->Int64 * 8
      writer.write( data_bytes:>>>:32, 32 )
      writer.write( data_bytes, 32 )

      writer.flush
      padding.reverse  # we'll remove bytes from the end one at a time

      bytes_remaining = nbits / 8

      prepare_next_result

    method has_another->Logical
      return next_result?

    method peek->Int32
      return next_result.value

    method read->Int32
      local result = next_result.value
      prepare_next_result
      return result

    method prepare_next_result
      if (bytes_remaining)
        local n = read_byte
        n = (n :<<: 8) | read_byte
        n = (n :<<: 8) | read_byte
        n = (n :<<: 8) | read_byte
        next_result = n
      else
        next_result = null
      endIf

    method read_byte->Int32
      if (not bytes_remaining) return 0
      ++byte_position
      --bytes_remaining
      if (byte_position <= data_count)
        return data.read
      else
        return padding.remove_last
      endIf

endClass
