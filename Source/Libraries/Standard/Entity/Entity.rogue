library Entity

uses Collection/Node
uses Control
uses Geometry
uses Math/Quaternion

$include Entity/Entity2D
$include Entity/Entity3D
$include Entity/Attributes
$include Entity/EntityScript
$include Entity/Properties

class Entity : Node<<Entity>>
  GLOBAL PROPERTIES
    next_id = 1

  PROPERTIES
    name       : String
    id         : Int
    attributes : Attributes
    script     : EntityScript
    actions    : Action
    properties : Variant

  METHODS
    method init
      noAction

    method init( name )
      noAction

    method init_clone( existing:Entity )
      name        = existing.name
      attributes  = existing.attributes
      script      = existing.script
      @properties = existing.@properties.cloned
      add( (forEach in existing.children).cloned )

    method cloned->$thisType [propagated]
      return new<<$thisType>>.init_clone( this )

    method init_object
      id = next_id
      ++next_id

    method attach_script( new_script:EntityScript )
      new_script.entity = this
      script |= new_script.started

    method change_script( new_script:EntityScript )
      new_script.entity = this
      if (script) script.change_script( new_script )
      else        script = new_script.started

    method draw
      if (attributes.hidden) return
      .begin_draw
      .handle_draw
      .handle_draw( &fg )
      .end_draw

    method h_flip->Logical
      return attributes.h_flip

    method on_begin_draw
      noAction

    method on_begin_update
      noAction

    method on_draw
      noAction

    method on_draw_fg
      noAction

    method on_end_draw
      noAction

    method on_end_update
      noAction

    method on_start
      noAction

    method on_update

    method properties->Properties
      return Properties( this )

    method set_h_flip( setting:Logical )
      attributes.h_flip = setting

    method set_is_visible( setting:Logical )
      attributes.hidden = not setting

    method set_v_flip( setting:Logical )
      attributes.v_flip = setting

    method start
      if (not attributes.started)
        attributes.started = true
        script = script?.started
        on_start
      endIf

    method to->String
      if (@name) return @name
      else       return type_name

    method update
      .begin_update

      script = script?.updated
      if (actions) actions = actions.updated
      on_update
      (forEach in children).update

      .end_update

    method v_flip->Logical
      return attributes.v_flip

    method is_visible->Logical
      return not attributes.hidden

    method .begin_draw
      if (not attributes.started) start
      on_begin_draw

    method .begin_update
      if (not attributes.started) start
      on_begin_update

    method .dispatch_draw
      if (count)
        (forEach in children).draw
      endIf

    method .end_draw
      on_end_draw

    method .end_update
      on_end_update

    method .handle_draw( &fg )
      if (attributes.hidden) return

      if (fg)
        if (attributes.foreground) .draw_entity

        on_draw_fg

        script?.call<<on_draw_fg>>
        actions?.call<<on_draw_fg>>
      else
        if (not attributes.foreground) .draw_entity

        on_draw

        script?.call<<on_draw>>
        actions?.call<<on_draw>>

        .dispatch_draw
      endIf

    method .draw_entity
      noAction
endClass
