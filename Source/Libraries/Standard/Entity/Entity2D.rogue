library Entity

class Entity2D : Entity
  PROPERTIES
    nominal_size = XY(1,1)
    scale        = XY(1,1)
    position     : XY
    z            : Real
    scale_z      = 1.0
    rotation     = Quaternion()
    anchor       = Anchor.CENTER : Anchor

  METHODS
    method init

    method init( script:EntityScript )
      init
      attach_script( script )

    method init( nominal_size, script=null:EntityScript )
      if (script) attach_script( script )

    method init( existing:Entity2D )
      prior.init( existing )
      @scale        = existing.scale
      @nominal_size = existing.nominal_size
      @position     = existing.position
      @z            = existing.z
      @rotation     = existing.rotation
      @anchor       = existing.anchor

    method anchor_top_left
      anchor = Anchor.TOP_LEFT

    method anchor_top
      anchor = Anchor.TOP

    method anchor_top_right
      anchor = Anchor.TOP_RIGHT

    method anchor_left
      anchor = Anchor.LEFT

    method anchor_center
      anchor = Anchor.CENTER

    method anchor_right
      anchor = Anchor.RIGHT

    method anchor_bottom_left
      anchor = Anchor.BOTTOM_LEFT

    method anchor_bottom
      anchor = Anchor.BOTTOM

    method anchor_bottom_right
      anchor = Anchor.BOTTOM_RIGHT

    method reset_size( nominal_size, scale=XY(1.0) )

    method rotation_x->Radians
      return rotation->RadiansXYZ.value.x

    method rotation_y->Radians
      return rotation->RadiansXYZ.value.y

    method rotation_z->Radians
      return rotation->RadiansXYZ.value.z

    method scale_to_fill( bounds:Box )
      scale = (bounds.size / nominal_size).max

    method scale_to_fill( size:XY )
      scale = (size / nominal_size).max

    method scale_to_fit( bounds:Box )
      scale = (bounds.size / nominal_size).min

    method scale_to_fit( size:XY )
      scale = (size / nominal_size).min

    method set_rotation( @rotation )

    method set_rotation( degrees:Degrees )
      set_rotation_z( degrees )

    method set_rotation( degrees:DegreesXYZ )
      @rotation = Quaternion( degrees )

    method set_rotation( radians:Radians )
      set_rotation_z( radians )

    method set_rotation( radians:RadiansXYZ )
      @rotation = Quaternion( radians )

    method set_rotation_x( radians:Radians )
      local rotation_xyz = rotation->RadiansXYZ
      rotation_xyz.value.x = radians
      @rotation = Quaternion( rotation_xyz )

    method set_rotation_y( radians:Radians )
      local rotation_xyz = rotation->RadiansXYZ
      rotation_xyz.value.y = radians
      @rotation = Quaternion( rotation_xyz )

    method set_rotation_z( radians:Radians )
      local rotation_xyz = rotation->RadiansXYZ
      rotation_xyz.value.z = radians
      @rotation = Quaternion( rotation_xyz )

    method set_scale( scale:Real )
      @scale = scale
      scale_z = scale

    method set_scale( @scale )
      noAction

    method set_scale( scale:XYZ )
      @scale = scale->XY
      scale_z = scale.z

    method set_size( size:XY )
      scale = size / nominal_size

    method set_size( nominal_size, scale )

    method size->XY
      return nominal_size * scale

endClass
