# This library is included by RogueC as needed.

$include Codec/UTF16String
$include FileIO/FileDescriptorIO

class Process
  PROPERTIES
    args          : String[]
    output_reader : Reader<<Byte>>
    error_reader  : Reader<<Byte>>
    input_writer  : Writer<<Byte>>
    error         : Logical
    is_finished   : Logical
    exit_code     : Int
    is_blocking   : Logical
    result        : ProcessResult

  GLOBAL METHODS
    method create( cmd:String, &readable, &writable, &is_blocking, &env )->Process
      if (System.is_windows)
          return WindowsProcess( cmd, &=readable, &=writable, &=is_blocking, &=env )
      else
          return PosixProcess( ["sh","-c",cmd], &=readable, &=writable, &=is_blocking, &=env )
      endIf

    method create( args:String[], &readable, &writable, &is_blocking, &env )->Process
      if (System.is_windows)
        return WindowsProcess( args, &=readable, &=writable, &=is_blocking, &=env )
      else
        return PosixProcess( args, &=readable, &=writable, &=is_blocking, &=env )
      endIf

    method run( cmd:String, &env, &writable, &echo )->ProcessResult
      local process = Process( cmd, &readable, &=writable, &is_blocking, &=env )
      if (echo) return ProcessEchoer( process ).run
      else      return process.finish

    method run( args:String[], &env, &writable, &echo )->ProcessResult
      local process = Process( args, &readable, &=writable, &is_blocking, &=env )
      if (echo) return ProcessEchoer( process ).run
      else      return process.finish

    method run( process:Process )->ProcessResult
      return process.finish

  METHODS
    method close
      finish

    method error_bytes->Byte[]
      local result = Byte[]
      if (error_reader)
        while (error_reader.has_another) result.add( error_reader.read )
      endIf
      return result

    method error_string->String
      return String( error_bytes )

    method exit_code->Int32
      return finish.@exit_code

    method is_finished->Logical
      return @is_finished

    method is_running->Logical
      return (not is_finished)

    method finish->ProcessResult
      @is_finished = true
      if (not result) result = ProcessResult( 1, Byte[], Byte[] )
      return result

    method launch( &readable, &writable, &env )->Logical
      return false

    method on_cleanup
      finish

    method output_bytes->Byte[]
      local result = Byte[]
      if (output_reader)
        while (output_reader.has_another) result.add( output_reader.read )
      endIf
      return result

    method output_string->String
      return String( output_bytes )

    method run->Int32
      return finish.@exit_code

    method update_io( &poll_blocks )->Logical
      return false

endClass


class PosixProcess : Process
  # Mac/Linux version loosely based on:
  # https://stackoverflow.com/questions/13893085/posix-spawnp-and-piping-child-output-to-a-string/27328610
  NATIVE
    nativeHeader
      @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
       |#else
       |  #include <spawn.h>
       |  #include <poll.h>
       |  #include <sys/wait.h>
       |  #include <sys/errno.h>
       |  extern char** environ;
       |#endif

  PROPERTIES
    native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS
            |pid_t pid;
            |int cin_pipe[2];
            |int cout_pipe[2];
            |int cerr_pipe[2];
            |posix_spawn_file_actions_t actions;
            |struct pollfd poll_list[2];
            |#endif

  METHODS
    method init( cmd:String, &readable, &writable, is_blocking=false:Logical, &env )
      init( ["sh","-c",cmd], &=readable, &=writable, &=is_blocking, &=env )

    method init( args, &readable, &writable, is_blocking=false, &env )
      native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS

      if (not launch(&=readable,&=writable,&=env))
        native @|if ($this->cout_pipe[0] != -1) close( $this->cout_pipe[0] );
                |if ($this->cout_pipe[1] != -1) close( $this->cout_pipe[1] );
                |if ($this->cerr_pipe[0] != -1) close( $this->cerr_pipe[0] );
                |if ($this->cerr_pipe[1] != -1) close( $this->cerr_pipe[1] );
                |if ($this->cin_pipe[0] != -1)  close( $this->cin_pipe[0] );
                |if ($this->cin_pipe[1] != -1)  close( $this->cin_pipe[1] );
                |$this->cin_pipe[0]  = $this->cin_pipe[1]  = -1;
                |$this->cout_pipe[0] = $this->cout_pipe[1] = -1;
                |$this->cerr_pipe[0] = $this->cerr_pipe[1] = -1;
        if (readable)
          output_reader = PosixProcessReader( this, -1 )
          error_reader = PosixProcessReader( this, -1 )
        endIf
        if (writable) input_writer = FDWriter( -1 )
        error = true
        is_finished = true
        exit_code = -1
      endIf

      native @|#endif

    method launch( &readable, &writable, &env )->Logical
      native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS
              |$this->cin_pipe[0]  = $this->cin_pipe[1]  = -1;
              |$this->cout_pipe[0] = $this->cout_pipe[1] = -1;
              |$this->cerr_pipe[0] = $this->cerr_pipe[1] = -1;
              |
              |memset(&$this->poll_list, 0, sizeof($this->poll_list));
              |$this->poll_list[0].fd = -1;
              |$this->poll_list[1].fd = -1;
              |
              |if ($readable)
              |{
              |  if (0 != pipe($this->cout_pipe) || 0 != pipe($this->cerr_pipe))
              |  {
                   return false
      native @|  }
              |}
              |
              |if ($writable)
              |{
              |  if (0 != pipe($this->cin_pipe))
              |  {
                   return false;
      native @|  }
              |}

      local n = args.count
      native @|char*  args_buffer[17];
              |char** args = (char**)args_buffer;
              |if ($n > 16) args = (char**) %NS%ROGUE_MALLOC( sizeof(char*) * ($n+1) );
              |args[ $n ] = 0;
      forEach (arg at index in args)
        native @|args[ $index ] = (char*) $arg->data->as_utf8;
      endForEach

      native @|posix_spawn_file_actions_init( &$this->actions );

      if (readable)
        # These commands run in the forked process
        native @|posix_spawn_file_actions_addclose( &$this->actions, $this->cout_pipe[0] );
                |posix_spawn_file_actions_addclose( &$this->actions, $this->cerr_pipe[0] );
                |posix_spawn_file_actions_adddup2( &$this->actions, $this->cout_pipe[1], STDOUT_FILENO );
                |posix_spawn_file_actions_adddup2( &$this->actions, $this->cerr_pipe[1], STDERR_FILENO );
                |posix_spawn_file_actions_addclose( &$this->actions, $this->cout_pipe[1] );
                |posix_spawn_file_actions_addclose( &$this->actions, $this->cerr_pipe[1] );
                |$this->poll_list[0].fd = $this->cout_pipe[0];
                |$this->poll_list[1].fd = $this->cerr_pipe[0];
                |$this->poll_list[0].events = POLLIN;
                |$this->poll_list[1].events = POLLIN;
      endIf

      if (writable)
        # These commands run in the forked process
        native @|  posix_spawn_file_actions_addclose( &$this->actions, $this->cin_pipe[1] );
                |  posix_spawn_file_actions_adddup2( &$this->actions, $this->cin_pipe[0], STDIN_FILENO );
                |  posix_spawn_file_actions_addclose( &$this->actions, $this->cin_pipe[0] );
      else
        native @|  posix_spawn_file_actions_addclose( &$this->actions, STDIN_FILENO );
      endIf

      local result : Int32
      native @|$result = posix_spawnp( &$this->pid, args[0], &$this->actions, NULL, &args[0],
              |    ($env ? environ : NULL) );
              |if ($n > 16) %NS%ROGUE_FREE( args );
              |if ($this->cout_pipe[1] != -1) close( $this->cout_pipe[1] );
              |if ($this->cerr_pipe[1] != -1) close( $this->cerr_pipe[1] );
              |if ($this->cin_pipe[0] != -1)  close( $this->cin_pipe[0] );
              |$this->cout_pipe[1] = -1;
              |$this->cerr_pipe[1] = -1;
              |$this->cin_pipe[0] = -1;
               if (result) return false

      if (readable)
        output_reader = PosixProcessReader( this, native("$this->cout_pipe[0]")->Int32 )
        error_reader = PosixProcessReader( this, native("$this->cerr_pipe[0]")->Int32 )
      endIf

      if (writable)
        input_writer = FDWriter( native("$this->cin_pipe[1]")->Int32 )
      endIf

      native @|#endif

      return true

    method is_finished->Logical
      if (@is_finished) return true

      native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS
              |int status;
              |if ($this->pid)
              |{
              |  int wstatus;
              |  wstatus = waitpid( $this->pid,&status,WNOHANG );
              |  if ($this->pid == wstatus && WIFEXITED(status))
              |  {
                   finish
                   return true
      native @|  }
              |}
              |#endif

      while (update_io) noAction

      return false


    method finish->ProcessResult
      native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS

      if (not @is_finished)
        is_finished = true

        if (input_writer) input_writer.close

        while (update_io(&poll_blocks)) noAction

        native @|int status;
                |if ($this->pid)
                |{
                |  waitpid( $this->pid, &status, 0 );
                |  $exit_code = WEXITSTATUS( status );
                |  $this->pid = 0;
                |}

        if (output_reader)
          (output_reader->(as PosixProcessReader)).fd_reader.close
          (error_reader->(as PosixProcessReader)).fd_reader.close
        endIf

        native @|posix_spawn_file_actions_destroy( &$this->actions );
      endIf

      native @|if ($this->cout_pipe[1] != -1) close( $this->cout_pipe[1] );
              |if ($this->cerr_pipe[1] != -1) close( $this->cerr_pipe[1] );
              |if ($this->cin_pipe[0] != -1)  close( $this->cin_pipe[0] );
              |$this->cout_pipe[1] = -1;
              |$this->cerr_pipe[1] = -1;
              |$this->cin_pipe[0] = -1;
              |if ($this->cout_pipe[0] != -1) close( $this->cout_pipe[0] );
              |if ($this->cerr_pipe[0] != -1) close( $this->cerr_pipe[0] );
              |if ($this->cin_pipe[1] != -1)  close( $this->cin_pipe[1] );
              |$this->cout_pipe[0] = -1;
              |$this->cerr_pipe[0] = -1;
              |$this->cin_pipe[1] = -1;

      native @|#endif // not %NS%ROGUE_PLATFORM_WINDOWS

      if (not result) result = ProcessResult( @exit_code, output_bytes, error_bytes )
      return result


    method update_io( &poll_blocks )->Logical
      # Returns true if we should keep updating

      native @|#ifndef %NS%ROGUE_PLATFORM_WINDOWS

      # Get the FDs to poll.  We do this because they might have
      # changed (specifically, might have gone to -1).
      local fd0 = -1
      local fd1 = -1
      if (output_reader) fd0 = output_reader->(as PosixProcessReader).fd_reader.fd
      if (error_reader)  fd1 = error_reader->(as PosixProcessReader).fd_reader.fd

      # Bail out if there's nobody to poll
      if (fd0 == -1 and fd1 == -1) return false

      # Set up poll_list and actually do the poll
      #NOTE: We could probably make poll_list local
      local status : Int32
      native @|$this->poll_list[0].fd = $fd0;
              |$this->poll_list[1].fd = $fd1;
              |$status = poll( $this->poll_list, 2, ($poll_blocks?-1:0) );

      if (status > 0)
        # One or more FDs had something to say
        local keep_going = false
        forEach (which_fd in 0..<2)
          local has_input = native("$this->poll_list[$which_fd].revents & POLLIN")->Logical
          #local has_other = native("$this->poll_list[$which_fd].revents & ~POLLIN")->Logical
          local reader = which{which_fd == 0: output_reader || error_reader}

          if (has_input)
            reader->(as PosixProcessReader).fd_reader.buffer_more
            keep_going = true
          endIf

          # Anything besides readable is "bad" (it's most likely the other end hanging up)
          #if (not has_input and has_other) reader->(as PosixProcessReader).fd_reader.close
          #if (reader->(as PosixProcessReader).fd_reader.is_open) keep_going = true
        endForEach
        return keep_going # If anyone wants to keep going, we keep going
      elseIf ((status == -1) and native("errno == EINTR")->Logical)
        # poll got interrupted; try again later
        return true
      endIf

      native @|#endif // %NS%ROGUE_PLATFORM_WINDOWS

      return false

endClass

class PosixProcessReader : Reader<<Byte>>
  PROPERTIES
    process   : Process
    fd_reader : FDReader

  METHODS
    method init( process, fd:Int32 )
      fd_reader = FDReader( fd, &!auto_close )

    method close
      fd_reader.fd = -1
      position = 0

    method has_another->Logical
      if (fd_reader.buffer_position >= fd_reader.buffer.count) process.update_io( process.is_blocking )
      return (fd_reader.buffer_position < fd_reader.buffer.count)

    method peek->Byte
      if (not has_another) return 0
      return fd_reader.peek

    method read->Byte
      if (not has_another) return 0

      ++position
      return fd_reader.read

endClass


class WindowsProcess : Process
  # Based on:
  # https://msdn.microsoft.com/en-us/library/windows/desktop/ms682499(v=vs.85).aspx
  PROPERTIES
    process_created  : Logical
    arg_string_utf16 : UTF16String
      # arg_string_utf16 must be kept for the duration of the process; allowing it
      # to be GC'd can crash the process

    native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
            |STARTUPINFO         startup_info;
            |PROCESS_INFORMATION process_info;
            |#endif

  METHODS
    method init( cmd:String, &readable, &writable, is_blocking=false:Logical, &env )
      # On Windows a cmd like:           "space separated.exe" "arg"
      # Must be wrapped in extra quotes: ""space separated.exe" "arg""
      if (cmd.count('"') > 2) cmd = ''"$"'' (cmd)

      # I forget if there's a specific reason I chose 'cmd.exe /c' - perhaps just to do a path search.
      # If there are any troubles with this approach, might be worth doing path searching manually
      # (calling the Windows API function to do a path search) and requiring a caller that wants to
      # run a cmd.exe built-in to specify cmd.exe themselves. --Brom

      init( ["cmd.exe","/c",cmd], &=readable, &=writable, &=is_blocking, &=env )

    method init( args, &readable, &writable, is_blocking=false, &env )
      if (not launch(&=readable,&=writable,&=env))
        error = true
        @is_finished = true
        exit_code = 1
      endIf

    method launch( &readable, &writable, &env )->Logical
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS

      output_reader = WindowsProcessReader()
      error_reader  = WindowsProcessReader()
      input_writer  = WindowsProcessWriter()

      local output_reader = this.output_reader->(as WindowsProcessReader)
      local error_reader  = this.error_reader->(as WindowsProcessReader)
      local input_writer  = this.input_writer->(as WindowsProcessWriter)

      local arg_string = args.join(" ").cloned
      arg_string_utf16 = UTF16String( arg_string )

      native @|$this->startup_info.cb = sizeof( STARTUPINFO );
              |$this->startup_info.hStdOutput = $output_reader->output_writer;
              |$this->startup_info.hStdError =  $error_reader->output_writer;
              |$this->startup_info.hStdInput =  $input_writer->input_reader;
              |$this->startup_info.dwFlags |= STARTF_USESTDHANDLES;
              |
              |if ( !CreateProcessW(
              |    NULL,                               // lpApplicationName
              |    $arg_string_utf16->data->as_wchars, // lpCommandLine
              |    NULL,                               // lpProcessAttributes
              |    NULL,                               // lpThreadAttributes
              |    TRUE,                               // bInheritHandles
              |    0,                                  // dwCreationFlags  (CREATE_NO_WINDOW?)
              |    NULL,                               // lpEnvironment
              |    NULL,                               // lpCurrentDirectory
              |    &$this->startup_info,               // lpStartupInfo
              |    &$this->process_info                // lpProcessInformation
              |))
              |{
                 return false
      native @|}

              process_created = true
              return true

      native @|#else
               return false

      native @|#endif

    method is_finished->Logical
      if (@is_finished) return true

      if (not process_created)
        @is_finished = true
        return true
      endIf

      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |DWORD exit_code;
              |if (GetExitCodeProcess( $this->process_info.hProcess, &exit_code ))
              |{
              |  if (exit_code != STILL_ACTIVE)
              |  {
              |    $exit_code = exit_code;
              |    $is_finished = 1;
              |  }
              |}
              |#endif

      while (update_io) noAction

      return @is_finished


    method finish->ProcessResult
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS

      while (not is_finished)
        input_writer->(as WindowsProcessWriter).close_pipe  # in case process doesn't terminate until we close the input

        native @|WaitForSingleObject( $this->process_info.hProcess, 250 );
      endWhile

      on_cleanup

      native @|#endif

      if (not result) result = ProcessResult( @exit_code, output_bytes, error_bytes )
      return result

    method on_cleanup
      output_reader.close
      error_reader.close
      input_writer.close

      if (process_created)
        native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
                |CloseHandle( $this->process_info.hProcess );
                |CloseHandle( $this->process_info.hThread );
                |#endif
        process_created = false
      endIf


    method update_io->Logical
      # Returns true if we should keep updating
      local any_updates = false
      if (output_reader->(as WindowsProcessReader).fill_buffer) any_updates = true
      if (error_reader->(as WindowsProcessReader).fill_buffer) any_updates = true
      local before_count = input_writer->(as WindowsProcessWriter).buffer.count
      input_writer.flush
      if (input_writer->(as WindowsProcessWriter).buffer.count != before_count) any_updates = true

      return any_updates

endClass


class WindowsProcessReader : Reader<<Byte>>
  PROPERTIES
    buffer = Byte[]( 1024 )

    native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
            |HANDLE output_writer;
            |HANDLE output_reader;
            |#endif

  METHODS
    method init
      local success = false
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |SECURITY_ATTRIBUTES security_attributes;
              |security_attributes.nLength = sizeof( SECURITY_ATTRIBUTES );
              |security_attributes.bInheritHandle = TRUE;
              |security_attributes.lpSecurityDescriptor = NULL;
              |if ( !CreatePipe(&$this->output_reader,&$this->output_writer,&security_attributes,0) ) goto ERROR_EXIT;
              |if ( !SetHandleInformation($this->output_reader,HANDLE_FLAG_INHERIT,0) ) goto ERROR_EXIT;
              |$success = 1;
              |ERROR_EXIT:
              |#endif
      if (not success) error.println("Process reader could not be initialized.")

    method close
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |if ($this->output_reader)
              |{
              |  CloseHandle( $this->output_reader );
              |  $this->output_reader = NULL;
              |}
              |if ($this->output_writer)
              |{
              |  CloseHandle( $this->output_writer );
              |  $this->output_writer = NULL;
              |}
              |#endif

    method fill_buffer->Logical
      buffer.reserve( 1024 );
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |if ($this->output_reader)
              |{
              |  DWORD available_count;
              |  if (PeekNamedPipe( $this->output_reader, NULL, 0, NULL, &available_count, NULL ))
              |  {
              |    if (available_count)
              |    {
              |      DWORD read_count;
              |      if (ReadFile($this->output_reader, $buffer->as_bytes+$buffer->count, 1024, &read_count, NULL))
              |      {
              |        if (read_count)
              |        {
              |          $buffer->count += read_count;
                         return true
      native @|        }
              |      }
              |    }
              |  }
              |}
              |#endif
      return false

    method has_another->Logical
      if (buffer.count) return true
      return fill_buffer

    method peek->Byte
      if (not has_another) return 0
      return buffer.first

    method read->Byte
      if (not has_another) return 0
      ++@position
      return buffer.remove_first

    method read( buffer:Byte[], limit:Int32 )->Int32
      while (buffer.count < limit and fill_buffer) noAction
      local n = buffer.count.or_smaller( limit )
      if (n)
        buffer.reserve( n )
        native @|memcpy( $buffer->as_bytes+$buffer->count, $buffer->as_bytes, $n );
        buffer.discard( 0, n )
        @position += n
      endIf
      return n
endClass

class WindowsProcessWriter : Writer<<Byte>>
  PROPERTIES
    buffer = Byte[]( 1024 )

    native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
            |HANDLE input_writer;
            |HANDLE input_reader;
            |#endif

  METHODS
    method init
      local success = false
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |SECURITY_ATTRIBUTES security_attributes;
              |security_attributes.nLength = sizeof( SECURITY_ATTRIBUTES );
              |security_attributes.bInheritHandle = TRUE;
              |security_attributes.lpSecurityDescriptor = NULL;
              |if ( !CreatePipe(&$this->input_reader,&$this->input_writer,&security_attributes,0) ) goto ERROR_EXIT;
              |if ( !SetHandleInformation($this->input_writer,HANDLE_FLAG_INHERIT,0) ) goto ERROR_EXIT;
              |$success = 1;
              |ERROR_EXIT:
              |#endif
      if (not success) error.println("Process reader could not be initialized.")

    method close
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |if ($this->input_reader)
              |{
              |  CloseHandle( $this->input_reader );
              |  $this->input_reader = NULL;
              |}
              |#endif
      close_pipe

    method close_pipe
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |if ($this->input_writer)
              |{
              |  CloseHandle( $this->input_writer );
              |  $this->input_writer = NULL;
              |}
              |#endif

    method flush
      if (not buffer.count) return

      local write_count = 0
      native @|#ifdef %NS%ROGUE_PLATFORM_WINDOWS
              |if ($this->input_writer)
              |{
              |  DWORD write_count;
              |  if (WriteFile($this->input_writer,$buffer->as_bytes,$buffer->count,&write_count,NULL))
              |  {
              |    $write_count = write_count;
              |  }
              |}
              |#endif

      if (write_count)
        @position += write_count
        buffer.discard( 0, write_count )
      endIf

    method seek( pos:Int32 )
      error.println "Unsupported operation $.seek(Int32)."(type_name)

    method seek_end()
      error.println "Unsupported operation $.seek_end()."(type_name)

    method skip( n:Int32 )
      seek( position + n )

    method write( value:Byte )
      buffer.add( value )

    method write( list:Byte[] )
      buffer.add( list )
endClass

class ProcessResult
  PROPERTIES
    exit_code     : Int32
    output_bytes  : Byte[]
    error_bytes   : Byte[]
    output_string : String
    error_string  : String

  METHODS
    method init( exit_code, output_bytes, error_bytes )

    method error_string->String
      if (not @error_string) @error_string = String( error_bytes )
      return @error_string

    method output_string->String
      if (not @output_string) @output_string = String( output_bytes )
      return @output_string

    method success->Logical
      return 0 == exit_code

    method to->Int32
      return exit_code

    method to->String
      if (not error_string.count)  return output_string
      if (not output_string.count) return error_string
      return output_string + error_string
endClass

class ProcessEchoer
  PROPERTIES
    process       : Process
    output_reader : Reader<<Byte>>
    error_reader  : Reader<<Byte>>
    output_buffer = Byte[]
    error_buffer  = Byte[]
    output_bytes  = Byte[]
    error_bytes   = Byte[]

  METHODS
    method init( process )
      output_reader = process.output_reader
      error_reader = process.error_reader

    method run->ProcessResult
      while (not process.is_finished)
        update_io
        System.sleep( 0.05 )
      endWhile
      update_io
      return ProcessResult( process.@exit_code, output_bytes, error_bytes )

    method update_io
      while (output_reader.has_another)
        local b = output_reader.read
        output_buffer.add( b )
        output_bytes.add( b )
        if (b == '\n')
          print( String(output_buffer) ); flush
          output_buffer.clear
        endIf
      endWhile
      while (error_reader.has_another)
        local b = error_reader.read
        error_buffer.add( b )
        error_bytes.add( b )
        if (b == '\n')
          error.print( String(error_buffer) ); error.flush
          error_buffer.clear
        endIf
      endWhile
endClass
