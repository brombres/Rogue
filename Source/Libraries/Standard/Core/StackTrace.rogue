class StackTrace
  PROPERTIES
    frames : StackTraceFrame[]

  METHODS
    method init
      local n = native("%Ns%Rogue_call_stack_count")->Int
      if (n)
        # Stow the current line number
        native @|%Ns%Rogue_call_stack[%Ns%Rogue_call_stack_count-1].line = %Ns%Rogue_call_stack_line;

        frames = StackTraceFrame[]( n )

        forEach (i in 0..<n)
          local line = line(i)
          if (line == -1) escapeForEach  # indicates point of 'throw'
          frames.add( StackTraceFrame(procedure(i), filename(i), line) )
        endForEach

        if (frames.last.procedure == "StackTrace.init()") frames.remove_last
        while (frames.count and frames.last.procedure.contains(".save_stack_trace()")) frames.remove_last
      endIf

    method discard_exception_frames( exception_type_name:String )
      local procedure_name = "$.init_object()"(exception_type_name)
      while (frames.count and frames.last.procedure.contains(".init_object()"))
        local frame = frames.remove_last
        if (frame.procedure == procedure_name) escapeWhile
      endWhile

    method display
      println this->String

    method filename( index:Int )->String
      if (native("!%Ns%Rogue_call_stack[$index].filename")->Logical) return "INTERNAL"
      return native("%Ns%RogueString_create( %Ns%Rogue_call_stack[$index].filename )")->String

    method line( index:Int )->Int
      return native("%Ns%Rogue_call_stack[$index].line")->Int

    method procedure( index:Int )->String
      if (native("!%Ns%Rogue_call_stack[$index].procedure")->Logical) return "Unknown Procedure"
      return native("%Ns%RogueString_create( %Ns%Rogue_call_stack[$index].procedure )")->String

    method to->String
      if (not frames) return "(Call history unavailable - compile with '--debug')"

      local left_w = 0
      local right_w = 0
      forEach (frame in frames)
        left_w .= or_larger( frame.procedure.count )
        right_w .= or_larger( frame.filename.count + frame.line.digit_count )
      endForEach

      local max_w = Console.width.or_larger(80)
      if (left_w + right_w + 5 > max_w)
        left_w = (max_w - (right_w + 5)).clamped_low(20)
        right_w = (max_w - (left_w + 5))
      endIf

      local result = String()
      forEach (frame in frames)
        result.println frame->String(left_w,right_w)
      endForEach
      return result
endClass

class StackTraceFrame( procedure:String, filename:String, line:Int ) [compound]
  METHODS
    method to->String
      return "[$  $:$]" (procedure, filename, line )

    method to->String( left_w:Int, right_w:Int )
      local builder = String()
      builder.print '['
      if (procedure.count > left_w) builder.print( procedure.leftmost(left_w-3) + "..." )
      else                          builder.print( procedure.justified(-left_w) )
      builder.print "  "
      right_w -= line.digit_count
      if (filename.count > right_w) builder.print( filename.leftmost(right_w-3) + "..." )
      else                          builder.print( filename.justified(right_w) )
      builder.print ':'
      builder.print line
      builder.print ']'
      return builder
endClass
