class Timer
  # EXAMPLES
  #
  # uses Utility/Timer
  #
  #   # Stopwatch mode
  #   block
  #     local timer = Timer()
  #     println timer          # 0.00 seconds
  #     System.sleep(1.5)
  #     println timer          # 1.50 seconds
  #     println
  #   endBlock
  #
  #   # Countdown mode
  #   block
  #     local timer = Timer(2.5)
  #     println timer.is_expired  # false
  #     System.sleep(1)
  #     println timer.is_expired  # false
  #     System.sleep(1)
  #     println timer.is_expired  # false
  #     System.sleep(1)
  #     println timer.is_expired  # true
  #     println
  #   endBlock
  PROPERTIES
    duration   : Real
    start_time : Real
    stop_time  : Real?
    counting_down : Logical

  METHODS
    method init( &stopped )
      counting_down = false
      start_time = System.execution_time
      if (stopped) stop_time = start_time
      else         stop_time = null

    method init( duration, &stopped )
      counting_down = true
      start_time = System.execution_time
      if (stopped) stop_time = start_time
      else         stop_time = null

    method elapsed->Real
      local s : Real

      if (stop_time.exists) s = (stop_time.value - start_time)
      else                  s = (System.execution_time - start_time)

      if (counting_down) s .= or_smaller(duration)
      return s

    method elapsed_ms->Int64
      return (elapsed * 1000)->Int64

    method is_expired->Logical
      return elapsed >= duration

    method is_running->Logical
      return not stop_time.exists

    method is_stopped->Logical
      return stop_time.exists

    method restart
      start_time = System.execution_time
      stop_time = null

    method start
      # Starts if currently stopped; otherwise no effect.
      if (stop_time.exists)
        start_time = System.execution_time - elapsed
        stop_time = null
      endIf

    method stop
      # Stops if currently running; otherwise no effect.
      if (not stop_time.exists) stop_time = System.execution_time

    method operator+( delta_time:Real )->this
      # Increase the elapsed interval of this stopwatch.
      start_time -= delta_time
      return this

    method operator-( delta_time:Real )->this
      # Decrease the elapsed interval of this stopwatch.
      start_time += delta_time
      return this

    method remaining->Real
      # If a count-up timer, returns 0.
      # If count-down, return 0 <= seconds remaining <= duration.
      if (counting_down)
        return (duration - elapsed).clamped_low( 0 )
      else
        return 0
      endIf

    method to->String
      return String().[ print(elapsed,2), print(" seconds") ]

endClass
