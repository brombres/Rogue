#==============================================================================
# USAGE
#   uses Collection/Node
#   ...
#
# EXAMPLES
#   Simple Int32Node example:
#     https://gist.github.com/AbePralle/f11d0bd55f8d81616c91205a3fe554c4
#
#   More Complex Cmd node example with multimethod-style visitor
#     https://gist.github.com/AbePralle/43ca8f8a74a4ef5a5fd001ad0e62f1d2
#==============================================================================
class Node<<$ExtendedNodeType>> : IteratorPreferred
  PROPERTIES
    parent      : $ExtendedNodeType
    first_child : $ExtendedNodeType
    last_child  : $ExtendedNodeType
    next        : $ExtendedNodeType
    count       : Int
    structure_modified : Logical

  METHODS
    method add( new_child:$ExtendedNodeType )
      insert( new_child, count )

    method add_next( new_sibling:$ExtendedNodeType )
      if (parent)
        parent.add( new_sibling )
      else
        local cur = this
        while (cur.next) cur = cur.next
        cur.@next = new_sibling
      endIf

    method apply( fn:Function($ExtendedNodeType) )
      # Recursively traverse this node and all its children, calling fn(node) on each.
      fn( this->(as $ExtendedNodeType) )
      (forEach in children).apply(fn)

    method children->NodeIterator<<$ExtendedNodeType>>
      return NodeIterator<<$ExtendedNodeType>>( first_child )

    method clear
      remove_children

    method clear_structure_modified
      structure_modified = false
      if (first_child) first_child.clear_structure_modified
      if (next)  next.clear_structure_modified

    method contains( node:$ExtendedNodeType )->Logical
      if (not node) return false
      node .= parent
      while (node)
        if (node is this) return true
        node .= parent
      endWhile
      return false

    method detach( &preserve_next )->$ExtendedNodeType
      # Detaches this node from its current parent and all of its siblings.
      #
      # preserve_next
      #   When true, this node's 'next' is not cleared. Nodes that are the head
      #   sibling of a list can be added as children; this flag is used internally
      #   to making sure a node is detached while not accidentally removing all
      #   successive nodes.
      local tail = this
      local n = 1
      if (preserve_next)
        while (tail.next) tail .= next; ++n
      endIf

      if (parent)
        if (parent.first_child is this)
          if (parent.last_child is tail)
            parent.@first_child = null
            parent.@last_child = null
          else
            parent.@first_child = tail.next
          endIf
        else
          local cur = parent.first_child
          while (cur)
            local next_sibling = cur.next
            if (next_sibling is this)
              cur.@next = this.next
              if (tail is parent.last_child) parent.@last_child = cur
              escapeWhile
            endIf
            cur = next_sibling
          endWhile
        endIf
        parent.count -= n
        parent.structure_modified = true
        @parent = null
      endIf
      if (not preserve_next)
        @next = null
        structure_modified = true
      endIf
      return this->(as $ExtendedNodeType)

    method discard( fn:Function($ExtendedNodeType)->Logical )->$ExtendedNodeType
      # Discards (detaches) any node in this tree that match the query.
      # fn(node) should return true to discard that node, false to keep it.
      # Returns the original root or null if the root has been discarded.
      if (fn(this->(as $ExtendedNodeType)))
        detach
        return null
      else
        (forEach in children).discard( fn )
        return this->(as $ExtendedNodeType)
      endIf

    method dispatch_on<<$VisitorType>>( visitor:$VisitorType )->$ExtendedNodeType [propagated]
      if (ThisType instanceOf $ExtendedNodeType)
        return visitor.on( this )
      else
        return null
      endIf

    method dispatch_on_visit<<$VisitorType>>( visitor:$VisitorType ) [propagated]
      if (ThisType instanceOf $ExtendedNodeType)
        visitor.on_visit( this )
        visitor.visit_children( this )
      endIf

    method get( index:Int )->$ExtendedNodeType
      if (index < 0 or index >= count) return null
      if (index == 0)       return first_child
      if (index == count-1) return last_child
      local cur = first_child
      loop (index) cur = cur.next
      return cur

    method insert( new_child:$ExtendedNodeType, before_index=0:Int )
      if (new_child is null) return
      if (new_child.parent is this) return
      new_child.detach( &preserve_next )

      local last_new_child = new_child.last_sibling

      if (first_child is null)
        @first_child = new_child
        @last_child = last_new_child
      elseIf (before_index <= 0)
        last_new_child.@next = first_child
        @first_child = new_child
      elseIf (before_index >= count)
        last_child.@next = new_child
        @last_child = last_new_child
      else
        local cur = first_child
        loop (before_index-1) cur = cur.next
        last_new_child.@next = cur.next
        cur.@next = new_child
      endIf

      ++count
      local cur = new_child
      cur.@parent = this->(as $ExtendedNodeType)
      while (cur is not last_new_child)
        ++count
        cur = cur.next
        cur.@parent = this->(as $ExtendedNodeType)
      endWhile

      this.structure_modified = true

      cur = new_child
      cur.structure_modified = true
      while (cur is not last_new_child)
        cur = cur.next
        cur.structure_modified = true
      endWhile

    method insert_next( new_sibling:$ExtendedNodeType )
      local cur = this->(as $ExtendedNodeType)
      local original_next = next
      local mod_count = 0
      while (new_sibling)
        cur.@next = new_sibling
        new_sibling.@parent = this.parent
        ++mod_count
        cur = new_sibling
        new_sibling = new_sibling.next
      endWhile

      cur.@next = original_next
      if (original_next is null)
        if (parent) parent.@last_child = cur
      endIf

      if (parent) parent.count += mod_count

      cur = this.next
      loop (mod_count)
        cur.structure_modified = true
        cur = cur.next
      endLoop

    method iterator->NodeIterator<<$ExtendedNodeType>>
      return NodeIterator<<$ExtendedNodeType>>( this->(as $ExtendedNodeType) )

    method node_name->String
      return type_name

    method last_sibling->$ExtendedNodeType
      local cur = this->(as $ExtendedNodeType)
      while (cur.next) cur = cur.next
      return cur

    method locate( child:$ExtendedNodeType )->Int?
      # Returns 0-based index of child in this node's children or else null.
      local i = 0
      local cur = first_child
      while (cur)
        if (cur is child) return i
        cur .= next
        ++i
      endWhile
      return null

    method remove( child:$ExtendedNodeType )->$ExtendedNodeType
      child.detach
      return child

    method remove_at( index:Int )->$ExtendedNodeType
      local result = this[ index ]
      remove( result )
      return result

    method remove_first->$ExtendedNodeType
      return remove( first_child )

    method remove_last->$ExtendedNodeType
      return remove( last_child )

    method remove_children->$ExtendedNodeType
      local result = first_child
      local cur = result
      while (cur)
        cur.@parent = null
        cur = cur.next
      endWhile

      @first_child = null
      @last_child = null
      count = 0
      structure_modified = true

      cur = result
      while (cur)
        cur.structure_modified = true
        cur = cur.next
      endWhile

      return result

    method set_first( node:$ExtendedNodeType )
      if (first_child) remove_first
      insert( node )

    method set_structure_modified( setting:Logical )
      if (@structure_modified == setting) return
      @structure_modified = setting
      if (setting and parent) parent.structure_modified = true

    method set_last( node:$ExtendedNodeType )
      if (last_child) remove_last
      add( node )

    method set_next( node:$ExtendedNodeType )
      if (next) next.detach
      insert_next( node )

    method set_parent( new_parent:$ExtendedNodeType )
      if (new_parent)
        new_parent.add( this->(as $ExtendedNodeType) )
      endIf

    method set( index:Int, node:$ExtendedNodeType )
      if (index < 0)
        insert( node )
      elseIf (index == 0)
        set_first( node )
      elseIf (index >= count)
        add( node )
      elseIf (index == count-1)
        set_last( node )
      else
        this[index-1].set_next( node )
      endIf

    method split->(head:$ExtendedNodeType,tail:$ExtendedNodeType)
      # Returns (head,tail)
      local tail = next
      if (parent)
        detach
        return (this->(as $ExtendedNodeType), parent.remove_children)
      else
        @next = null
        return (this->(as $ExtendedNodeType), tail)
      endIf

    method to->String
      if (first_child)
        local result = String()
        result.print type_name
        result.print '('
        forEach (child at i in children)
          if (i > 0) result.print ','
          result.print child
        endForEach
        result.print ')'
        return result
      else
        return type_name
      endIf

endClass

class NodeIterator<<$ExtendedNodeType>>( cur:$ExtendedNodeType ) [compound]
  METHODS
    method has_another->Logical
      return cur?

    method read->$ExtendedNodeType [mutating]
      local result = cur
      cur .= next
      return result

    method read_another->$ExtendedNodeType? [mutating]
      if (not cur) return null
      local result = cur
      cur .= next
      return result

    method to->$ExtendedNodeType[]
      return to_list

    method to_list->$ExtendedNodeType[]
      local result = $ExtendedNodeType[]
      block cur
        while (cur)
          result.add( cur )
          cur .= next
        endWhile
      endBlock
      return result
endClass

class NodeVisitor<<$ExtendedNodeType>>
  METHODS
    method on( node:$ExtendedNodeType )->$ExtendedNodeType [propagated]
      # Default handler - overload for specialized `node` types if desired.
      if (ThisType isType NodeVisitor<<$ExtendedNodeType>>)
        return node  # This on() only kicks in for an extended class
      else
        node.dispatch_on_visit( this )
      endIf
      return node

    method on_visit( node:$ExtendedNodeType )
      # Overload this method to handle extended node types
      noAction

    method visit( node:$ExtendedNodeType )->$ExtendedNodeType [propagated]
      if (ThisType isType NodeVisitor<<$ExtendedNodeType>>)
        return node  # This visit() only kicks in for an extended class
      else
        if (node is null) return null
        return node.dispatch_on( this )
      endIf

    method visit_children( node:$ExtendedNodeType ) [propagated]
      # Overload this method to handle extended node types if desired
      if (ThisType isType NodeVisitor<<$ExtendedNodeType>>)
        return # This visit() only kicks in for an extended class
      else
        if (node is null) return
        local remaining = node.remove_children
        while (remaining)
          local cur : $ExtendedNodeType
          (cur,remaining) = remaining.split
          local result = visit( cur )
          if (result) node.add( result )
        endWhile
      endIf
endClass

