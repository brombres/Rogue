class Degrees( value:Real ) [compound]
  GLOBAL METHODS
    method create( degrees:Radians )->Degrees
      return Degrees( (degrees.value / pi) * 180.0 )

    method operator?( degrees:Degrees )->Logical
      return degrees.value?

  METHODS
    method clamped( min:Degrees, max:Degrees )->Degrees
      local delta_min_max = min.delta_to( max ).value
      local delta_this_min = this.delta_to( min ).value
      local delta_this_max = this.delta_to( max ).value
      if (delta_min_max > 0)
        if (delta_this_min <= 0 and delta_this_max >= 0) return this  # already inside range
        if (delta_this_min.abs <= delta_this_max.abs) return min  # clamp to min
        return max  # clamp to max
      else
        if (delta_this_min >= 0 and delta_this_max <= 0) return this  # already inside range
        if (delta_this_min.abs <= delta_this_max.abs) return min  # clamp to min
        return max  # clamp to max
      endIf

    method cos->Real
      return ((value / 180.0) * pi).cos

    method delta_to( other:Degrees )->Degrees
      # Returns the smallest number of degrees necessary to get from this
      # angle to the specified other angle.  For example, Degrees(270).delta_to(Degrees(0))
      # yields Degrees(90), since turning 90 degrees will get you to 0 degrees
      # "faster" than turning -270 degrees.
      local diff = other.value - this.value
      diff %= 360
      if (diff > 180) diff = -(360 - diff)
      return Degrees(diff)

    method floor->Degrees
      return Degrees( value.floor )

    method hashcode->Int
      return value.hashcode

    method operator-()->Degrees
      return Degrees( -this.value )

    method operator+( degrees:Real )->Degrees
      return Degrees( this.value + degrees )

    method operator-( degrees:Real )->Degrees
      return Degrees( this.value - degrees )

    method operator*( degrees:Real )->Degrees
      return Degrees( this.value * degrees )

    method operator/( degrees:Real )->Degrees
      return Degrees( this.value / degrees )

    method operator%( degrees:Real )->Degrees
      return Degrees( this.value % degrees )

    method operator^( degrees:Real )->Degrees
      return Degrees( this.value ^ degrees )

    method operator+( other:Degrees )->Degrees
      return Degrees( this.value + other.value )

    method operator-( other:Degrees )->Degrees
      return Degrees( this.value - other.value )

    method operator*( other:Degrees )->Degrees
      return Degrees( this.value * other.value )

    method operator/( other:Degrees )->Degrees
      return Degrees( this.value / other.value )

    method operator%( other:Degrees )->Degrees
      return Degrees( this.value % other.value )

    method operator^( other:Degrees )->Degrees
      return Degrees( this.value ^ other.value )

    method operator==( other:Degrees )->Logical
      return value == other.value

    method operator==( other_value:Real )->Logical
      return value == other_value

    method operator<>( other:Degrees )->Real
      return value <> other.value

    method operator<>( other_value:Real )->Real
      return value <> other_value

    method sin->Real
      return ((value / 180.0) * pi).sin

    method tan->Real
      return ((value / 180.0) * pi).tan

    method to->Real
      return value

    method to->String
      return value->String

    method to->Radians
      return Radians( this )
endClass

augment Random
  METHODS
    method degrees->Degrees
      return Degrees( real * 360 )
endAugment
