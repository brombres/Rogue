$include Control/ProgressFn

class State<<$ExtendedType>>
  DEFINITIONS
    # Duration values
    INSTANT    =  0  # one and done
    INDEFINITE = -1  # action loops until finish() called or overridden is_finished()->true [default]

  GLOBAL METHODS
    method create( fn:Function() )->$ExtendedType
      return StateCall<<$ExtendedType>>( fn )

    method create( fn:Function(Real), duration:Real, progress_fn=ProgressFn.LINEAR:Function(Real)->Real )->$ExtendedType
      return StateCallWithProgress<<$ExtendedType>>( fn, duration, progress_fn )

    method operator+( a:$ExtendedType, b:$ExtendedType )->$ExtendedType
      if (not a) return b
      if (not b) return a
      return a.and_then( b )

    method operator|( a:$ExtendedType, b:$ExtendedType )->$ExtendedType
      if (not a) return b
      if (not b) return a
      return a.also( b )

    method wait( duration:Real )->$ExtendedType
      return StateWait<<$ExtendedType>>( duration )

    method wait_for( condition:Function->Logical, duration=$ExtendedType.INDEFINITE:Real )->$ExtendedType
      return StateWaitFor<<$ExtendedType>>( condition, duration )

    method yield->$ExtendedType
      return StateYield<<$ExtendedType>>()

  PROPERTIES
    duration    : Real
    progress_fn = ProgressFn.LINEAR : Function(Real)->Real

    next_state       : $ExtendedType
    concurrent_state : $ExtendedType

    t          : Real
    delta_time : Real
    prev_time  : Real  # 0 = not started

    exited : Logical # flag that assists when states finish outside of updated()

  METHODS
    method init
      noAction

    method init( progress_fn )

    method init( duration, progress_fn=ProgressFn.LINEAR )

    method allow_multiple_states_per_update->Logical
      # Does change_state() etc. execute immediately or on the next call to updated()?
      return true

    method and_then( state:$ExtendedType )->$ExtendedType
      if (state)
        local cur = this
        while (cur.next_state) cur = cur.next_state
        cur.next_state = state
      endIf
      return this->(as $ExtendedType)

    method and_then_also( state:$ExtendedType )->$ExtendedType
      if (next_state) next_state = next_state.also( state )
      else      next_state = state
      return this->(as $ExtendedType)

    method also( state:$ExtendedType )->$ExtendedType
      if (state)
        local cur = this
        while (cur.concurrent_state) cur = cur.concurrent_state
        cur.concurrent_state = state
      endIf
      return this->(as $ExtendedType)

    method change_state( new_state:$ExtendedType )
      next_state = new_state
      exit_state

    method count->Int32
      local n = 1
      if (next_state) n += next_state.count
      if (concurrent_state) n += concurrent_state.count
      return n

    method describe->String
      return type_name

    method description->String
      local result = describe
      if (next_state) result = "$ + $" (result,next_state->String)
      if (concurrent_state) result = "($) | ($)" (result,concurrent_state)
      return result

    method exit_state
      exited = true
      finish

    method finish
      if (duration < 0) duration = 0
      t = duration

    method insert_next( state:$ExtendedType )
      if (state) next_state = state.and_then( next_state )

    method is_finished->Logical
      return (duration >= 0 and t >= duration)

    method is_started->Logical
      return (prev_time > 0)

    method last->$ExtendedType
      # Returns the last state in this chain
      local cur = this
      while (cur.next_state ) cur = cur.next_state
      return cur

    method on_execute
      # Override to automatically make duration INSTANT
      duration = INDEFINITE  # only happeens when not overridden
      on_start  # start an indefinite state

    method on_start

    method on_update

    method on_finish

    method progress->Real
      return which{ duration>0:progress_fn(t/duration) || 1.0 }

    method to->String
      return description

    method updated->$ExtendedType
      if (exited)
        # Already exited outside of updated()
        if (concurrent_state)
          concurrent_state = concurrent_state.updated
        endIf
      else
        local cur_time = System.execution_time
        if (not prev_time)
          if (duration)
            on_start
          else
            on_execute
            # Default will change duration to INDEFINITE and call on_start()
            # Override on_execute() to keep INSTANT.
          endIf
        else
          delta_time = (cur_time - prev_time)
          if (delta_time > 1.0/10.0) delta_time = 1.0/60.0
          t += delta_time
          if (duration >= 0 and t > duration) t = duration
        endIf

        prev_time = cur_time

        on_update

        if (concurrent_state)
          concurrent_state = concurrent_state.updated
        endIf

        if (not is_finished) return this->(as $ExtendedType)
      endIf

      .handle_finish

      return .start_next

    method .handle_finish
      on_finish

    method .start_next->$ExtendedType
      # Finds the successor to this state, adjusts links if necessary, and
      # returns it or the result of a call to its updated().
      if (next_state)
        if (concurrent_state)
          # Attach any parallel commands remaining in this finished command to the
          # next_state command in this chain that will be the new head.
          next_state = next_state.also( concurrent_state )
          concurrent_state = null
        endIf
        if (allow_multiple_states_per_update) return next_state.updated
        else                                  return next_state
      elseIf (concurrent_state)
        # .start_next() is called after updated(), which has already updated 'concurrent_state' this tick.
        return concurrent_state
      else
        return null
      endIf

endClass

class StateWait<<$ExtendedType>>( duration ) : $ExtendedType [undocumented];

class StateWaitFor<<$ExtendedType>>( condition:Function->Logical, duration=$ExtendedType.INDEFINITE )
  : $ExtendedType [undocumented]
  METHODS
    method is_finished->Logical
      return condition()
endClass

class StateCall<<$ExtendedType>>( fn:Function(), duration=$ExtendedType.INSTANT ) : $ExtendedType [undocumented]
  METHODS
    method on_execute
      fn()
endClass

class StateCallWithProgress<<$ExtendedType>>( fn:Function(Real), duration, progress_fn ) : $ExtendedType [undocumented]
  METHODS
    method on_update
      fn( progress )
endClass

class StateYield<<$ExtendedType>> : $ExtendedType
  PROPERTIES
    ticks = 0

  METHODS
    method is_finished->Logical
      return ticks == 2

    method on_update
      ++ticks
endClass
