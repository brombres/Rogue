class Ticker( interval:Real, threshold:Real, max_dt:Real, time_fn:Function->Real ) [compound]
  PROPERTIES
    prev_time : Real
    dt        : Real
    time_debt : Real
    ticks     : Int

  GLOBAL METHODS
    method create( ticks_per_second=60:Int, tolerance=0.05:Real, max_dt=0.1:Real,
                   time_fn=null:Function->Real )->Ticker

      local interval = 1.0 / ticks_per_second

      return Ticker( interval, interval*(1.0-tolerance), max_dt, time_fn )

  METHODS
    method update->(ticks:Int,dt:Real) [mutating]
      local cur_time : Real
      if (time_fn) cur_time = time_fn()
      else         cur_time = System.execution_time

      dt = cur_time - prev_time
      time_debt += dt

      if (dt > max_dt or prev_time == 0)
        dt = interval
        ticks = 1
        time_debt = 0
      elseIf (time_debt >= threshold)
        ticks = (time_debt / interval).clamped_low(1.0)->Int
        time_debt -= ticks * interval
      else
        ticks = 0
      endIf

      prev_time = cur_time

      return (ticks,dt)
endClass
