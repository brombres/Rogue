# USAGE
#   uses Control/ProgressFn
#
#   local fn = ProgressFn.QUADRATIC_OUT : ProgressFnType
#   forEach (t in 0.0..1.0 step 0.05)
#     println "f($) = $"(t.format(".2"),fn(t).format(".2"))
#   endForEach
#
#   # f(0.00) = 0.00
#   # f(0.05) = 0.10
#   # f(0.10) = 0.19
#   # f(0.15) = 0.28
#   # f(0.20) = 0.36
#   # f(0.25) = 0.44
#   # f(0.30) = 0.51
#   # f(0.35) = 0.58
#   # f(0.40) = 0.64
#   # f(0.45) = 0.70
#   # f(0.50) = 0.75
#   # f(0.55) = 0.80
#   # f(0.60) = 0.84
#   # f(0.65) = 0.88
#   # f(0.70) = 0.91
#   # f(0.75) = 0.94
#   # f(0.80) = 0.96
#   # f(0.85) = 0.98
#   # f(0.90) = 0.99
#   # f(0.95) = 1.00
$define ProgressFnType Function(Real)->Real

class ProgressFn
  GLOBAL PROPERTIES
    BACK            = function(t:Real)->Real
                        if( t < 0.5 )
                          return t * t * (7 * t - 2.5) * 2
                        else
                          --t
                          return 1 + t * t * 2 * (7 * t + 2.5)
                        endIf
                      endFunction
    BACK_IN         = function(t:Real)->Real: return t * t * (2.70158 * t - 1.70158)
    BACK_OUT        = function(t:Real)->Real: return (t-1) * (t-1) * (2.70158*(t-1) + 1.70158) + 1
    BACK_EASY_OUT   = function(t:Real)->Real: return 1 - ((1.0 - t)^2 - (1.0 - t)/1.25 * Radians((1.0 - t) * pi).sin)

    BOUNCE          = function(t:Real)->Real
                        if( t < 0.5 )
                          return 8 * 2 ^ (8 * (t - 1) ) * ( t * pi * 7 ).sin.abs
                        else
                          return 1 - 8 * 2 ^ (-8 * t) * ( t * pi * 7 ).sin.abs
                        endIf
                      endFunction
    BOUNCE_IN       = function(t:Real)->Real: return 2 ^ (6 * (t - 1)) * ( t * pi * 3.5 ).sin.abs
    BOUNCE_OUT      = function(t:Real)->Real: return 1 - 2 ^ (-6 * t) * ( t * pi * 3.5 ).cos.abs

    CIRCULAR        = function(t:Real)->Real
                        if( t < 0.5 )
                          return (1 - ( 1 - 2 * t ).sqrt) * 0.5
                        else
                          return (1 + ( 2 * t - 1 ).sqrt) * 0.5
                        endIf
                      endFunction
    CIRCULAR_IN     = function(t:Real)->Real: return 1 - ( 1 - t ).sqrt
    CIRCULAR_OUT    = function(t:Real)->Real: return ( t ).sqrt

    CUBIC           = function(t:Real)->Real
                        t *= 2
                        if (t < 1) return 0.5 * t * t * t
                        t -= 2
                        return 0.5 * (t * t *t + 2)
                      endFunction
    CUBIC_IN        = function(t:Real)->Real: return t * t * t
    CUBIC_OUT       = function(t:Real)->Real: --t; return 1 + t * t * t

    ELASTIC         = function(t:Real)->Real
                        if( t < 0.45 )
                          local p2 = t * t
                          return 8 * p2 * p2 * ( t * pi * 9 ).sin
                        elseIf( t < 0.55 )
                          return 0.5 + 0.75 * ( t * pi * 4 ).sin
                        else
                          local p2 = (t - 1) * (t - 1)
                          return 1 - 8 * p2 * p2 * ( t * pi * 9 ).sin
                        endIf
                      endFunction
    ELASTIC_IN      = function(t:Real)->Real
                        local p2 = t * t
                        return p2 * p2 * ( t * pi * 4.5 ).sin
                      endFunction
    ELASTIC_OUT     = function(t:Real)->Real
                        local p2 = (t - 1) * (t - 1)
                        return 1 - p2 * p2 * ( t * pi * 4.5 ).cos
                      endFunction

    EXPONENTIAL     = function(t:Real)->Real
                        if( t < 0.5 )
                          return (2^(16 * t) - 1) / 510
                        else
                          return 1 - 0.5 * 2 ^ (-16 * (t - 0.5))
                        endIf
                      endFunction
    EXPONENTIAL_IN  = function(t:Real)->Real: return (2^(8*t) - 1) / 255
    EXPONENTIAL_OUT = function(t:Real)->Real: return 1 - 2^(-8*t)

    LINEAR          = function(t:Real)->Real: return t

    QUADRATIC       = function(t:Real)->Real: return which{ t<0.5:2*t*t || 0.5 + (0.5-t) * (2*t-3) }
    QUADRATIC_IN    = function(t:Real)->Real: return t * t
    QUADRATIC_OUT   = function(t:Real)->Real: return t * (2 - t)

    QUADRATIC_INVERSE  =
      function(p:Real)->Real
        if (p < 0.5)
          return (p / 2).sqrt
        else
          return 1.0 - ((2.0 * (1.0 - p)).sqrt / 2.0)
        endIf
      endFunction
    QUADRATIC_IN_INVERSE  = function(p:Real)->Real: return p.sqrt
    QUADRATIC_OUT_INVERSE = function(p:Real)->Real: return (1 - (1-p).sqrt)

    QUARTIC         = function(t:Real)->Real
                        if (t < 0.5)
                          t *= t
                          return 8 * t * t
                        else
                          --t
                          t *= t
                          return 1 - 8 * t * t
                        endIf
                      endFunction
    QUARTIC_IN      = function(t:Real)->Real: t *= t; return t * t
    QUARTIC_OUT     = function(t:Real)->Real: --t; t *= t; return 1 - t * t

    QUINTIC         = function(t:Real)->Real
                        if( t < 0.5 )
                          local p2 = t * t
                          return 16 * t * p2 * p2
                        else
                          local p2 = (t - 1) * t
                          return 1 + 16 * t * p2 * p2
                        endIf
                      endFunction
    QUINTIC_IN      = function(t:Real)->Real
                        local p2 = t * t
                        return t * p2 * p2
                      endFunction
    QUINTIC_OUT     = function(t:Real)->Real
                        local p2 = (t - t) * t
                        return 1 + t * p2 * p2
                      endFunction

    SINE            = function(t:Real)->Real: return 0.5 * (1 + ( 3.1415926 * (t - 0.5) ).sin )
    SINE_IN         = function(t:Real)->Real: return ( 1.5707963 * t ).sin
    SINE_OUT        = function(t:Real)->Real: return 1 + ( 1.5707963 * (t-1) ).sin

    SMOOTHSTEP      = function(t:Real)->Real: return t * t * (3 - 2*t)
    SMOOTHERSTEP    = function(t:Real)->Real: return t * t * t * (t * (t * 6 - 15) + 10)

    SNAPBOUNCE      = function(t:Real)->Real
                        local exponent = -10 * t
                        return (Radians( -13 * (pi/2) * (t + 1)).sin) * 2 ^ exponent + 1
                      endFunction

endClass

